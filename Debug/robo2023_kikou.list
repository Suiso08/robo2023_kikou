
robo2023_kikou.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a510  0800a510  0001a510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a984  0800a984  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a984  0800a984  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a984  0800a984  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000003a0  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fc33  00000000  00000000  0002028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000230e  00000000  00000000  0002febd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000abb  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000050f3  00000000  00000000  00033a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000114f3  00000000  00000000  00038b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6f2a  00000000  00000000  0004a031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f04  00000000  00000000  000f0f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f5e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4f8 	.word	0x0800a4f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a4f8 	.word	0x0800a4f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <copy>:
uint8_t rxBuffer[RX_BUFFER_SIZE];
uint32_t rxIndex = 0;
char string[RX_BUFFER_SIZE];

void copy()
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
	for(int i=0;i<RX_BUFFER_SIZE;i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e00b      	b.n	8000d38 <copy+0x24>
	{
		string[i]=rxBuffer[i];
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <copy+0x38>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	7819      	ldrb	r1, [r3, #0]
 8000d28:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <copy+0x3c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<RX_BUFFER_SIZE;i++)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	ddf0      	ble.n	8000d20 <copy+0xc>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000398 	.word	0x20000398
 8000d50:	200003dc 	.word	0x200003dc

08000d54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <HAL_UART_RxCpltCallback+0x60>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d123      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x58>
  {
	  if (rxBuffer[rxIndex - 1] == '\r')
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d10e      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0x3c>
	  {
		  //Buffer-setting
		  rxBuffer[rxIndex] = '\0';
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
		  //HAL_UART_Transmit(&huart2, rxBuffer, rxIndex, HAL_MAX_DELAY);
		  copy(); //Copy string from Buffer
 8000d7c:	f7ff ffca 	bl	8000d14 <copy>
		  rxIndex = 0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
		  memset(rxBuffer, '\0', RX_BUFFER_SIZE); //バッファをクリア
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d8c:	f006 fe05 	bl	800799a <memset>
	  }
	  //receive
	  HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_UART_RxCpltCallback+0x68>)
 8000d96:	4413      	add	r3, r2
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_RxCpltCallback+0x60>)
 8000d9e:	f004 f809 	bl	8004db4 <HAL_UART_Receive_IT>
	  rxIndex++;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_UART_RxCpltCallback+0x64>)
 8000daa:	6013      	str	r3, [r2, #0]
  }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000288 	.word	0x20000288
 8000db8:	200003d8 	.word	0x200003d8
 8000dbc:	20000398 	.word	0x20000398

08000dc0 <HAL_TIM_PeriodElapsedCallback>:

//オーバ�???��?��フロー・アン??��?��?ーフローの回数をカウントするグローバル変数
int overflowcnt = 0;
//オーバ�???��?��フローアン??��?��?ーフローすると自動的に呼ばれる関数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
        //??��?��?バッグ用の出力，消してよい???��?��?
    //HAL_UART_Transmit( &huart2, "OVERFLOW!\r\n", 12, 0xFFFF);
        //こ�???��?��関数自体�???��?��TIM3で無くても呼ばれてしま??��?��?可能性がある�???��?��で???��?��??��?��TIM3の割り込みであることを確認す??��?��?
    if(htim->Instance == TIM3){
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d116      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x40>
                //割り込みフラグクリア???��?��??��?��これをしな??��?��?とこ�???��?��関数が�?数回呼び出され??��?��?
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_IT_UPDATE);
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f06f 0201 	mvn.w	r2, #1
 8000dda:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) //0 ??��?��? 65535
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d105      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x36>
        {
            overflowcnt --;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000df2:	6013      	str	r3, [r2, #0]
        else //65535 ??��?��? 0
        {
            overflowcnt ++;
        }
    }
}
 8000df4:	e004      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x40>
            overflowcnt ++;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	2000023c 	.word	0x2000023c
 8000e14:	2000041c 	.word	0x2000041c

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ba      	sub	sp, #232	; 0xe8
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int i,j=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	char test[32];
	char w1[7],w2[7],w3[2],w4[2],w5[3];

	int reset;
	char check[RX_BUFFER_SIZE];
	memset(check,'\0',RX_BUFFER_SIZE);
 8000e24:	463b      	mov	r3, r7
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 fdb5 	bl	800799a <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fe44 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f9a4 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 fb4a 	bl	80014d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e3c:	f000 fb18 	bl	8001470 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e40:	f000 f9f4 	bl	800122c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e44:	f000 fae4 	bl	8001410 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e48:	f000 fa8c 	bl	8001364 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1) != HAL_OK){Error_Handler();}
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	48c3      	ldr	r0, [pc, #780]	; (800115c <main+0x344>)
 8000e50:	f002 fe14 	bl	8003a7c <HAL_TIM_PWM_Start>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <main+0x46>
 8000e5a:	f000 fb85 	bl	8001568 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2) != HAL_OK){Error_Handler();}
 8000e5e:	2104      	movs	r1, #4
 8000e60:	48be      	ldr	r0, [pc, #760]	; (800115c <main+0x344>)
 8000e62:	f002 fe0b 	bl	8003a7c <HAL_TIM_PWM_Start>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <main+0x58>
 8000e6c:	f000 fb7c 	bl	8001568 <Error_Handler>

  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	49bb      	ldr	r1, [pc, #748]	; (8001160 <main+0x348>)
 8000e74:	48bb      	ldr	r0, [pc, #748]	; (8001164 <main+0x34c>)
 8000e76:	f003 ff9d 	bl	8004db4 <HAL_UART_Receive_IT>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);  //エンコー??��?��?読み取りスター??��?��?
 8000e7a:	213c      	movs	r1, #60	; 0x3c
 8000e7c:	48ba      	ldr	r0, [pc, #744]	; (8001168 <main+0x350>)
 8000e7e:	f002 ff8f 	bl	8003da0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);  //割り込み有効??��?��?
 8000e82:	48b9      	ldr	r0, [pc, #740]	; (8001168 <main+0x350>)
 8000e84:	f002 fd46 	bl	8003914 <HAL_TIM_Base_Start_IT>
  int cnt;
  overflowcnt = 0;
 8000e88:	4bb8      	ldr	r3, [pc, #736]	; (800116c <main+0x354>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //string-init
	  memset(moji,'\0',RX_BUFFER_SIZE);
 8000e8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fd7f 	bl	800799a <memset>
	  memset(test,'\0',32);
 8000e9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fd78 	bl	800799a <memset>
	  memset(w1,'\0',7);
 8000eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eae:	2207      	movs	r2, #7
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fd71 	bl	800799a <memset>
	  memset(w2,'\0',7);
 8000eb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f006 fd6a 	bl	800799a <memset>
	  memset(w3,'\0',2);
 8000ec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eca:	2202      	movs	r2, #2
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fd63 	bl	800799a <memset>
	  memset(w4,'\0',2);
 8000ed4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed8:	2202      	movs	r2, #2
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fd5c 	bl	800799a <memset>
	  memset(w5,'\0',3);
 8000ee2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 fd55 	bl	800799a <memset>
	  //start-uart
	  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	499b      	ldr	r1, [pc, #620]	; (8001160 <main+0x348>)
 8000ef4:	489b      	ldr	r0, [pc, #620]	; (8001164 <main+0x34c>)
 8000ef6:	f003 ff5d 	bl	8004db4 <HAL_UART_Receive_IT>
	  //string-set
	  for(i=0;i<RX_BUFFER_SIZE;i++)//
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f00:	e029      	b.n	8000f56 <main+0x13e>
	  {
		  moji[j]=string[i];
 8000f02:	4a9b      	ldr	r2, [pc, #620]	; (8001170 <main+0x358>)
 8000f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f08:	4413      	add	r3, r2
 8000f0a:	7819      	ldrb	r1, [r3, #0]
 8000f0c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
		  if(moji[j] == '\r')
 8000f1a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b0d      	cmp	r3, #13
 8000f28:	d103      	bne.n	8000f32 <main+0x11a>
		  {
			  j=0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			  break;
 8000f30:	e015      	b.n	8000f5e <main+0x146>
		  }
		  else if(moji[j] != '\0')
 8000f32:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <main+0x134>
		  {
			  j++;
 8000f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f46:	3301      	adds	r3, #1
 8000f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  for(i=0;i<RX_BUFFER_SIZE;i++)//
 8000f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5c:	ddd1      	ble.n	8000f02 <main+0xea>
		  }
	  }
	  //value-set
	  for(i=0;i<6;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f64:	e020      	b.n	8000fa8 <main+0x190>
	  {
		  w1[i]=moji[2+i];
 8000f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	33e0      	adds	r3, #224	; 0xe0
 8000f6e:	443b      	add	r3, r7
 8000f70:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8000f74:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f7c:	4413      	add	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
		  w2[i]=moji[13+i];
 8000f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f86:	330d      	adds	r3, #13
 8000f88:	33e0      	adds	r3, #224	; 0xe0
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8000f90:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
	  for(i=0;i<6;i++)
 8000f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	ddda      	ble.n	8000f66 <main+0x14e>
	  }
	  w3[0]=moji[25];
 8000fb0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000fb4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  w4[0]=moji[33];
 8000fb8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000fbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	  for(i=0;i<2;i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fc6:	e012      	b.n	8000fee <main+0x1d6>
	  {
		  w5[i]=moji[42+i];
 8000fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fcc:	332a      	adds	r3, #42	; 0x2a
 8000fce:	33e0      	adds	r3, #224	; 0xe0
 8000fd0:	443b      	add	r3, r7
 8000fd2:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8000fd6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fde:	4413      	add	r3, r2
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
	  for(i=0;i<2;i++)
 8000fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	dde8      	ble.n	8000fc8 <main+0x1b0>
	  }
	  r = atoff(w1);
 8000ff6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 f828 	bl	8006050 <atoff>
 8001000:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
	  arg = atoff(w2);
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	4618      	mov	r0, r3
 800100a:	f005 f821 	bl	8006050 <atoff>
 800100e:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
	  dash = atoi(w3);
 8001012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001016:	4618      	mov	r0, r3
 8001018:	f005 f81d 	bl	8006056 <atoi>
 800101c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	  above = atoi(w4);
 8001020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001024:	4618      	mov	r0, r3
 8001026:	f005 f816 	bl	8006056 <atoi>
 800102a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	  gather = atoi(w5);
 800102e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001032:	4618      	mov	r0, r3
 8001034:	f005 f80f 	bl	8006056 <atoi>
 8001038:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cnt = (long)(overflowcnt) * 0x10000 + (long)TIM3 -> CNT;
 800103c:	4b4b      	ldr	r3, [pc, #300]	; (800116c <main+0x354>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <main+0x35c>)
 8001044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001046:	4413      	add	r3, r2
 8001048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  snprintf(test,32,"%d,%2d,%6d\n\r",above,gather,cnt);
 800104c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001060:	4a45      	ldr	r2, [pc, #276]	; (8001178 <main+0x360>)
 8001062:	2120      	movs	r1, #32
 8001064:	f006 fc22 	bl	80078ac <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)test, 32,HAL_MAX_DELAY);
 8001068:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	2220      	movs	r2, #32
 8001072:	4842      	ldr	r0, [pc, #264]	; (800117c <main+0x364>)
 8001074:	f003 fe14 	bl	8004ca0 <HAL_UART_Transmit>
	  //snprintf(usr_buf,RX_BUFFER_SIZE,"Encoder: %d\n\r",count);
	  //HAL_UART_Transmit(&huart2, (uint8_t *)usr_buf, sizeof(usr_buf), 100);
	  //HAL_Delay(1000);

	  if(gather==1)//switch1-on
 8001078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10b      	bne.n	8001098 <main+0x280>
	  {
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2101      	movs	r1, #1
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 f892 	bl	80021b0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,300);
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <main+0x344>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
 8001096:	e014      	b.n	80010c2 <main+0x2aa>
	  }
	  else if(gather==-1)//switch2-on
 8001098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d10b      	bne.n	80010ba <main+0x2a2>
	  {
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 f881 	bl	80021b0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,300);
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <main+0x344>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
 80010b8:	e003      	b.n	80010c2 <main+0x2aa>
	  }
	  else//switch2-off
   	  {
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <main+0x344>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  if(above==1)//switch3-on
 80010c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10b      	bne.n	80010e2 <main+0x2ca>
	  {
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2108      	movs	r1, #8
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f001 f86d 	bl	80021b0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,300);
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <main+0x344>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
 80010e0:	e003      	b.n	80010ea <main+0x2d2>
	  }
	  else//switch3-off
	  {
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <main+0x344>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
	  }

	  //string-reset
	  if(strcmp(moji,check)==0)
 80010ea:	463a      	mov	r2, r7
 80010ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <main+0x2f2>
	  {
		  reset++;
 80010fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001102:	3301      	adds	r3, #1
 8001104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001108:	e008      	b.n	800111c <main+0x304>
	  }
	  else
	  {
		  reset=0;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  memset(check,'\0',RX_BUFFER_SIZE);
 8001110:	463b      	mov	r3, r7
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f006 fc3f 	bl	800799a <memset>
	  }
	  if(reset>=25)
 800111c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001120:	2b18      	cmp	r3, #24
 8001122:	dd0c      	ble.n	800113e <main+0x326>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f001 f83f 	bl	80021b0 <HAL_GPIO_WritePin>
		  memset(string,'\0',RX_BUFFER_SIZE);
 8001132:	2240      	movs	r2, #64	; 0x40
 8001134:	2100      	movs	r1, #0
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <main+0x358>)
 8001138:	f006 fc2f 	bl	800799a <memset>
 800113c:	e006      	b.n	800114c <main+0x334>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f001 f832 	bl	80021b0 <HAL_GPIO_WritePin>
	  }
	  strcpy(check,moji);
 800114c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001150:	463b      	mov	r3, r7
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fcb2 	bl	8007abe <strcpy>
	  memset(moji,'\0',RX_BUFFER_SIZE);
 800115a:	e698      	b.n	8000e8e <main+0x76>
 800115c:	200001f0 	.word	0x200001f0
 8001160:	20000398 	.word	0x20000398
 8001164:	20000288 	.word	0x20000288
 8001168:	2000023c 	.word	0x2000023c
 800116c:	2000041c 	.word	0x2000041c
 8001170:	200003dc 	.word	0x200003dc
 8001174:	40000400 	.word	0x40000400
 8001178:	0800a510 	.word	0x0800a510
 800117c:	20000310 	.word	0x20000310

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118a:	2228      	movs	r2, #40	; 0x28
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f006 fc03 	bl	800799a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011bc:	2310      	movs	r3, #16
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f809 	bl	80021e0 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d4:	f000 f9c8 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f832 	bl	800325c <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011fe:	f000 f9b3 	bl	8001568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001202:	f241 0301 	movw	r3, #4097	; 0x1001
 8001206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fa58 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800121e:	f000 f9a3 	bl	8001568 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3758      	adds	r7, #88	; 0x58
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	222c      	movs	r2, #44	; 0x2c
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f006 fb9e 	bl	800799a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <MX_TIM1_Init+0x130>)
 8001260:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <MX_TIM1_Init+0x134>)
 8001262:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001264:	4b3d      	ldr	r3, [pc, #244]	; (800135c <MX_TIM1_Init+0x130>)
 8001266:	2207      	movs	r2, #7
 8001268:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <MX_TIM1_Init+0x130>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <MX_TIM1_Init+0x130>)
 8001272:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001276:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <MX_TIM1_Init+0x130>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_TIM1_Init+0x130>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b35      	ldr	r3, [pc, #212]	; (800135c <MX_TIM1_Init+0x130>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800128a:	4834      	ldr	r0, [pc, #208]	; (800135c <MX_TIM1_Init+0x130>)
 800128c:	f002 fb9e 	bl	80039cc <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 f967 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012aa:	4619      	mov	r1, r3
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_TIM1_Init+0x130>)
 80012ae:	f003 fba5 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012b8:	f000 f956 	bl	8001568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	; (800135c <MX_TIM1_Init+0x130>)
 80012e2:	f002 ff0b 	bl	80040fc <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012ec:	f000 f93c 	bl	8001568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <MX_TIM1_Init+0x130>)
 80012fa:	f002 feff 	bl	80040fc <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001304:	f000 f930 	bl	8001568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800132a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM1_Init+0x130>)
 800133e:	f003 fbcb 	bl	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001348:	f000 f90e 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM1_Init+0x130>)
 800134e:	f000 f99f 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3758      	adds	r7, #88	; 0x58
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001f0 	.word	0x200001f0
 8001360:	40012c00 	.word	0x40012c00

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fb11 	bl	800799a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa4>)
 8001384:	4a21      	ldr	r2, [pc, #132]	; (800140c <MX_TIM3_Init+0xa8>)
 8001386:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_TIM3_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM3_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM3_Init+0xa4>)
 8001396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM3_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM3_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_TIM3_Init+0xa4>)
 80013d4:	f002 fc3e 	bl	8003c54 <HAL_TIM_Encoder_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013de:	f000 f8c3 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM3_Init+0xa4>)
 80013f0:	f003 fb04 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013fa:	f000 f8b5 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000023c 	.word	0x2000023c
 800140c:	40000400 	.word	0x40000400

08001410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <MX_USART1_UART_Init+0x5c>)
 8001418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_USART1_UART_Init+0x58>)
 800141c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_USART1_UART_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_USART1_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_USART1_UART_Init+0x58>)
 8001454:	f003 fbd6 	bl	8004c04 <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800145e:	f000 f883 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000288 	.word	0x20000288
 800146c:	40013800 	.word	0x40013800

08001470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <MX_USART2_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800147c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART2_UART_Init+0x58>)
 80014b4:	f003 fba6 	bl	8004c04 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f000 f853 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000310 	.word	0x20000310
 80014cc:	40004400 	.word	0x40004400

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_GPIO_Init+0x94>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <MX_GPIO_Init+0x94>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_GPIO_Init+0x94>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_GPIO_Init+0x94>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <MX_GPIO_Init+0x94>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_GPIO_Init+0x94>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_GPIO_Init+0x94>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_GPIO_Init+0x94>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_GPIO_Init+0x94>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f640 010b 	movw	r1, #2059	; 0x80b
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f000 fe3a 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA3 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_11;
 800153c:	f640 030b 	movw	r3, #2059	; 0x80b
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f000 fcb8 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_MspInit+0x44>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_MspInit+0x44>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_MspInit+0x44>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x44>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x44>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x44>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_TIM_PWM_MspInit+0x38>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10b      	bne.n	80015e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80015d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_TIM_Encoder_MspInit+0x8c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d130      	bne.n	8001680 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_TIM_Encoder_MspInit+0x90>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800164e:	2350      	movs	r3, #80	; 0x50
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165e:	2302      	movs	r3, #2
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f000 fc2e 	bl	8001ecc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	201d      	movs	r0, #29
 8001676:	f000 fb78 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800167a:	201d      	movs	r0, #29
 800167c:	f000 fb91 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40000400 	.word	0x40000400
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_TIM_MspPostInit+0x68>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11d      	bne.n	80016ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016dc:	2306      	movs	r3, #6
 80016de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f000 fbef 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <HAL_UART_MspInit+0x128>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d14e      	bne.n	80017c0 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a41      	ldr	r2, [pc, #260]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_UART_MspInit+0x12c>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_UART_MspInit+0x12c>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177c:	2307      	movs	r3, #7
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f000 fb9f 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179e:	2307      	movs	r3, #7
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4821      	ldr	r0, [pc, #132]	; (8001830 <HAL_UART_MspInit+0x130>)
 80017aa:	f000 fb8f 	bl	8001ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2025      	movs	r0, #37	; 0x25
 80017b4:	f000 fad9 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b8:	2025      	movs	r0, #37	; 0x25
 80017ba:	f000 faf2 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017be:	e02e      	b.n	800181e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_UART_MspInit+0x134>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d129      	bne.n	800181e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_UART_MspInit+0x12c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80017fa:	f248 0304 	movw	r3, #32772	; 0x8004
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180c:	2307      	movs	r3, #7
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f000 fb57 	bl	8001ecc <HAL_GPIO_Init>
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40013800 	.word	0x40013800
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400
 8001834:	40004400 	.word	0x40004400

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8001842:	f000 fabc 	bl	8001dbe <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x8>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f95e 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM3_IRQHandler+0x10>)
 8001896:	f002 fb11 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000023c 	.word	0x2000023c

080018a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART1_IRQHandler+0x10>)
 80018aa:	f003 fac7 	bl	8004e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000288 	.word	0x20000288

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_kill>:

int _kill(int pid, int sig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d2:	f006 f8c7 	bl	8007a64 <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2216      	movs	r2, #22
 80018da:	601a      	str	r2, [r3, #0]
	return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_exit>:

void _exit (int status)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018fa:	e7fe      	b.n	80018fa <_exit+0x12>

080018fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
	}

return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e009      	b.n	800195c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf1      	blt.n	8001948 <_write+0x12>
	}
	return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f006 f82c 	bl	8007a64 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20003000 	.word	0x20003000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	20000420 	.word	0x20000420
 8001a40:	20000578 	.word	0x20000578

08001a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a6c:	f7ff ffea 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	; (8001ab4 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f005 ffeb 	bl	8007a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9a:	f7ff f9bd 	bl	8000e18 <main>

08001a9e <LoopForever>:

LoopForever:
    b LoopForever
 8001a9e:	e7fe      	b.n	8001a9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aa0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001aac:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 8001ab0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ab4:	20000574 	.word	0x20000574

08001ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_2_IRQHandler>
	...

08001abc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x28>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x28>)
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f941 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fd4c 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f95d 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f921 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000424 	.word	0x20000424

08001b70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000424 	.word	0x20000424

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cf6:	4904      	ldr	r1, [pc, #16]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_SystemReset+0x28>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfe:	f3bf 8f4f 	dsb	sy
}
 8001d02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <__NVIC_SystemReset+0x20>
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	05fa0004 	.word	0x05fa0004

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff78 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff13 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff28 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff78 	bl	8001c7c <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff47 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff1b 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001dc2:	f7ff ff8f 	bl	8001ce4 <__NVIC_SystemReset>

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff9e 	bl	8001d10 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d008      	beq.n	8001e02 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2204      	movs	r2, #4
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e020      	b.n	8001e44 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 020e 	bic.w	r2, r2, #14
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d005      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e027      	b.n	8001ec2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 020e 	bic.w	r2, r2, #14
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
    } 
  }
  return status;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e14e      	b.n	800217a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8140 	beq.w	8002174 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_GPIO_Init+0x40>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d130      	bne.n	8001f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d017      	beq.n	8001faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 809a 	beq.w	8002174 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002058:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1e0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a46      	ldr	r2, [pc, #280]	; (80021a0 <HAL_GPIO_Init+0x2d4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_GPIO_Init+0x2d8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1d8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a44      	ldr	r2, [pc, #272]	; (80021a8 <HAL_GPIO_Init+0x2dc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1d4>
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020a0:	2305      	movs	r3, #5
 80020a2:	e004      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020ac:	2300      	movs	r3, #0
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020be:	4937      	ldr	r1, [pc, #220]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800216e:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f aea9 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	40010000 	.word	0x40010000
 80021a0:	48000400 	.word	0x48000400
 80021a4:	48000800 	.word	0x48000800
 80021a8:	48000c00 	.word	0x48000c00
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	f001 b823 	b.w	800324c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 817d 	beq.w	8002516 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800221c:	4bbc      	ldr	r3, [pc, #752]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	4bb9      	ldr	r3, [pc, #740]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d15c      	bne.n	80022ee <HAL_RCC_OscConfig+0x10e>
 8002234:	4bb6      	ldr	r3, [pc, #728]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d155      	bne.n	80022ee <HAL_RCC_OscConfig+0x10e>
 8002242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002246:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x94>
 800226e:	4ba8      	ldr	r3, [pc, #672]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002290:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800229c:	4b9c      	ldr	r3, [pc, #624]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 811f 	beq.w	8002514 <HAL_RCC_OscConfig+0x334>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8116 	bne.w	8002514 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f000 bfaf 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x12e>
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a82      	ldr	r2, [pc, #520]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e036      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x158>
 800231e:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7b      	ldr	r2, [pc, #492]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b79      	ldr	r3, [pc, #484]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a78      	ldr	r2, [pc, #480]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e021      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x184>
 800234a:	4b71      	ldr	r3, [pc, #452]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6e      	ldr	r3, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6d      	ldr	r2, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a66      	ldr	r2, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237c:	4b64      	ldr	r3, [pc, #400]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f023 020f 	bic.w	r2, r3, #15
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	495f      	ldr	r1, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002392:	4313      	orrs	r3, r2
 8002394:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d059      	beq.n	800245a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff fbe3 	bl	8001b70 <HAL_GetTick>
 80023aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff fbde 	bl	8001b70 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d902      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f000 bf43 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 80023c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x218>
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e015      	b.n	8002424 <HAL_RCC_OscConfig+0x244>
 80023f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002414:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002428:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800242c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002430:	fa92 f2a2 	rbit	r2, r2
 8002434:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002438:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ab      	beq.n	80023b0 <HAL_RCC_OscConfig+0x1d0>
 8002458:	e05d      	b.n	8002516 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff fb89 	bl	8001b70 <HAL_GetTick>
 800245e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff fb84 	bl	8001b70 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d902      	bls.n	800247a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	f000 bee9 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800248e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x2cc>
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e015      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ab      	bne.n	8002464 <HAL_RCC_OscConfig+0x284>
 800250c:	e003      	b.n	8002516 <HAL_RCC_OscConfig+0x336>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 817d 	beq.w	8002826 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800252c:	4ba6      	ldr	r3, [pc, #664]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002538:	4ba3      	ldr	r3, [pc, #652]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d172      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d16c      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002562:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_RCC_OscConfig+0x3a0>
 800257a:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002592:	2302      	movs	r3, #2
 8002594:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002598:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025b2:	fa92 f2a2 	rbit	r2, r2
 80025b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x410>
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 be2e 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	21f8      	movs	r1, #248	; 0xf8
 8002606:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800260e:	fa91 f1a1 	rbit	r1, r1
 8002612:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002616:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800261a:	fab1 f181 	clz	r1, r1
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	408b      	lsls	r3, r1
 8002622:	4969      	ldr	r1, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002628:	e0fd      	b.n	8002826 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8088 	beq.w	800274c <HAL_RCC_OscConfig+0x56c>
 800263c:	2301      	movs	r3, #1
 800263e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800264e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fa82 	bl	8001b70 <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff fa7d 	bl	8001b70 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f000 bde2 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800269a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4d8>
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e013      	b.n	80026e0 <HAL_RCC_OscConfig+0x500>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2202      	movs	r2, #2
 80026e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026ea:	fa92 f2a2 	rbit	r2, r2
 80026ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f042 0220 	orr.w	r2, r2, #32
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f002 021f 	and.w	r2, r2, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0af      	beq.n	8002672 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	21f8      	movs	r1, #248	; 0xf8
 8002728:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002730:	fa91 f1a1 	rbit	r1, r1
 8002734:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002738:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800273c:	fab1 f181 	clz	r1, r1
 8002740:	b2c9      	uxtb	r1, r1
 8002742:	408b      	lsls	r3, r1
 8002744:	4920      	ldr	r1, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
 800274a:	e06c      	b.n	8002826 <HAL_RCC_OscConfig+0x646>
 800274c:	2301      	movs	r3, #1
 800274e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800275e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800276c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff f9fa 	bl	8001b70 <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002782:	f7ff f9f5 	bl	8001b70 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	f000 bd5a 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d104      	bne.n	80027cc <HAL_RCC_OscConfig+0x5ec>
 80027c2:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e015      	b.n	80027f4 <HAL_RCC_OscConfig+0x614>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027f0:	4bc8      	ldr	r3, [pc, #800]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027fe:	fa92 f2a2 	rbit	r2, r2
 8002802:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002806:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ad      	bne.n	8002782 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8110 	beq.w	8002a5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d079      	beq.n	8002940 <HAL_RCC_OscConfig+0x760>
 800284c:	2301      	movs	r3, #1
 800284e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCC_OscConfig+0x938>)
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff f97b 	bl	8001b70 <HAL_GetTick>
 800287a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f976 	bl	8001b70 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d902      	bls.n	8002896 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f000 bcdb 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f0:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 80028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028fc:	2102      	movs	r1, #2
 80028fe:	6019      	str	r1, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f1a3 	rbit	r1, r3
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002916:	6019      	str	r1, [r3, #0]
  return result;
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0a0      	beq.n	8002880 <HAL_RCC_OscConfig+0x6a0>
 800293e:	e08d      	b.n	8002a5c <HAL_RCC_OscConfig+0x87c>
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002962:	601a      	str	r2, [r3, #0]
  return result;
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800296c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x938>)
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	461a      	mov	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7ff f8f5 	bl	8001b70 <HAL_GetTick>
 8002986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff f8f0 	bl	8001b70 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d902      	bls.n	80029a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	f000 bc55 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	6019      	str	r1, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f1a3 	rbit	r1, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a34:	6019      	str	r1, [r3, #0]
  return result;
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d197      	bne.n	800298c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 81a1 	beq.w	8002db4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002aaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aca:	f7ff f851 	bl	8001b70 <HAL_GetTick>
 8002ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	e009      	b.n	8002ae8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7ff f84c 	bl	8001b70 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e3b1      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_OscConfig+0x940>
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a02      	ldr	r2, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e03c      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	10908120 	.word	0x10908120
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x96a>
 8002b30:	4bc1      	ldr	r3, [pc, #772]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4ac0      	ldr	r2, [pc, #768]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	4bbe      	ldr	r3, [pc, #760]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4abd      	ldr	r2, [pc, #756]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e020      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x994>
 8002b5a:	4bb7      	ldr	r3, [pc, #732]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4ab6      	ldr	r2, [pc, #728]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	4bb4      	ldr	r3, [pc, #720]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4ab3      	ldr	r2, [pc, #716]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6213      	str	r3, [r2, #32]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b74:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4aaf      	ldr	r2, [pc, #700]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4bad      	ldr	r3, [pc, #692]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4aac      	ldr	r2, [pc, #688]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8081 	beq.w	8002ca0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe ffe7 	bl	8001b70 <HAL_GetTick>
 8002ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe ffe2 	bl	8001b70 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e345      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c06:	601a      	str	r2, [r3, #0]
  return result;
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0xa4c>
 8002c26:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0xa74>
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	6011      	str	r1, [r2, #0]
 8002c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	fa92 f1a2 	rbit	r1, r2
 8002c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c76:	6011      	str	r1, [r2, #0]
  return result;
 8002c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d084      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x9c8>
 8002c9e:	e07f      	b.n	8002da0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe ff66 	bl	8001b70 <HAL_GetTick>
 8002ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe ff61 	bl	8001b70 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2c4      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d08:	601a      	str	r2, [r3, #0]
  return result;
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0xb4e>
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	e013      	b.n	8002d56 <HAL_RCC_OscConfig+0xb76>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d5e:	2102      	movs	r1, #2
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fa92 f1a2 	rbit	r1, r2
 8002d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d78:	6011      	str	r1, [r2, #0]
  return result;
 8002d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d184      	bne.n	8002caa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002da0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8242 	beq.w	800324a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	f000 8213 	beq.w	80031fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 8162 	bne.w	80030aa <HAL_RCC_OscConfig+0xeca>
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fea0 	bl	8001b70 <HAL_GetTick>
 8002e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e00c      	b.n	8002e50 <HAL_RCC_OscConfig+0xc70>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fe98 	bl	8001b70 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1fd      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_OscConfig+0xcba>
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e027      	b.n	8002eea <HAL_RCC_OscConfig+0xd0a>
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	4b9c      	ldr	r3, [pc, #624]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ef2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ef6:	6011      	str	r1, [r2, #0]
 8002ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	fa92 f1a2 	rbit	r1, r2
 8002f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f0e:	6011      	str	r1, [r2, #0]
  return result;
 8002f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0220 	orr.w	r2, r2, #32
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d182      	bne.n	8002e3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f36:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	497f      	ldr	r1, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fde4 	bl	8001b70 <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe fddf 	bl	8001b70 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e144      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0xe2c>
 8003006:	4b54      	ldr	r3, [pc, #336]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e027      	b.n	800305c <HAL_RCC_OscConfig+0xe7c>
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800303a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003060:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003068:	6011      	str	r1, [r2, #0]
 800306a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	fa92 f1a2 	rbit	r1, r2
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003080:	6011      	str	r1, [r2, #0]
  return result;
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fab2 f282 	clz	r2, r2
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f042 0220 	orr.w	r2, r2, #32
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f002 021f 	and.w	r2, r2, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d082      	beq.n	8002fae <HAL_RCC_OscConfig+0xdce>
 80030a8:	e0cf      	b.n	800324a <HAL_RCC_OscConfig+0x106a>
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030ce:	601a      	str	r2, [r3, #0]
  return result;
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fd3e 	bl	8001b70 <HAL_GetTick>
 80030f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	e009      	b.n	800310e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fd39 	bl	8001b70 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09e      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003132:	601a      	str	r2, [r3, #0]
  return result;
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800313c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d104      	bne.n	800315c <HAL_RCC_OscConfig+0xf7c>
 8003152:	4b01      	ldr	r3, [pc, #4]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e029      	b.n	80031ac <HAL_RCC_OscConfig+0xfcc>
 8003158:	40021000 	.word	0x40021000
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x1078>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fa92 f1a2 	rbit	r1, r2
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031d0:	6011      	str	r1, [r2, #0]
  return result;
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d180      	bne.n	80030fa <HAL_RCC_OscConfig+0xf1a>
 80031f8:	e027      	b.n	800324a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e01e      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_OscConfig+0x1078>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003216:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800321a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	429a      	cmp	r2, r3
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800322e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b09e      	sub	sp, #120	; 0x78
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e162      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b90      	ldr	r3, [pc, #576]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	498b      	ldr	r1, [pc, #556]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e14a      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b82      	ldr	r3, [pc, #520]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	497f      	ldr	r1, [pc, #508]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80dc 	beq.w	8003488 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d13c      	bne.n	8003352 <HAL_RCC_ClockConfig+0xf6>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_ClockConfig+0xa6>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e00f      	b.n	8003322 <HAL_RCC_ClockConfig+0xc6>
 8003302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	667b      	str	r3, [r7, #100]	; 0x64
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003326:	65ba      	str	r2, [r7, #88]	; 0x58
 8003328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d17b      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0f3      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d13c      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_ClockConfig+0x128>
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_ClockConfig+0x148>
 8003384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
 8003392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
 8003398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80033aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ac:	fa92 f2a2 	rbit	r2, r2
 80033b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d13a      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b2      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	e00d      	b.n	8003418 <HAL_RCC_ClockConfig+0x1bc>
 80033fc:	2302      	movs	r3, #2
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	2302      	movs	r3, #2
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2202      	movs	r2, #2
 800341a:	61ba      	str	r2, [r7, #24]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	617a      	str	r2, [r7, #20]
  return result;
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e079      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	491a      	ldr	r1, [pc, #104]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fe fb8a 	bl	8001b70 <HAL_GetTick>
 800345c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe fb86 	bl	8001b70 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e061      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d214      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e040      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	491a      	ldr	r1, [pc, #104]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4912      	ldr	r1, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034fe:	f000 f829 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003502:	4601      	mov	r1, r0
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	60fa      	str	r2, [r7, #12]
  return result;
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	40d3      	lsrs	r3, r2
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x2ec>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	fa21 f303 	lsr.w	r3, r1, r3
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_RCC_ClockConfig+0x2f0>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCC_ClockConfig+0x2f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fad8 	bl	8001ae8 <HAL_InitTick>
  
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3778      	adds	r7, #120	; 0x78
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	0800a520 	.word	0x0800a520
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x36>
 8003582:	e03c      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003586:	623b      	str	r3, [r7, #32]
      break;
 8003588:	e03c      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003590:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003594:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	fa92 f2a2 	rbit	r2, r2
 800359c:	607a      	str	r2, [r7, #4]
  return result;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	40d3      	lsrs	r3, r2
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	220f      	movs	r2, #15
 80035b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	60fa      	str	r2, [r7, #12]
  return result;
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	40d3      	lsrs	r3, r2
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
 80035ec:	e004      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e002      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003600:	623b      	str	r3, [r7, #32]
      break;
 8003602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003604:	6a3b      	ldr	r3, [r7, #32]
}
 8003606:	4618      	mov	r0, r3
 8003608:	372c      	adds	r7, #44	; 0x2c
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	0800a538 	.word	0x0800a538
 8003620:	0800a548 	.word	0x0800a548
 8003624:	003d0900 	.word	0x003d0900

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003646:	f7ff ffef 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003654:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003658:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	603a      	str	r2, [r7, #0]
  return result;
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	40d3      	lsrs	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x40>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	0800a530 	.word	0x0800a530

08003684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800368a:	f7ff ffcd 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800369c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	603a      	str	r2, [r7, #0]
  return result;
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	40d3      	lsrs	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	0800a530 	.word	0x0800a530

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b092      	sub	sp, #72	; 0x48
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80cd 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ec:	4b86      	ldr	r3, [pc, #536]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10e      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b83      	ldr	r3, [pc, #524]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4a82      	ldr	r2, [pc, #520]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	61d3      	str	r3, [r2, #28]
 8003704:	4b80      	ldr	r3, [pc, #512]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b7d      	ldr	r3, [pc, #500]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b7a      	ldr	r3, [pc, #488]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a79      	ldr	r2, [pc, #484]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe fa1f 	bl	8001b70 <HAL_GetTick>
 8003732:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe fa1b 	bl	8001b70 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0db      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b70      	ldr	r3, [pc, #448]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003754:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d07d      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800376e:	429a      	cmp	r2, r3
 8003770:	d076      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003772:	4b65      	ldr	r3, [pc, #404]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	4b5e      	ldr	r3, [pc, #376]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	2301      	movs	r3, #1
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c4:	4a50      	ldr	r2, [pc, #320]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d045      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe f9cc 	bl	8001b70 <HAL_GetTick>
 80037d8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fe f9c8 	bl	8001b70 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e086      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80037f2:	2302      	movs	r3, #2
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	2302      	movs	r3, #2
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	61fb      	str	r3, [r7, #28]
  return result;
 800380a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d102      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	e007      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003826:	2302      	movs	r3, #2
 8003828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	4b35      	ldr	r3, [pc, #212]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2202      	movs	r2, #2
 8003838:	613a      	str	r2, [r7, #16]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	fa92 f2a2 	rbit	r2, r2
 8003840:	60fa      	str	r2, [r7, #12]
  return result;
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	fab2 f282 	clz	r2, r2
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	f002 021f 	and.w	r2, r2, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f202 	lsl.w	r2, r1, r2
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0bd      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4926      	ldr	r1, [pc, #152]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800386e:	4313      	orrs	r3, r2
 8003870:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	491a      	ldr	r1, [pc, #104]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f023 0210 	bic.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4912      	ldr	r1, [pc, #72]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	490b      	ldr	r1, [pc, #44]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3748      	adds	r7, #72	; 0x48
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
 8003910:	10908100 	.word	0x10908100

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e040      	b.n	80039ae <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_TIM_Base_Start_IT+0xa8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d009      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_TIM_Base_Start_IT+0xac>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d115      	bne.n	8003998 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d015      	beq.n	80039aa <HAL_TIM_Base_Start_IT+0x96>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d011      	beq.n	80039aa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e008      	b.n	80039aa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e000      	b.n	80039ac <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	00010007 	.word	0x00010007

080039cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e049      	b.n	8003a72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fde2 	bl	80015bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fcb2 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_TIM_PWM_Start+0x24>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e03c      	b.n	8003b1a <HAL_TIM_PWM_Start+0x9e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d109      	bne.n	8003aba <HAL_TIM_PWM_Start+0x3e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e02f      	b.n	8003b1a <HAL_TIM_PWM_Start+0x9e>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d109      	bne.n	8003ad4 <HAL_TIM_PWM_Start+0x58>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e022      	b.n	8003b1a <HAL_TIM_PWM_Start+0x9e>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d109      	bne.n	8003aee <HAL_TIM_PWM_Start+0x72>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e015      	b.n	8003b1a <HAL_TIM_PWM_Start+0x9e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x8c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e008      	b.n	8003b1a <HAL_TIM_PWM_Start+0x9e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e088      	b.n	8003c34 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xb6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	e023      	b.n	8003b7a <HAL_TIM_PWM_Start+0xfe>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xc6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	e01b      	b.n	8003b7a <HAL_TIM_PWM_Start+0xfe>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0xd6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b50:	e013      	b.n	8003b7a <HAL_TIM_PWM_Start+0xfe>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xe6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b60:	e00b      	b.n	8003b7a <HAL_TIM_PWM_Start+0xfe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xf6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	e003      	b.n	8003b7a <HAL_TIM_PWM_Start+0xfe>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 ff14 	bl	80049b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	; (8003c3c <HAL_TIM_PWM_Start+0x1c0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_TIM_PWM_Start+0x134>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <HAL_TIM_PWM_Start+0x1c4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIM_PWM_Start+0x134>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <HAL_TIM_PWM_Start+0x1c8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_PWM_Start+0x134>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <HAL_TIM_PWM_Start+0x1cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_PWM_Start+0x138>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x13a>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <HAL_TIM_PWM_Start+0x1c0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x176>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x176>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <HAL_TIM_PWM_Start+0x1d0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x176>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_TIM_PWM_Start+0x1c4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d115      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_TIM_PWM_Start+0x1d4>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d015      	beq.n	8003c30 <HAL_TIM_PWM_Start+0x1b4>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	d011      	beq.n	8003c30 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	e008      	b.n	8003c30 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e000      	b.n	8003c32 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40014000 	.word	0x40014000
 8003c44:	40014400 	.word	0x40014400
 8003c48:	40014800 	.word	0x40014800
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	00010007 	.word	0x00010007

08003c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e097      	b.n	8003d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fd fcbd 	bl	80015fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003c98:	f023 0307 	bic.w	r3, r3, #7
 8003c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f000 fb63 	bl	8004374 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cf4:	f023 030c 	bic.w	r3, r3, #12
 8003cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	4313      	orrs	r3, r2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	011a      	lsls	r2, r3, #4
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	4313      	orrs	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	4313      	orrs	r3, r2
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d110      	bne.n	8003df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dd6:	7b7b      	ldrb	r3, [r7, #13]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e069      	b.n	8003eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df0:	e031      	b.n	8003e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d110      	bne.n	8003e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df8:	7bbb      	ldrb	r3, [r7, #14]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dfe:	7b3b      	ldrb	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e055      	b.n	8003eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	e01d      	b.n	8003e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d108      	bne.n	8003e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e20:	7bbb      	ldrb	r3, [r7, #14]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e26:	7b7b      	ldrb	r3, [r7, #13]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e2c:	7b3b      	ldrb	r3, [r7, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03e      	b.n	8003eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIM_Encoder_Start+0xc4>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d008      	beq.n	8003e74 <HAL_TIM_Encoder_Start+0xd4>
 8003e62:	e00f      	b.n	8003e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fd9f 	bl	80049b0 <TIM_CCxChannelCmd>
      break;
 8003e72:	e016      	b.n	8003ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fd97 	bl	80049b0 <TIM_CCxChannelCmd>
      break;
 8003e82:	e00e      	b.n	8003ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fd8f 	bl	80049b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fd88 	bl	80049b0 <TIM_CCxChannelCmd>
      break;
 8003ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0202 	mvn.w	r2, #2
 8003ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa1a 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa0c 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fa1d 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d122      	bne.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d11b      	bne.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9f0 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9e2 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9f3 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0208 	mvn.w	r2, #8
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9c6 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9b8 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9c9 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f99c 	bl	8004338 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f98e 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f99f 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0201 	mvn.w	r2, #1
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fec0 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	d10e      	bne.n	800406c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d107      	bne.n	800406c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fdb8 	bl	8004bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d10e      	bne.n	800409a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d107      	bne.n	800409a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fdab 	bl	8004bf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d10e      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f94d 	bl	8004360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d10e      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d107      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f06f 0220 	mvn.w	r2, #32
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fd6b 	bl	8004bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004116:	2302      	movs	r3, #2
 8004118:	e0ff      	b.n	800431a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b14      	cmp	r3, #20
 8004126:	f200 80f0 	bhi.w	800430a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004185 	.word	0x08004185
 8004134:	0800430b 	.word	0x0800430b
 8004138:	0800430b 	.word	0x0800430b
 800413c:	0800430b 	.word	0x0800430b
 8004140:	080041c5 	.word	0x080041c5
 8004144:	0800430b 	.word	0x0800430b
 8004148:	0800430b 	.word	0x0800430b
 800414c:	0800430b 	.word	0x0800430b
 8004150:	08004207 	.word	0x08004207
 8004154:	0800430b 	.word	0x0800430b
 8004158:	0800430b 	.word	0x0800430b
 800415c:	0800430b 	.word	0x0800430b
 8004160:	08004247 	.word	0x08004247
 8004164:	0800430b 	.word	0x0800430b
 8004168:	0800430b 	.word	0x0800430b
 800416c:	0800430b 	.word	0x0800430b
 8004170:	08004289 	.word	0x08004289
 8004174:	0800430b 	.word	0x0800430b
 8004178:	0800430b 	.word	0x0800430b
 800417c:	0800430b 	.word	0x0800430b
 8004180:	080042c9 	.word	0x080042c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f96a 	bl	8004464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	619a      	str	r2, [r3, #24]
      break;
 80041c2:	e0a5      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9d0 	bl	8004570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6999      	ldr	r1, [r3, #24]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	619a      	str	r2, [r3, #24]
      break;
 8004204:	e084      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa2f 	bl	8004670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0208 	orr.w	r2, r2, #8
 8004220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0204 	bic.w	r2, r2, #4
 8004230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	61da      	str	r2, [r3, #28]
      break;
 8004244:	e064      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fa8d 	bl	800476c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69d9      	ldr	r1, [r3, #28]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	021a      	lsls	r2, r3, #8
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
      break;
 8004286:	e043      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fad0 	bl	8004834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042c6:	e023      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fb0e 	bl	80048f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004308:	e002      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a32      	ldr	r2, [pc, #200]	; (8004450 <TIM_Base_SetConfig+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0x28>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x28>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a2f      	ldr	r2, [pc, #188]	; (8004454 <TIM_Base_SetConfig+0xe0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a27      	ldr	r2, [pc, #156]	; (8004450 <TIM_Base_SetConfig+0xdc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0x6a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0x6a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a24      	ldr	r2, [pc, #144]	; (8004454 <TIM_Base_SetConfig+0xe0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x6a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x6a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_Base_SetConfig+0xe8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x6a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a21      	ldr	r2, [pc, #132]	; (8004460 <TIM_Base_SetConfig+0xec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <TIM_Base_SetConfig+0xdc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00b      	beq.n	8004434 <TIM_Base_SetConfig+0xc0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d007      	beq.n	8004434 <TIM_Base_SetConfig+0xc0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0d      	ldr	r2, [pc, #52]	; (800445c <TIM_Base_SetConfig+0xe8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0xc0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <TIM_Base_SetConfig+0xec>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a28      	ldr	r2, [pc, #160]	; (8004560 <TIM_OC1_SetConfig+0xfc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00b      	beq.n	80044dc <TIM_OC1_SetConfig+0x78>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a27      	ldr	r2, [pc, #156]	; (8004564 <TIM_OC1_SetConfig+0x100>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_OC1_SetConfig+0x78>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a26      	ldr	r2, [pc, #152]	; (8004568 <TIM_OC1_SetConfig+0x104>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC1_SetConfig+0x78>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <TIM_OC1_SetConfig+0x108>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0308 	bic.w	r3, r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <TIM_OC1_SetConfig+0xfc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00b      	beq.n	8004516 <TIM_OC1_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <TIM_OC1_SetConfig+0x100>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_OC1_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a17      	ldr	r2, [pc, #92]	; (8004568 <TIM_OC1_SetConfig+0x104>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC1_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <TIM_OC1_SetConfig+0x108>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d111      	bne.n	800453a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800

08004570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0210 	bic.w	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0320 	bic.w	r3, r3, #32
 80045be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <TIM_OC2_SetConfig+0xf0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10d      	bne.n	80045f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <TIM_OC2_SetConfig+0xf0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_OC2_SetConfig+0xa0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <TIM_OC2_SetConfig+0xf4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_OC2_SetConfig+0xa0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a19      	ldr	r2, [pc, #100]	; (8004668 <TIM_OC2_SetConfig+0xf8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC2_SetConfig+0xa0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <TIM_OC2_SetConfig+0xfc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d113      	bne.n	8004638 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004616:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800

08004670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a23      	ldr	r2, [pc, #140]	; (800475c <TIM_OC3_SetConfig+0xec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10d      	bne.n	80046ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1a      	ldr	r2, [pc, #104]	; (800475c <TIM_OC3_SetConfig+0xec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_OC3_SetConfig+0x9e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <TIM_OC3_SetConfig+0xf0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_OC3_SetConfig+0x9e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a18      	ldr	r2, [pc, #96]	; (8004764 <TIM_OC3_SetConfig+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC3_SetConfig+0x9e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a17      	ldr	r2, [pc, #92]	; (8004768 <TIM_OC3_SetConfig+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d113      	bne.n	8004736 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40014000 	.word	0x40014000
 8004764:	40014400 	.word	0x40014400
 8004768:	40014800 	.word	0x40014800

0800476c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <TIM_OC4_SetConfig+0xb8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <TIM_OC4_SetConfig+0x7c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <TIM_OC4_SetConfig+0xbc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_OC4_SetConfig+0x7c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a14      	ldr	r2, [pc, #80]	; (800482c <TIM_OC4_SetConfig+0xc0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC4_SetConfig+0x7c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <TIM_OC4_SetConfig+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d109      	bne.n	80047fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <TIM_OC5_SetConfig+0xac>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00b      	beq.n	80048a6 <TIM_OC5_SetConfig+0x72>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <TIM_OC5_SetConfig+0xb0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <TIM_OC5_SetConfig+0x72>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <TIM_OC5_SetConfig+0xb4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <TIM_OC5_SetConfig+0x72>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a12      	ldr	r2, [pc, #72]	; (80048ec <TIM_OC5_SetConfig+0xb8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d109      	bne.n	80048ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	051b      	lsls	r3, r3, #20
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <TIM_OC6_SetConfig+0xb0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_OC6_SetConfig+0x74>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <TIM_OC6_SetConfig+0xb4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_OC6_SetConfig+0x74>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <TIM_OC6_SetConfig+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC6_SetConfig+0x74>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a13      	ldr	r2, [pc, #76]	; (80049ac <TIM_OC6_SetConfig+0xbc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d109      	bne.n	8004978 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2201      	movs	r2, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e054      	b.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d009      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10c      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40014000 	.word	0x40014000

08004ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e060      	b.n	8004bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d115      	bne.n	8004ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	051b      	lsls	r3, r3, #20
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00

08004bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e040      	b.n	8004c98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fd6a 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fc00 	bl	8005448 <UART_SetConfig>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e022      	b.n	8004c98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fd2a 	bl	80056b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fdb1 	bl	80057f8 <UART_CheckIdleState>
 8004c96:	4603      	mov	r3, r0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d178      	bne.n	8004daa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Transmit+0x24>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e071      	b.n	8004dac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	; 0x21
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc ff4b 	bl	8001b70 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d108      	bne.n	8004d08 <HAL_UART_Transmit+0x68>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d10:	e030      	b.n	8004d74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fe13 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e03c      	b.n	8004dac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d44:	b292      	uxth	r2, r2
 8004d46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	e008      	b.n	8004d62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1c8      	bne.n	8004d12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fddc 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e005      	b.n	8004dac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d132      	bne.n	8004e32 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Receive_IT+0x24>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e02b      	b.n	8004e34 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d018      	beq.n	8004e22 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	69f9      	ldr	r1, [r7, #28]
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e6      	bne.n	8004df0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fdf5 	bl	8005a18 <UART_Start_Receive_IT>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	e000      	b.n	8004e34 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3728      	adds	r7, #40	; 0x28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b0ba      	sub	sp, #232	; 0xe8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d115      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00f      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 82ab 	beq.w	80053f0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
      }
      return;
 8004ea2:	e2a5      	b.n	80053f0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8117 	beq.w	80050dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ebe:	4b85      	ldr	r3, [pc, #532]	; (80050d4 <HAL_UART_IRQHandler+0x298>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 810a 	beq.w	80050dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <HAL_UART_IRQHandler+0xbc>
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d011      	beq.n	8004f28 <HAL_UART_IRQHandler+0xec>
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2202      	movs	r2, #2
 8004f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d011      	beq.n	8004f58 <HAL_UART_IRQHandler+0x11c>
 8004f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2204      	movs	r2, #4
 8004f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	f043 0202 	orr.w	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d017      	beq.n	8004f94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2208      	movs	r2, #8
 8004f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d012      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x18a>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00c      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8211 	beq.w	80053f4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d005      	beq.n	800501e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005016:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800501a:	2b00      	cmp	r3, #0
 800501c:	d04f      	beq.n	80050be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fdc0 	bl	8005ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d141      	bne.n	80050b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3308      	adds	r3, #8
 8005038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800504c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800505e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800506a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1d9      	bne.n	8005032 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	2b00      	cmp	r3, #0
 8005084:	d013      	beq.n	80050ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508a:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <HAL_UART_IRQHandler+0x29c>)
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	4618      	mov	r0, r3
 8005094:	f7fc fedc 	bl	8001e50 <HAL_DMA_Abort_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050a8:	4610      	mov	r0, r2
 80050aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	e00f      	b.n	80050ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9b4 	bl	800541c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	e00b      	b.n	80050ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9b0 	bl	800541c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	e007      	b.n	80050ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9ac 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80050cc:	e192      	b.n	80053f4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	bf00      	nop
    return;
 80050d0:	e190      	b.n	80053f4 <HAL_UART_IRQHandler+0x5b8>
 80050d2:	bf00      	nop
 80050d4:	04000120 	.word	0x04000120
 80050d8:	08005c6d 	.word	0x08005c6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 814b 	bne.w	800537c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8144 	beq.w	800537c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 813d 	beq.w	800537c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2210      	movs	r2, #16
 8005108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	f040 80b5 	bne.w	8005284 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005126:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8164 	beq.w	80053f8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800513a:	429a      	cmp	r2, r3
 800513c:	f080 815c 	bcs.w	80053f8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b20      	cmp	r3, #32
 8005152:	f000 8086 	beq.w	8005262 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800516a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800516e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005184:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800518c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1da      	bne.n	8005156 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3308      	adds	r3, #8
 80051c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e1      	bne.n	80051a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005200:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800520e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e3      	bne.n	80051dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005244:	65bb      	str	r3, [r7, #88]	; 0x58
 8005246:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800524a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e4      	bne.n	8005222 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525c:	4618      	mov	r0, r3
 800525e:	f7fc fdbe 	bl	8001dde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005274:	b29b      	uxth	r3, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	b29b      	uxth	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8d7 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005282:	e0b9      	b.n	80053f8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005290:	b29b      	uxth	r3, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80ab 	beq.w	80053fc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80052a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80a6 	beq.w	80053fc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052d2:	647b      	str	r3, [r7, #68]	; 0x44
 80052d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e4      	bne.n	80052b0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	623b      	str	r3, [r7, #32]
   return(result);
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800530a:	633a      	str	r2, [r7, #48]	; 0x30
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0310 	bic.w	r3, r3, #16
 8005346:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	617b      	str	r3, [r7, #20]
   return(result);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800536e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f85b 	bl	8005430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800537a:	e03f      	b.n	80053fc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <HAL_UART_IRQHandler+0x56a>
 8005388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800539c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fe4c 	bl	800603c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053a4:	e02d      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01c      	beq.n	8005400 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
    }
    return;
 80053ce:	e017      	b.n	8005400 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d012      	beq.n	8005402 <HAL_UART_IRQHandler+0x5c6>
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fc55 	bl	8005c98 <UART_EndTransmit_IT>
    return;
 80053ee:	e008      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
      return;
 80053f0:	bf00      	nop
 80053f2:	e006      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
    return;
 80053f4:	bf00      	nop
 80053f6:	e004      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
      return;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
      return;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005400:	bf00      	nop
  }

}
 8005402:	37e8      	adds	r7, #232	; 0xe8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b8a      	ldr	r3, [pc, #552]	; (800569c <UART_SetConfig+0x254>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	430b      	orrs	r3, r1
 800547e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a78      	ldr	r2, [pc, #480]	; (80056a0 <UART_SetConfig+0x258>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d120      	bne.n	8005506 <UART_SetConfig+0xbe>
 80054c4:	4b77      	ldr	r3, [pc, #476]	; (80056a4 <UART_SetConfig+0x25c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d817      	bhi.n	8005500 <UART_SetConfig+0xb8>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x90>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054fb 	.word	0x080054fb
 80054e4:	080054ef 	.word	0x080054ef
 80054e8:	2300      	movs	r3, #0
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e01d      	b.n	800552a <UART_SetConfig+0xe2>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e01a      	b.n	800552a <UART_SetConfig+0xe2>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e017      	b.n	800552a <UART_SetConfig+0xe2>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e014      	b.n	800552a <UART_SetConfig+0xe2>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e011      	b.n	800552a <UART_SetConfig+0xe2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a67      	ldr	r2, [pc, #412]	; (80056a8 <UART_SetConfig+0x260>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d102      	bne.n	8005516 <UART_SetConfig+0xce>
 8005510:	2300      	movs	r3, #0
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e009      	b.n	800552a <UART_SetConfig+0xe2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	; (80056ac <UART_SetConfig+0x264>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d102      	bne.n	8005526 <UART_SetConfig+0xde>
 8005520:	2300      	movs	r3, #0
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e001      	b.n	800552a <UART_SetConfig+0xe2>
 8005526:	2310      	movs	r3, #16
 8005528:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005532:	d15a      	bne.n	80055ea <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	2b08      	cmp	r3, #8
 8005538:	d827      	bhi.n	800558a <UART_SetConfig+0x142>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0xf8>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005565 	.word	0x08005565
 8005544:	0800556d 	.word	0x0800556d
 8005548:	08005575 	.word	0x08005575
 800554c:	0800558b 	.word	0x0800558b
 8005550:	0800557b 	.word	0x0800557b
 8005554:	0800558b 	.word	0x0800558b
 8005558:	0800558b 	.word	0x0800558b
 800555c:	0800558b 	.word	0x0800558b
 8005560:	08005583 	.word	0x08005583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7fe f86c 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005568:	61b8      	str	r0, [r7, #24]
        break;
 800556a:	e013      	b.n	8005594 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800556c:	f7fe f88a 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8005570:	61b8      	str	r0, [r7, #24]
        break;
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005574:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <UART_SetConfig+0x268>)
 8005576:	61bb      	str	r3, [r7, #24]
        break;
 8005578:	e00c      	b.n	8005594 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557a:	f7fd ffeb 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800557e:	61b8      	str	r0, [r7, #24]
        break;
 8005580:	e008      	b.n	8005594 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005586:	61bb      	str	r3, [r7, #24]
        break;
 8005588:	e004      	b.n	8005594 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	77bb      	strb	r3, [r7, #30]
        break;
 8005592:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d074      	beq.n	8005684 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	005a      	lsls	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	441a      	add	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d916      	bls.n	80055e4 <UART_SetConfig+0x19c>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d212      	bcs.n	80055e4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f023 030f 	bic.w	r3, r3, #15
 80055c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	89fb      	ldrh	r3, [r7, #14]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	89fa      	ldrh	r2, [r7, #14]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	e04f      	b.n	8005684 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	77bb      	strb	r3, [r7, #30]
 80055e8:	e04c      	b.n	8005684 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ea:	7ffb      	ldrb	r3, [r7, #31]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d828      	bhi.n	8005642 <UART_SetConfig+0x1fa>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <UART_SetConfig+0x1b0>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	08005643 	.word	0x08005643
 8005608:	08005633 	.word	0x08005633
 800560c:	08005643 	.word	0x08005643
 8005610:	08005643 	.word	0x08005643
 8005614:	08005643 	.word	0x08005643
 8005618:	0800563b 	.word	0x0800563b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561c:	f7fe f810 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005620:	61b8      	str	r0, [r7, #24]
        break;
 8005622:	e013      	b.n	800564c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005624:	f7fe f82e 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8005628:	61b8      	str	r0, [r7, #24]
        break;
 800562a:	e00f      	b.n	800564c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <UART_SetConfig+0x268>)
 800562e:	61bb      	str	r3, [r7, #24]
        break;
 8005630:	e00c      	b.n	800564c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7fd ff8f 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005636:	61b8      	str	r0, [r7, #24]
        break;
 8005638:	e008      	b.n	800564c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563e:	61bb      	str	r3, [r7, #24]
        break;
 8005640:	e004      	b.n	800564c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77bb      	strb	r3, [r7, #30]
        break;
 800564a:	bf00      	nop
    }

    if (pclk != 0U)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085a      	lsrs	r2, r3, #1
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	441a      	add	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b0f      	cmp	r3, #15
 800566a:	d909      	bls.n	8005680 <UART_SetConfig+0x238>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005672:	d205      	bcs.n	8005680 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	e001      	b.n	8005684 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005690:	7fbb      	ldrb	r3, [r7, #30]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	efff69f3 	.word	0xefff69f3
 80056a0:	40013800 	.word	0x40013800
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40004400 	.word	0x40004400
 80056ac:	40004800 	.word	0x40004800
 80056b0:	007a1200 	.word	0x007a1200

080056b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01a      	beq.n	80057ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b2:	d10a      	bne.n	80057ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b098      	sub	sp, #96	; 0x60
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005808:	f7fc f9b2 	bl	8001b70 <HAL_GetTick>
 800580c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d12e      	bne.n	800587a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f88c 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d021      	beq.n	800587a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584a:	653b      	str	r3, [r7, #80]	; 0x50
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800585a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e062      	b.n	8005940 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d149      	bne.n	800591c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f856 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03c      	beq.n	800591c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	623b      	str	r3, [r7, #32]
   return(result);
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
 80058c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	617b      	str	r3, [r7, #20]
   return(result);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e011      	b.n	8005940 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3758      	adds	r7, #88	; 0x58
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e049      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d045      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fc f905 	bl	8001b70 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e048      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d031      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d110      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2208      	movs	r2, #8
 800599e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f8ff 	bl	8005ba4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2208      	movs	r2, #8
 80059aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e029      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c8:	d111      	bne.n	80059ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f8e5 	bl	8005ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e00f      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d0a6      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b097      	sub	sp, #92	; 0x5c
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d10e      	bne.n	8005a6a <UART_Start_Receive_IT+0x52>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <UART_Start_Receive_IT+0x48>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a5e:	e02d      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a68:	e028      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <UART_Start_Receive_IT+0x76>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <UART_Start_Receive_IT+0x6c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a82:	e01b      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	227f      	movs	r2, #127	; 0x7f
 8005a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a8c:	e016      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a96:	d10d      	bne.n	8005ab4 <UART_Start_Receive_IT+0x9c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <UART_Start_Receive_IT+0x92>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	227f      	movs	r2, #127	; 0x7f
 8005aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa8:	e008      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	223f      	movs	r2, #63	; 0x3f
 8005aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab2:	e003      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2222      	movs	r2, #34	; 0x22
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aec:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b08:	d107      	bne.n	8005b1a <UART_Start_Receive_IT+0x102>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a21      	ldr	r2, [pc, #132]	; (8005b9c <UART_Start_Receive_IT+0x184>)
 8005b16:	669a      	str	r2, [r3, #104]	; 0x68
 8005b18:	e002      	b.n	8005b20 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a20      	ldr	r2, [pc, #128]	; (8005ba0 <UART_Start_Receive_IT+0x188>)
 8005b1e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d019      	beq.n	8005b5c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
 8005b48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e6      	bne.n	8005b28 <UART_Start_Receive_IT+0x110>
 8005b5a:	e018      	b.n	8005b8e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f043 0320 	orr.w	r3, r3, #32
 8005b70:	653b      	str	r3, [r7, #80]	; 0x50
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7a:	623b      	str	r3, [r7, #32]
 8005b7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	69f9      	ldr	r1, [r7, #28]
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e6      	bne.n	8005b5c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	375c      	adds	r7, #92	; 0x5c
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	08005e95 	.word	0x08005e95
 8005ba0:	08005ced 	.word	0x08005ced

08005ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b095      	sub	sp, #84	; 0x54
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	643b      	str	r3, [r7, #64]	; 0x40
 8005bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d118      	bne.n	8005c4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6979      	ldr	r1, [r7, #20]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	613b      	str	r3, [r7, #16]
   return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c60:	bf00      	nop
 8005c62:	3754      	adds	r7, #84	; 0x54
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fbc6 	bl	800541c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	613b      	str	r3, [r7, #16]
   return(result);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e6      	bne.n	8005ca0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fb92 	bl	8005408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce4:	bf00      	nop
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b09c      	sub	sp, #112	; 0x70
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cfa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	2b22      	cmp	r3, #34	; 0x22
 8005d06:	f040 80b9 	bne.w	8005e7c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d18:	b2d9      	uxtb	r1, r3
 8005d1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	400a      	ands	r2, r1
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 809c 	bne.w	8005e8c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e6      	bne.n	8005d54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005da6:	647a      	str	r2, [r7, #68]	; 0x44
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d018      	beq.n	8005e0e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005df0:	663b      	str	r3, [r7, #96]	; 0x60
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d12e      	bne.n	8005e74 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0310 	bic.w	r3, r3, #16
 8005e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	69b9      	ldr	r1, [r7, #24]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	617b      	str	r3, [r7, #20]
   return(result);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d103      	bne.n	8005e64 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fadf 	bl	8005430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e72:	e00b      	b.n	8005e8c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fa ff6d 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 8005e7a:	e007      	b.n	8005e8c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	619a      	str	r2, [r3, #24]
}
 8005e8c:	bf00      	nop
 8005e8e:	3770      	adds	r7, #112	; 0x70
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b09c      	sub	sp, #112	; 0x70
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eac:	2b22      	cmp	r3, #34	; 0x22
 8005eae:	f040 80b9 	bne.w	8006024 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ec2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005ec6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005eca:	4013      	ands	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	1c9a      	adds	r2, r3, #2
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 809c 	bne.w	8006034 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f10:	667b      	str	r3, [r7, #100]	; 0x64
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	663b      	str	r3, [r7, #96]	; 0x60
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d018      	beq.n	8005fb6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e6      	bne.n	8005f84 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d12e      	bne.n	800601c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 0310 	bic.w	r3, r3, #16
 8005fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6979      	ldr	r1, [r7, #20]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e6      	bne.n	8005fc4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b10      	cmp	r3, #16
 8006002:	d103      	bne.n	800600c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2210      	movs	r2, #16
 800600a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fa0b 	bl	8005430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800601a:	e00b      	b.n	8006034 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fa fe99 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 8006022:	e007      	b.n	8006034 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0208 	orr.w	r2, r2, #8
 8006032:	619a      	str	r2, [r3, #24]
}
 8006034:	bf00      	nop
 8006036:	3770      	adds	r7, #112	; 0x70
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <atoff>:
 8006050:	2100      	movs	r1, #0
 8006052:	f000 be11 	b.w	8006c78 <strtof>

08006056 <atoi>:
 8006056:	220a      	movs	r2, #10
 8006058:	2100      	movs	r1, #0
 800605a:	f000 bef5 	b.w	8006e48 <strtol>

0800605e <sulp>:
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	ec45 4b10 	vmov	d0, r4, r5
 8006068:	4616      	mov	r6, r2
 800606a:	f003 fba1 	bl	80097b0 <__ulp>
 800606e:	ec51 0b10 	vmov	r0, r1, d0
 8006072:	b17e      	cbz	r6, 8006094 <sulp+0x36>
 8006074:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd09      	ble.n	8006094 <sulp+0x36>
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006086:	2400      	movs	r4, #0
 8006088:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa fac2 	bl	8000618 <__aeabi_dmul>
 8006094:	bd70      	pop	{r4, r5, r6, pc}
	...

08006098 <_strtod_l>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b02 	vpush	{d8}
 80060a0:	b09b      	sub	sp, #108	; 0x6c
 80060a2:	4604      	mov	r4, r0
 80060a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80060a6:	2200      	movs	r2, #0
 80060a8:	9216      	str	r2, [sp, #88]	; 0x58
 80060aa:	460d      	mov	r5, r1
 80060ac:	f04f 0800 	mov.w	r8, #0
 80060b0:	f04f 0900 	mov.w	r9, #0
 80060b4:	460a      	mov	r2, r1
 80060b6:	9215      	str	r2, [sp, #84]	; 0x54
 80060b8:	7811      	ldrb	r1, [r2, #0]
 80060ba:	292b      	cmp	r1, #43	; 0x2b
 80060bc:	d04c      	beq.n	8006158 <_strtod_l+0xc0>
 80060be:	d83a      	bhi.n	8006136 <_strtod_l+0x9e>
 80060c0:	290d      	cmp	r1, #13
 80060c2:	d834      	bhi.n	800612e <_strtod_l+0x96>
 80060c4:	2908      	cmp	r1, #8
 80060c6:	d834      	bhi.n	8006132 <_strtod_l+0x9a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d03d      	beq.n	8006148 <_strtod_l+0xb0>
 80060cc:	2200      	movs	r2, #0
 80060ce:	920a      	str	r2, [sp, #40]	; 0x28
 80060d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80060d2:	7832      	ldrb	r2, [r6, #0]
 80060d4:	2a30      	cmp	r2, #48	; 0x30
 80060d6:	f040 80b4 	bne.w	8006242 <_strtod_l+0x1aa>
 80060da:	7872      	ldrb	r2, [r6, #1]
 80060dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80060e0:	2a58      	cmp	r2, #88	; 0x58
 80060e2:	d170      	bne.n	80061c6 <_strtod_l+0x12e>
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	ab16      	add	r3, sp, #88	; 0x58
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	4a8e      	ldr	r2, [pc, #568]	; (8006328 <_strtod_l+0x290>)
 80060f0:	ab17      	add	r3, sp, #92	; 0x5c
 80060f2:	a915      	add	r1, sp, #84	; 0x54
 80060f4:	4620      	mov	r0, r4
 80060f6:	f002 fc39 	bl	800896c <__gethex>
 80060fa:	f010 070f 	ands.w	r7, r0, #15
 80060fe:	4605      	mov	r5, r0
 8006100:	d005      	beq.n	800610e <_strtod_l+0x76>
 8006102:	2f06      	cmp	r7, #6
 8006104:	d12a      	bne.n	800615c <_strtod_l+0xc4>
 8006106:	3601      	adds	r6, #1
 8006108:	2300      	movs	r3, #0
 800610a:	9615      	str	r6, [sp, #84]	; 0x54
 800610c:	930a      	str	r3, [sp, #40]	; 0x28
 800610e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 857f 	bne.w	8006c14 <_strtod_l+0xb7c>
 8006116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006118:	b1db      	cbz	r3, 8006152 <_strtod_l+0xba>
 800611a:	4642      	mov	r2, r8
 800611c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006120:	ec43 2b10 	vmov	d0, r2, r3
 8006124:	b01b      	add	sp, #108	; 0x6c
 8006126:	ecbd 8b02 	vpop	{d8}
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	2920      	cmp	r1, #32
 8006130:	d1cc      	bne.n	80060cc <_strtod_l+0x34>
 8006132:	3201      	adds	r2, #1
 8006134:	e7bf      	b.n	80060b6 <_strtod_l+0x1e>
 8006136:	292d      	cmp	r1, #45	; 0x2d
 8006138:	d1c8      	bne.n	80060cc <_strtod_l+0x34>
 800613a:	2101      	movs	r1, #1
 800613c:	910a      	str	r1, [sp, #40]	; 0x28
 800613e:	1c51      	adds	r1, r2, #1
 8006140:	9115      	str	r1, [sp, #84]	; 0x54
 8006142:	7852      	ldrb	r2, [r2, #1]
 8006144:	2a00      	cmp	r2, #0
 8006146:	d1c3      	bne.n	80060d0 <_strtod_l+0x38>
 8006148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800614a:	9515      	str	r5, [sp, #84]	; 0x54
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 855f 	bne.w	8006c10 <_strtod_l+0xb78>
 8006152:	4642      	mov	r2, r8
 8006154:	464b      	mov	r3, r9
 8006156:	e7e3      	b.n	8006120 <_strtod_l+0x88>
 8006158:	2100      	movs	r1, #0
 800615a:	e7ef      	b.n	800613c <_strtod_l+0xa4>
 800615c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800615e:	b13a      	cbz	r2, 8006170 <_strtod_l+0xd8>
 8006160:	2135      	movs	r1, #53	; 0x35
 8006162:	a818      	add	r0, sp, #96	; 0x60
 8006164:	f003 fc21 	bl	80099aa <__copybits>
 8006168:	9916      	ldr	r1, [sp, #88]	; 0x58
 800616a:	4620      	mov	r0, r4
 800616c:	f002 fff4 	bl	8009158 <_Bfree>
 8006170:	3f01      	subs	r7, #1
 8006172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006174:	2f04      	cmp	r7, #4
 8006176:	d806      	bhi.n	8006186 <_strtod_l+0xee>
 8006178:	e8df f007 	tbb	[pc, r7]
 800617c:	201d0314 	.word	0x201d0314
 8006180:	14          	.byte	0x14
 8006181:	00          	.byte	0x00
 8006182:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006186:	05e9      	lsls	r1, r5, #23
 8006188:	bf48      	it	mi
 800618a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800618e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006192:	0d1b      	lsrs	r3, r3, #20
 8006194:	051b      	lsls	r3, r3, #20
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1b9      	bne.n	800610e <_strtod_l+0x76>
 800619a:	f001 fc63 	bl	8007a64 <__errno>
 800619e:	2322      	movs	r3, #34	; 0x22
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	e7b4      	b.n	800610e <_strtod_l+0x76>
 80061a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80061a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80061ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80061b4:	e7e7      	b.n	8006186 <_strtod_l+0xee>
 80061b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006330 <_strtod_l+0x298>
 80061ba:	e7e4      	b.n	8006186 <_strtod_l+0xee>
 80061bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80061c0:	f04f 38ff 	mov.w	r8, #4294967295
 80061c4:	e7df      	b.n	8006186 <_strtod_l+0xee>
 80061c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	9215      	str	r2, [sp, #84]	; 0x54
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b30      	cmp	r3, #48	; 0x30
 80061d0:	d0f9      	beq.n	80061c6 <_strtod_l+0x12e>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d09b      	beq.n	800610e <_strtod_l+0x76>
 80061d6:	2301      	movs	r3, #1
 80061d8:	f04f 0a00 	mov.w	sl, #0
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80061e6:	46d3      	mov	fp, sl
 80061e8:	220a      	movs	r2, #10
 80061ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80061ec:	7806      	ldrb	r6, [r0, #0]
 80061ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80061f2:	b2d9      	uxtb	r1, r3
 80061f4:	2909      	cmp	r1, #9
 80061f6:	d926      	bls.n	8006246 <_strtod_l+0x1ae>
 80061f8:	494c      	ldr	r1, [pc, #304]	; (800632c <_strtod_l+0x294>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	f001 fbd5 	bl	80079aa <strncmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	d030      	beq.n	8006266 <_strtod_l+0x1ce>
 8006204:	2000      	movs	r0, #0
 8006206:	4632      	mov	r2, r6
 8006208:	9005      	str	r0, [sp, #20]
 800620a:	465e      	mov	r6, fp
 800620c:	4603      	mov	r3, r0
 800620e:	2a65      	cmp	r2, #101	; 0x65
 8006210:	d001      	beq.n	8006216 <_strtod_l+0x17e>
 8006212:	2a45      	cmp	r2, #69	; 0x45
 8006214:	d113      	bne.n	800623e <_strtod_l+0x1a6>
 8006216:	b91e      	cbnz	r6, 8006220 <_strtod_l+0x188>
 8006218:	9a04      	ldr	r2, [sp, #16]
 800621a:	4302      	orrs	r2, r0
 800621c:	d094      	beq.n	8006148 <_strtod_l+0xb0>
 800621e:	2600      	movs	r6, #0
 8006220:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006222:	1c6a      	adds	r2, r5, #1
 8006224:	9215      	str	r2, [sp, #84]	; 0x54
 8006226:	786a      	ldrb	r2, [r5, #1]
 8006228:	2a2b      	cmp	r2, #43	; 0x2b
 800622a:	d074      	beq.n	8006316 <_strtod_l+0x27e>
 800622c:	2a2d      	cmp	r2, #45	; 0x2d
 800622e:	d078      	beq.n	8006322 <_strtod_l+0x28a>
 8006230:	f04f 0c00 	mov.w	ip, #0
 8006234:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006238:	2909      	cmp	r1, #9
 800623a:	d97f      	bls.n	800633c <_strtod_l+0x2a4>
 800623c:	9515      	str	r5, [sp, #84]	; 0x54
 800623e:	2700      	movs	r7, #0
 8006240:	e09e      	b.n	8006380 <_strtod_l+0x2e8>
 8006242:	2300      	movs	r3, #0
 8006244:	e7c8      	b.n	80061d8 <_strtod_l+0x140>
 8006246:	f1bb 0f08 	cmp.w	fp, #8
 800624a:	bfd8      	it	le
 800624c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800624e:	f100 0001 	add.w	r0, r0, #1
 8006252:	bfda      	itte	le
 8006254:	fb02 3301 	mlale	r3, r2, r1, r3
 8006258:	9309      	strle	r3, [sp, #36]	; 0x24
 800625a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800625e:	f10b 0b01 	add.w	fp, fp, #1
 8006262:	9015      	str	r0, [sp, #84]	; 0x54
 8006264:	e7c1      	b.n	80061ea <_strtod_l+0x152>
 8006266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	9215      	str	r2, [sp, #84]	; 0x54
 800626c:	785a      	ldrb	r2, [r3, #1]
 800626e:	f1bb 0f00 	cmp.w	fp, #0
 8006272:	d037      	beq.n	80062e4 <_strtod_l+0x24c>
 8006274:	9005      	str	r0, [sp, #20]
 8006276:	465e      	mov	r6, fp
 8006278:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800627c:	2b09      	cmp	r3, #9
 800627e:	d912      	bls.n	80062a6 <_strtod_l+0x20e>
 8006280:	2301      	movs	r3, #1
 8006282:	e7c4      	b.n	800620e <_strtod_l+0x176>
 8006284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	9215      	str	r2, [sp, #84]	; 0x54
 800628a:	785a      	ldrb	r2, [r3, #1]
 800628c:	3001      	adds	r0, #1
 800628e:	2a30      	cmp	r2, #48	; 0x30
 8006290:	d0f8      	beq.n	8006284 <_strtod_l+0x1ec>
 8006292:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006296:	2b08      	cmp	r3, #8
 8006298:	f200 84c1 	bhi.w	8006c1e <_strtod_l+0xb86>
 800629c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800629e:	9005      	str	r0, [sp, #20]
 80062a0:	2000      	movs	r0, #0
 80062a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a4:	4606      	mov	r6, r0
 80062a6:	3a30      	subs	r2, #48	; 0x30
 80062a8:	f100 0301 	add.w	r3, r0, #1
 80062ac:	d014      	beq.n	80062d8 <_strtod_l+0x240>
 80062ae:	9905      	ldr	r1, [sp, #20]
 80062b0:	4419      	add	r1, r3
 80062b2:	9105      	str	r1, [sp, #20]
 80062b4:	4633      	mov	r3, r6
 80062b6:	eb00 0c06 	add.w	ip, r0, r6
 80062ba:	210a      	movs	r1, #10
 80062bc:	4563      	cmp	r3, ip
 80062be:	d113      	bne.n	80062e8 <_strtod_l+0x250>
 80062c0:	1833      	adds	r3, r6, r0
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	f106 0601 	add.w	r6, r6, #1
 80062c8:	4406      	add	r6, r0
 80062ca:	dc1a      	bgt.n	8006302 <_strtod_l+0x26a>
 80062cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ce:	230a      	movs	r3, #10
 80062d0:	fb03 2301 	mla	r3, r3, r1, r2
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	2300      	movs	r3, #0
 80062d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062da:	1c51      	adds	r1, r2, #1
 80062dc:	9115      	str	r1, [sp, #84]	; 0x54
 80062de:	7852      	ldrb	r2, [r2, #1]
 80062e0:	4618      	mov	r0, r3
 80062e2:	e7c9      	b.n	8006278 <_strtod_l+0x1e0>
 80062e4:	4658      	mov	r0, fp
 80062e6:	e7d2      	b.n	800628e <_strtod_l+0x1f6>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	f103 0301 	add.w	r3, r3, #1
 80062ee:	dc03      	bgt.n	80062f8 <_strtod_l+0x260>
 80062f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062f2:	434f      	muls	r7, r1
 80062f4:	9709      	str	r7, [sp, #36]	; 0x24
 80062f6:	e7e1      	b.n	80062bc <_strtod_l+0x224>
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	bfd8      	it	le
 80062fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006300:	e7dc      	b.n	80062bc <_strtod_l+0x224>
 8006302:	2e10      	cmp	r6, #16
 8006304:	bfdc      	itt	le
 8006306:	230a      	movle	r3, #10
 8006308:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800630c:	e7e3      	b.n	80062d6 <_strtod_l+0x23e>
 800630e:	2300      	movs	r3, #0
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	2301      	movs	r3, #1
 8006314:	e780      	b.n	8006218 <_strtod_l+0x180>
 8006316:	f04f 0c00 	mov.w	ip, #0
 800631a:	1caa      	adds	r2, r5, #2
 800631c:	9215      	str	r2, [sp, #84]	; 0x54
 800631e:	78aa      	ldrb	r2, [r5, #2]
 8006320:	e788      	b.n	8006234 <_strtod_l+0x19c>
 8006322:	f04f 0c01 	mov.w	ip, #1
 8006326:	e7f8      	b.n	800631a <_strtod_l+0x282>
 8006328:	0800a55c 	.word	0x0800a55c
 800632c:	0800a558 	.word	0x0800a558
 8006330:	7ff00000 	.word	0x7ff00000
 8006334:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006336:	1c51      	adds	r1, r2, #1
 8006338:	9115      	str	r1, [sp, #84]	; 0x54
 800633a:	7852      	ldrb	r2, [r2, #1]
 800633c:	2a30      	cmp	r2, #48	; 0x30
 800633e:	d0f9      	beq.n	8006334 <_strtod_l+0x29c>
 8006340:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006344:	2908      	cmp	r1, #8
 8006346:	f63f af7a 	bhi.w	800623e <_strtod_l+0x1a6>
 800634a:	3a30      	subs	r2, #48	; 0x30
 800634c:	9208      	str	r2, [sp, #32]
 800634e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006350:	920c      	str	r2, [sp, #48]	; 0x30
 8006352:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006354:	1c57      	adds	r7, r2, #1
 8006356:	9715      	str	r7, [sp, #84]	; 0x54
 8006358:	7852      	ldrb	r2, [r2, #1]
 800635a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800635e:	f1be 0f09 	cmp.w	lr, #9
 8006362:	d938      	bls.n	80063d6 <_strtod_l+0x33e>
 8006364:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006366:	1a7f      	subs	r7, r7, r1
 8006368:	2f08      	cmp	r7, #8
 800636a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800636e:	dc03      	bgt.n	8006378 <_strtod_l+0x2e0>
 8006370:	9908      	ldr	r1, [sp, #32]
 8006372:	428f      	cmp	r7, r1
 8006374:	bfa8      	it	ge
 8006376:	460f      	movge	r7, r1
 8006378:	f1bc 0f00 	cmp.w	ip, #0
 800637c:	d000      	beq.n	8006380 <_strtod_l+0x2e8>
 800637e:	427f      	negs	r7, r7
 8006380:	2e00      	cmp	r6, #0
 8006382:	d14f      	bne.n	8006424 <_strtod_l+0x38c>
 8006384:	9904      	ldr	r1, [sp, #16]
 8006386:	4301      	orrs	r1, r0
 8006388:	f47f aec1 	bne.w	800610e <_strtod_l+0x76>
 800638c:	2b00      	cmp	r3, #0
 800638e:	f47f aedb 	bne.w	8006148 <_strtod_l+0xb0>
 8006392:	2a69      	cmp	r2, #105	; 0x69
 8006394:	d029      	beq.n	80063ea <_strtod_l+0x352>
 8006396:	dc26      	bgt.n	80063e6 <_strtod_l+0x34e>
 8006398:	2a49      	cmp	r2, #73	; 0x49
 800639a:	d026      	beq.n	80063ea <_strtod_l+0x352>
 800639c:	2a4e      	cmp	r2, #78	; 0x4e
 800639e:	f47f aed3 	bne.w	8006148 <_strtod_l+0xb0>
 80063a2:	499b      	ldr	r1, [pc, #620]	; (8006610 <_strtod_l+0x578>)
 80063a4:	a815      	add	r0, sp, #84	; 0x54
 80063a6:	f002 fd21 	bl	8008dec <__match>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	f43f aecc 	beq.w	8006148 <_strtod_l+0xb0>
 80063b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d12f      	bne.n	8006418 <_strtod_l+0x380>
 80063b8:	4996      	ldr	r1, [pc, #600]	; (8006614 <_strtod_l+0x57c>)
 80063ba:	aa18      	add	r2, sp, #96	; 0x60
 80063bc:	a815      	add	r0, sp, #84	; 0x54
 80063be:	f002 fd29 	bl	8008e14 <__hexnan>
 80063c2:	2805      	cmp	r0, #5
 80063c4:	d128      	bne.n	8006418 <_strtod_l+0x380>
 80063c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80063d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80063d4:	e69b      	b.n	800610e <_strtod_l+0x76>
 80063d6:	9f08      	ldr	r7, [sp, #32]
 80063d8:	210a      	movs	r1, #10
 80063da:	fb01 2107 	mla	r1, r1, r7, r2
 80063de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80063e2:	9208      	str	r2, [sp, #32]
 80063e4:	e7b5      	b.n	8006352 <_strtod_l+0x2ba>
 80063e6:	2a6e      	cmp	r2, #110	; 0x6e
 80063e8:	e7d9      	b.n	800639e <_strtod_l+0x306>
 80063ea:	498b      	ldr	r1, [pc, #556]	; (8006618 <_strtod_l+0x580>)
 80063ec:	a815      	add	r0, sp, #84	; 0x54
 80063ee:	f002 fcfd 	bl	8008dec <__match>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f aea8 	beq.w	8006148 <_strtod_l+0xb0>
 80063f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063fa:	4988      	ldr	r1, [pc, #544]	; (800661c <_strtod_l+0x584>)
 80063fc:	3b01      	subs	r3, #1
 80063fe:	a815      	add	r0, sp, #84	; 0x54
 8006400:	9315      	str	r3, [sp, #84]	; 0x54
 8006402:	f002 fcf3 	bl	8008dec <__match>
 8006406:	b910      	cbnz	r0, 800640e <_strtod_l+0x376>
 8006408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800640a:	3301      	adds	r3, #1
 800640c:	9315      	str	r3, [sp, #84]	; 0x54
 800640e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800662c <_strtod_l+0x594>
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	e67a      	b.n	800610e <_strtod_l+0x76>
 8006418:	4881      	ldr	r0, [pc, #516]	; (8006620 <_strtod_l+0x588>)
 800641a:	f001 fb69 	bl	8007af0 <nan>
 800641e:	ec59 8b10 	vmov	r8, r9, d0
 8006422:	e674      	b.n	800610e <_strtod_l+0x76>
 8006424:	9b05      	ldr	r3, [sp, #20]
 8006426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006428:	1afb      	subs	r3, r7, r3
 800642a:	f1bb 0f00 	cmp.w	fp, #0
 800642e:	bf08      	it	eq
 8006430:	46b3      	moveq	fp, r6
 8006432:	2e10      	cmp	r6, #16
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	4635      	mov	r5, r6
 8006438:	bfa8      	it	ge
 800643a:	2510      	movge	r5, #16
 800643c:	f7fa f872 	bl	8000524 <__aeabi_ui2d>
 8006440:	2e09      	cmp	r6, #9
 8006442:	4680      	mov	r8, r0
 8006444:	4689      	mov	r9, r1
 8006446:	dd13      	ble.n	8006470 <_strtod_l+0x3d8>
 8006448:	4b76      	ldr	r3, [pc, #472]	; (8006624 <_strtod_l+0x58c>)
 800644a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800644e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006452:	f7fa f8e1 	bl	8000618 <__aeabi_dmul>
 8006456:	4680      	mov	r8, r0
 8006458:	4650      	mov	r0, sl
 800645a:	4689      	mov	r9, r1
 800645c:	f7fa f862 	bl	8000524 <__aeabi_ui2d>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4640      	mov	r0, r8
 8006466:	4649      	mov	r1, r9
 8006468:	f7f9 ff20 	bl	80002ac <__adddf3>
 800646c:	4680      	mov	r8, r0
 800646e:	4689      	mov	r9, r1
 8006470:	2e0f      	cmp	r6, #15
 8006472:	dc38      	bgt.n	80064e6 <_strtod_l+0x44e>
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f43f ae49 	beq.w	800610e <_strtod_l+0x76>
 800647c:	dd24      	ble.n	80064c8 <_strtod_l+0x430>
 800647e:	2b16      	cmp	r3, #22
 8006480:	dc0b      	bgt.n	800649a <_strtod_l+0x402>
 8006482:	4968      	ldr	r1, [pc, #416]	; (8006624 <_strtod_l+0x58c>)
 8006484:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	f7fa f8c2 	bl	8000618 <__aeabi_dmul>
 8006494:	4680      	mov	r8, r0
 8006496:	4689      	mov	r9, r1
 8006498:	e639      	b.n	800610e <_strtod_l+0x76>
 800649a:	9a08      	ldr	r2, [sp, #32]
 800649c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80064a0:	4293      	cmp	r3, r2
 80064a2:	db20      	blt.n	80064e6 <_strtod_l+0x44e>
 80064a4:	4c5f      	ldr	r4, [pc, #380]	; (8006624 <_strtod_l+0x58c>)
 80064a6:	f1c6 060f 	rsb	r6, r6, #15
 80064aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80064ae:	4642      	mov	r2, r8
 80064b0:	464b      	mov	r3, r9
 80064b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b6:	f7fa f8af 	bl	8000618 <__aeabi_dmul>
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	1b9e      	subs	r6, r3, r6
 80064be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80064c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80064c6:	e7e3      	b.n	8006490 <_strtod_l+0x3f8>
 80064c8:	9b08      	ldr	r3, [sp, #32]
 80064ca:	3316      	adds	r3, #22
 80064cc:	db0b      	blt.n	80064e6 <_strtod_l+0x44e>
 80064ce:	9b05      	ldr	r3, [sp, #20]
 80064d0:	1bdf      	subs	r7, r3, r7
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <_strtod_l+0x58c>)
 80064d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80064d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa f9c4 	bl	800086c <__aeabi_ddiv>
 80064e4:	e7d6      	b.n	8006494 <_strtod_l+0x3fc>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	1b75      	subs	r5, r6, r5
 80064ea:	441d      	add	r5, r3
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	dd70      	ble.n	80065d2 <_strtod_l+0x53a>
 80064f0:	f015 030f 	ands.w	r3, r5, #15
 80064f4:	d00a      	beq.n	800650c <_strtod_l+0x474>
 80064f6:	494b      	ldr	r1, [pc, #300]	; (8006624 <_strtod_l+0x58c>)
 80064f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006504:	f7fa f888 	bl	8000618 <__aeabi_dmul>
 8006508:	4680      	mov	r8, r0
 800650a:	4689      	mov	r9, r1
 800650c:	f035 050f 	bics.w	r5, r5, #15
 8006510:	d04d      	beq.n	80065ae <_strtod_l+0x516>
 8006512:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006516:	dd22      	ble.n	800655e <_strtod_l+0x4c6>
 8006518:	2500      	movs	r5, #0
 800651a:	46ab      	mov	fp, r5
 800651c:	9509      	str	r5, [sp, #36]	; 0x24
 800651e:	9505      	str	r5, [sp, #20]
 8006520:	2322      	movs	r3, #34	; 0x22
 8006522:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800662c <_strtod_l+0x594>
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	f04f 0800 	mov.w	r8, #0
 800652c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	f43f aded 	beq.w	800610e <_strtod_l+0x76>
 8006534:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006536:	4620      	mov	r0, r4
 8006538:	f002 fe0e 	bl	8009158 <_Bfree>
 800653c:	9905      	ldr	r1, [sp, #20]
 800653e:	4620      	mov	r0, r4
 8006540:	f002 fe0a 	bl	8009158 <_Bfree>
 8006544:	4659      	mov	r1, fp
 8006546:	4620      	mov	r0, r4
 8006548:	f002 fe06 	bl	8009158 <_Bfree>
 800654c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800654e:	4620      	mov	r0, r4
 8006550:	f002 fe02 	bl	8009158 <_Bfree>
 8006554:	4629      	mov	r1, r5
 8006556:	4620      	mov	r0, r4
 8006558:	f002 fdfe 	bl	8009158 <_Bfree>
 800655c:	e5d7      	b.n	800610e <_strtod_l+0x76>
 800655e:	4b32      	ldr	r3, [pc, #200]	; (8006628 <_strtod_l+0x590>)
 8006560:	9304      	str	r3, [sp, #16]
 8006562:	2300      	movs	r3, #0
 8006564:	112d      	asrs	r5, r5, #4
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	469a      	mov	sl, r3
 800656c:	2d01      	cmp	r5, #1
 800656e:	dc21      	bgt.n	80065b4 <_strtod_l+0x51c>
 8006570:	b10b      	cbz	r3, 8006576 <_strtod_l+0x4de>
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	492c      	ldr	r1, [pc, #176]	; (8006628 <_strtod_l+0x590>)
 8006578:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800657c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006580:	4642      	mov	r2, r8
 8006582:	464b      	mov	r3, r9
 8006584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006588:	f7fa f846 	bl	8000618 <__aeabi_dmul>
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <_strtod_l+0x594>)
 800658e:	460a      	mov	r2, r1
 8006590:	400b      	ands	r3, r1
 8006592:	4927      	ldr	r1, [pc, #156]	; (8006630 <_strtod_l+0x598>)
 8006594:	428b      	cmp	r3, r1
 8006596:	4680      	mov	r8, r0
 8006598:	d8be      	bhi.n	8006518 <_strtod_l+0x480>
 800659a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800659e:	428b      	cmp	r3, r1
 80065a0:	bf86      	itte	hi
 80065a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006634 <_strtod_l+0x59c>
 80065a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80065aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80065ae:	2300      	movs	r3, #0
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	e07b      	b.n	80066ac <_strtod_l+0x614>
 80065b4:	07ea      	lsls	r2, r5, #31
 80065b6:	d505      	bpl.n	80065c4 <_strtod_l+0x52c>
 80065b8:	9b04      	ldr	r3, [sp, #16]
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7fa f82b 	bl	8000618 <__aeabi_dmul>
 80065c2:	2301      	movs	r3, #1
 80065c4:	9a04      	ldr	r2, [sp, #16]
 80065c6:	3208      	adds	r2, #8
 80065c8:	f10a 0a01 	add.w	sl, sl, #1
 80065cc:	106d      	asrs	r5, r5, #1
 80065ce:	9204      	str	r2, [sp, #16]
 80065d0:	e7cc      	b.n	800656c <_strtod_l+0x4d4>
 80065d2:	d0ec      	beq.n	80065ae <_strtod_l+0x516>
 80065d4:	426d      	negs	r5, r5
 80065d6:	f015 020f 	ands.w	r2, r5, #15
 80065da:	d00a      	beq.n	80065f2 <_strtod_l+0x55a>
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <_strtod_l+0x58c>)
 80065de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa f93f 	bl	800086c <__aeabi_ddiv>
 80065ee:	4680      	mov	r8, r0
 80065f0:	4689      	mov	r9, r1
 80065f2:	112d      	asrs	r5, r5, #4
 80065f4:	d0db      	beq.n	80065ae <_strtod_l+0x516>
 80065f6:	2d1f      	cmp	r5, #31
 80065f8:	dd1e      	ble.n	8006638 <_strtod_l+0x5a0>
 80065fa:	2500      	movs	r5, #0
 80065fc:	46ab      	mov	fp, r5
 80065fe:	9509      	str	r5, [sp, #36]	; 0x24
 8006600:	9505      	str	r5, [sp, #20]
 8006602:	2322      	movs	r3, #34	; 0x22
 8006604:	f04f 0800 	mov.w	r8, #0
 8006608:	f04f 0900 	mov.w	r9, #0
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	e78d      	b.n	800652c <_strtod_l+0x494>
 8006610:	0800a6be 	.word	0x0800a6be
 8006614:	0800a570 	.word	0x0800a570
 8006618:	0800a6b6 	.word	0x0800a6b6
 800661c:	0800a6f0 	.word	0x0800a6f0
 8006620:	0800a980 	.word	0x0800a980
 8006624:	0800a860 	.word	0x0800a860
 8006628:	0800a838 	.word	0x0800a838
 800662c:	7ff00000 	.word	0x7ff00000
 8006630:	7ca00000 	.word	0x7ca00000
 8006634:	7fefffff 	.word	0x7fefffff
 8006638:	f015 0310 	ands.w	r3, r5, #16
 800663c:	bf18      	it	ne
 800663e:	236a      	movne	r3, #106	; 0x6a
 8006640:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80069e4 <_strtod_l+0x94c>
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	2300      	movs	r3, #0
 800664c:	07ea      	lsls	r2, r5, #31
 800664e:	d504      	bpl.n	800665a <_strtod_l+0x5c2>
 8006650:	e9da 2300 	ldrd	r2, r3, [sl]
 8006654:	f7f9 ffe0 	bl	8000618 <__aeabi_dmul>
 8006658:	2301      	movs	r3, #1
 800665a:	106d      	asrs	r5, r5, #1
 800665c:	f10a 0a08 	add.w	sl, sl, #8
 8006660:	d1f4      	bne.n	800664c <_strtod_l+0x5b4>
 8006662:	b10b      	cbz	r3, 8006668 <_strtod_l+0x5d0>
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	9b04      	ldr	r3, [sp, #16]
 800666a:	b1bb      	cbz	r3, 800669c <_strtod_l+0x604>
 800666c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006670:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006674:	2b00      	cmp	r3, #0
 8006676:	4649      	mov	r1, r9
 8006678:	dd10      	ble.n	800669c <_strtod_l+0x604>
 800667a:	2b1f      	cmp	r3, #31
 800667c:	f340 811e 	ble.w	80068bc <_strtod_l+0x824>
 8006680:	2b34      	cmp	r3, #52	; 0x34
 8006682:	bfde      	ittt	le
 8006684:	f04f 33ff 	movle.w	r3, #4294967295
 8006688:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800668c:	4093      	lslle	r3, r2
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	bfcc      	ite	gt
 8006694:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006698:	ea03 0901 	andle.w	r9, r3, r1
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa20 	bl	8000ae8 <__aeabi_dcmpeq>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d1a6      	bne.n	80065fa <_strtod_l+0x562>
 80066ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066b2:	4633      	mov	r3, r6
 80066b4:	465a      	mov	r2, fp
 80066b6:	4620      	mov	r0, r4
 80066b8:	f002 fdb6 	bl	8009228 <__s2b>
 80066bc:	9009      	str	r0, [sp, #36]	; 0x24
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f af2a 	beq.w	8006518 <_strtod_l+0x480>
 80066c4:	9a08      	ldr	r2, [sp, #32]
 80066c6:	9b05      	ldr	r3, [sp, #20]
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	eba3 0307 	sub.w	r3, r3, r7
 80066ce:	bfa8      	it	ge
 80066d0:	2300      	movge	r3, #0
 80066d2:	930c      	str	r3, [sp, #48]	; 0x30
 80066d4:	2500      	movs	r5, #0
 80066d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066da:	9312      	str	r3, [sp, #72]	; 0x48
 80066dc:	46ab      	mov	fp, r5
 80066de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e0:	4620      	mov	r0, r4
 80066e2:	6859      	ldr	r1, [r3, #4]
 80066e4:	f002 fcf8 	bl	80090d8 <_Balloc>
 80066e8:	9005      	str	r0, [sp, #20]
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f43f af18 	beq.w	8006520 <_strtod_l+0x488>
 80066f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	3202      	adds	r2, #2
 80066f6:	f103 010c 	add.w	r1, r3, #12
 80066fa:	0092      	lsls	r2, r2, #2
 80066fc:	300c      	adds	r0, #12
 80066fe:	f001 f9e6 	bl	8007ace <memcpy>
 8006702:	ec49 8b10 	vmov	d0, r8, r9
 8006706:	aa18      	add	r2, sp, #96	; 0x60
 8006708:	a917      	add	r1, sp, #92	; 0x5c
 800670a:	4620      	mov	r0, r4
 800670c:	f003 f8c0 	bl	8009890 <__d2b>
 8006710:	ec49 8b18 	vmov	d8, r8, r9
 8006714:	9016      	str	r0, [sp, #88]	; 0x58
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f af02 	beq.w	8006520 <_strtod_l+0x488>
 800671c:	2101      	movs	r1, #1
 800671e:	4620      	mov	r0, r4
 8006720:	f002 fe1a 	bl	8009358 <__i2b>
 8006724:	4683      	mov	fp, r0
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f aefa 	beq.w	8006520 <_strtod_l+0x488>
 800672c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800672e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006730:	2e00      	cmp	r6, #0
 8006732:	bfab      	itete	ge
 8006734:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006736:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006738:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800673a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800673e:	bfac      	ite	ge
 8006740:	eb06 0a03 	addge.w	sl, r6, r3
 8006744:	1b9f      	sublt	r7, r3, r6
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	1af6      	subs	r6, r6, r3
 800674a:	4416      	add	r6, r2
 800674c:	4ba0      	ldr	r3, [pc, #640]	; (80069d0 <_strtod_l+0x938>)
 800674e:	3e01      	subs	r6, #1
 8006750:	429e      	cmp	r6, r3
 8006752:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006756:	f280 80c4 	bge.w	80068e2 <_strtod_l+0x84a>
 800675a:	1b9b      	subs	r3, r3, r6
 800675c:	2b1f      	cmp	r3, #31
 800675e:	eba2 0203 	sub.w	r2, r2, r3
 8006762:	f04f 0101 	mov.w	r1, #1
 8006766:	f300 80b0 	bgt.w	80068ca <_strtod_l+0x832>
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	930e      	str	r3, [sp, #56]	; 0x38
 8006770:	2300      	movs	r3, #0
 8006772:	930d      	str	r3, [sp, #52]	; 0x34
 8006774:	eb0a 0602 	add.w	r6, sl, r2
 8006778:	9b04      	ldr	r3, [sp, #16]
 800677a:	45b2      	cmp	sl, r6
 800677c:	4417      	add	r7, r2
 800677e:	441f      	add	r7, r3
 8006780:	4653      	mov	r3, sl
 8006782:	bfa8      	it	ge
 8006784:	4633      	movge	r3, r6
 8006786:	42bb      	cmp	r3, r7
 8006788:	bfa8      	it	ge
 800678a:	463b      	movge	r3, r7
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfc2      	ittt	gt
 8006790:	1af6      	subgt	r6, r6, r3
 8006792:	1aff      	subgt	r7, r7, r3
 8006794:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800679a:	2b00      	cmp	r3, #0
 800679c:	dd17      	ble.n	80067ce <_strtod_l+0x736>
 800679e:	4659      	mov	r1, fp
 80067a0:	461a      	mov	r2, r3
 80067a2:	4620      	mov	r0, r4
 80067a4:	f002 fe98 	bl	80094d8 <__pow5mult>
 80067a8:	4683      	mov	fp, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f aeb8 	beq.w	8006520 <_strtod_l+0x488>
 80067b0:	4601      	mov	r1, r0
 80067b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80067b4:	4620      	mov	r0, r4
 80067b6:	f002 fde5 	bl	8009384 <__multiply>
 80067ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80067bc:	2800      	cmp	r0, #0
 80067be:	f43f aeaf 	beq.w	8006520 <_strtod_l+0x488>
 80067c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80067c4:	4620      	mov	r0, r4
 80067c6:	f002 fcc7 	bl	8009158 <_Bfree>
 80067ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067cc:	9316      	str	r3, [sp, #88]	; 0x58
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	f300 808c 	bgt.w	80068ec <_strtod_l+0x854>
 80067d4:	9b08      	ldr	r3, [sp, #32]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dd08      	ble.n	80067ec <_strtod_l+0x754>
 80067da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067dc:	9905      	ldr	r1, [sp, #20]
 80067de:	4620      	mov	r0, r4
 80067e0:	f002 fe7a 	bl	80094d8 <__pow5mult>
 80067e4:	9005      	str	r0, [sp, #20]
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f43f ae9a 	beq.w	8006520 <_strtod_l+0x488>
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	dd08      	ble.n	8006802 <_strtod_l+0x76a>
 80067f0:	9905      	ldr	r1, [sp, #20]
 80067f2:	463a      	mov	r2, r7
 80067f4:	4620      	mov	r0, r4
 80067f6:	f002 fec9 	bl	800958c <__lshift>
 80067fa:	9005      	str	r0, [sp, #20]
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f43f ae8f 	beq.w	8006520 <_strtod_l+0x488>
 8006802:	f1ba 0f00 	cmp.w	sl, #0
 8006806:	dd08      	ble.n	800681a <_strtod_l+0x782>
 8006808:	4659      	mov	r1, fp
 800680a:	4652      	mov	r2, sl
 800680c:	4620      	mov	r0, r4
 800680e:	f002 febd 	bl	800958c <__lshift>
 8006812:	4683      	mov	fp, r0
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f ae83 	beq.w	8006520 <_strtod_l+0x488>
 800681a:	9a05      	ldr	r2, [sp, #20]
 800681c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800681e:	4620      	mov	r0, r4
 8006820:	f002 ff3c 	bl	800969c <__mdiff>
 8006824:	4605      	mov	r5, r0
 8006826:	2800      	cmp	r0, #0
 8006828:	f43f ae7a 	beq.w	8006520 <_strtod_l+0x488>
 800682c:	68c3      	ldr	r3, [r0, #12]
 800682e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006830:	2300      	movs	r3, #0
 8006832:	60c3      	str	r3, [r0, #12]
 8006834:	4659      	mov	r1, fp
 8006836:	f002 ff15 	bl	8009664 <__mcmp>
 800683a:	2800      	cmp	r0, #0
 800683c:	da60      	bge.n	8006900 <_strtod_l+0x868>
 800683e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006840:	ea53 0308 	orrs.w	r3, r3, r8
 8006844:	f040 8084 	bne.w	8006950 <_strtod_l+0x8b8>
 8006848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800684c:	2b00      	cmp	r3, #0
 800684e:	d17f      	bne.n	8006950 <_strtod_l+0x8b8>
 8006850:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006854:	0d1b      	lsrs	r3, r3, #20
 8006856:	051b      	lsls	r3, r3, #20
 8006858:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800685c:	d978      	bls.n	8006950 <_strtod_l+0x8b8>
 800685e:	696b      	ldr	r3, [r5, #20]
 8006860:	b913      	cbnz	r3, 8006868 <_strtod_l+0x7d0>
 8006862:	692b      	ldr	r3, [r5, #16]
 8006864:	2b01      	cmp	r3, #1
 8006866:	dd73      	ble.n	8006950 <_strtod_l+0x8b8>
 8006868:	4629      	mov	r1, r5
 800686a:	2201      	movs	r2, #1
 800686c:	4620      	mov	r0, r4
 800686e:	f002 fe8d 	bl	800958c <__lshift>
 8006872:	4659      	mov	r1, fp
 8006874:	4605      	mov	r5, r0
 8006876:	f002 fef5 	bl	8009664 <__mcmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	dd68      	ble.n	8006950 <_strtod_l+0x8b8>
 800687e:	9904      	ldr	r1, [sp, #16]
 8006880:	4a54      	ldr	r2, [pc, #336]	; (80069d4 <_strtod_l+0x93c>)
 8006882:	464b      	mov	r3, r9
 8006884:	2900      	cmp	r1, #0
 8006886:	f000 8084 	beq.w	8006992 <_strtod_l+0x8fa>
 800688a:	ea02 0109 	and.w	r1, r2, r9
 800688e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006892:	dc7e      	bgt.n	8006992 <_strtod_l+0x8fa>
 8006894:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006898:	f77f aeb3 	ble.w	8006602 <_strtod_l+0x56a>
 800689c:	4b4e      	ldr	r3, [pc, #312]	; (80069d8 <_strtod_l+0x940>)
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	2200      	movs	r2, #0
 80068a4:	f7f9 feb8 	bl	8000618 <__aeabi_dmul>
 80068a8:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <_strtod_l+0x93c>)
 80068aa:	400b      	ands	r3, r1
 80068ac:	4680      	mov	r8, r0
 80068ae:	4689      	mov	r9, r1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f ae3f 	bne.w	8006534 <_strtod_l+0x49c>
 80068b6:	2322      	movs	r3, #34	; 0x22
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	e63b      	b.n	8006534 <_strtod_l+0x49c>
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	ea03 0808 	and.w	r8, r3, r8
 80068c8:	e6e8      	b.n	800669c <_strtod_l+0x604>
 80068ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80068ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80068d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80068d6:	36e2      	adds	r6, #226	; 0xe2
 80068d8:	fa01 f306 	lsl.w	r3, r1, r6
 80068dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80068e0:	e748      	b.n	8006774 <_strtod_l+0x6dc>
 80068e2:	2100      	movs	r1, #0
 80068e4:	2301      	movs	r3, #1
 80068e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80068ea:	e743      	b.n	8006774 <_strtod_l+0x6dc>
 80068ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80068ee:	4632      	mov	r2, r6
 80068f0:	4620      	mov	r0, r4
 80068f2:	f002 fe4b 	bl	800958c <__lshift>
 80068f6:	9016      	str	r0, [sp, #88]	; 0x58
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f47f af6b 	bne.w	80067d4 <_strtod_l+0x73c>
 80068fe:	e60f      	b.n	8006520 <_strtod_l+0x488>
 8006900:	46ca      	mov	sl, r9
 8006902:	d171      	bne.n	80069e8 <_strtod_l+0x950>
 8006904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800690a:	b352      	cbz	r2, 8006962 <_strtod_l+0x8ca>
 800690c:	4a33      	ldr	r2, [pc, #204]	; (80069dc <_strtod_l+0x944>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d12a      	bne.n	8006968 <_strtod_l+0x8d0>
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	4641      	mov	r1, r8
 8006916:	b1fb      	cbz	r3, 8006958 <_strtod_l+0x8c0>
 8006918:	4b2e      	ldr	r3, [pc, #184]	; (80069d4 <_strtod_l+0x93c>)
 800691a:	ea09 0303 	and.w	r3, r9, r3
 800691e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	d81a      	bhi.n	800695e <_strtod_l+0x8c6>
 8006928:	0d1b      	lsrs	r3, r3, #20
 800692a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	4299      	cmp	r1, r3
 8006934:	d118      	bne.n	8006968 <_strtod_l+0x8d0>
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <_strtod_l+0x948>)
 8006938:	459a      	cmp	sl, r3
 800693a:	d102      	bne.n	8006942 <_strtod_l+0x8aa>
 800693c:	3101      	adds	r1, #1
 800693e:	f43f adef 	beq.w	8006520 <_strtod_l+0x488>
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <_strtod_l+0x93c>)
 8006944:	ea0a 0303 	and.w	r3, sl, r3
 8006948:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1a2      	bne.n	800689c <_strtod_l+0x804>
 8006956:	e5ed      	b.n	8006534 <_strtod_l+0x49c>
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	e7e9      	b.n	8006932 <_strtod_l+0x89a>
 800695e:	4613      	mov	r3, r2
 8006960:	e7e7      	b.n	8006932 <_strtod_l+0x89a>
 8006962:	ea53 0308 	orrs.w	r3, r3, r8
 8006966:	d08a      	beq.n	800687e <_strtod_l+0x7e6>
 8006968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696a:	b1e3      	cbz	r3, 80069a6 <_strtod_l+0x90e>
 800696c:	ea13 0f0a 	tst.w	r3, sl
 8006970:	d0ee      	beq.n	8006950 <_strtod_l+0x8b8>
 8006972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006974:	9a04      	ldr	r2, [sp, #16]
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	b1c3      	cbz	r3, 80069ae <_strtod_l+0x916>
 800697c:	f7ff fb6f 	bl	800605e <sulp>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	ec51 0b18 	vmov	r0, r1, d8
 8006988:	f7f9 fc90 	bl	80002ac <__adddf3>
 800698c:	4680      	mov	r8, r0
 800698e:	4689      	mov	r9, r1
 8006990:	e7de      	b.n	8006950 <_strtod_l+0x8b8>
 8006992:	4013      	ands	r3, r2
 8006994:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006998:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800699c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80069a0:	f04f 38ff 	mov.w	r8, #4294967295
 80069a4:	e7d4      	b.n	8006950 <_strtod_l+0x8b8>
 80069a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a8:	ea13 0f08 	tst.w	r3, r8
 80069ac:	e7e0      	b.n	8006970 <_strtod_l+0x8d8>
 80069ae:	f7ff fb56 	bl	800605e <sulp>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	ec51 0b18 	vmov	r0, r1, d8
 80069ba:	f7f9 fc75 	bl	80002a8 <__aeabi_dsub>
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	4680      	mov	r8, r0
 80069c4:	4689      	mov	r9, r1
 80069c6:	f7fa f88f 	bl	8000ae8 <__aeabi_dcmpeq>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d0c0      	beq.n	8006950 <_strtod_l+0x8b8>
 80069ce:	e618      	b.n	8006602 <_strtod_l+0x56a>
 80069d0:	fffffc02 	.word	0xfffffc02
 80069d4:	7ff00000 	.word	0x7ff00000
 80069d8:	39500000 	.word	0x39500000
 80069dc:	000fffff 	.word	0x000fffff
 80069e0:	7fefffff 	.word	0x7fefffff
 80069e4:	0800a588 	.word	0x0800a588
 80069e8:	4659      	mov	r1, fp
 80069ea:	4628      	mov	r0, r5
 80069ec:	f002 ffaa 	bl	8009944 <__ratio>
 80069f0:	ec57 6b10 	vmov	r6, r7, d0
 80069f4:	ee10 0a10 	vmov	r0, s0
 80069f8:	2200      	movs	r2, #0
 80069fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7fa f886 	bl	8000b10 <__aeabi_dcmple>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d071      	beq.n	8006aec <_strtod_l+0xa54>
 8006a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d17c      	bne.n	8006b08 <_strtod_l+0xa70>
 8006a0e:	f1b8 0f00 	cmp.w	r8, #0
 8006a12:	d15a      	bne.n	8006aca <_strtod_l+0xa32>
 8006a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d15d      	bne.n	8006ad8 <_strtod_l+0xa40>
 8006a1c:	4b90      	ldr	r3, [pc, #576]	; (8006c60 <_strtod_l+0xbc8>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7fa f86a 	bl	8000afc <__aeabi_dcmplt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d15c      	bne.n	8006ae6 <_strtod_l+0xa4e>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	4b8c      	ldr	r3, [pc, #560]	; (8006c64 <_strtod_l+0xbcc>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	f7f9 fdf0 	bl	8000618 <__aeabi_dmul>
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006a40:	9606      	str	r6, [sp, #24]
 8006a42:	9307      	str	r3, [sp, #28]
 8006a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006a4c:	4b86      	ldr	r3, [pc, #536]	; (8006c68 <_strtod_l+0xbd0>)
 8006a4e:	ea0a 0303 	and.w	r3, sl, r3
 8006a52:	930d      	str	r3, [sp, #52]	; 0x34
 8006a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a56:	4b85      	ldr	r3, [pc, #532]	; (8006c6c <_strtod_l+0xbd4>)
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	f040 8090 	bne.w	8006b7e <_strtod_l+0xae6>
 8006a5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006a62:	ec49 8b10 	vmov	d0, r8, r9
 8006a66:	f002 fea3 	bl	80097b0 <__ulp>
 8006a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a6e:	ec51 0b10 	vmov	r0, r1, d0
 8006a72:	f7f9 fdd1 	bl	8000618 <__aeabi_dmul>
 8006a76:	4642      	mov	r2, r8
 8006a78:	464b      	mov	r3, r9
 8006a7a:	f7f9 fc17 	bl	80002ac <__adddf3>
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4979      	ldr	r1, [pc, #484]	; (8006c68 <_strtod_l+0xbd0>)
 8006a82:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <_strtod_l+0xbd8>)
 8006a84:	4019      	ands	r1, r3
 8006a86:	4291      	cmp	r1, r2
 8006a88:	4680      	mov	r8, r0
 8006a8a:	d944      	bls.n	8006b16 <_strtod_l+0xa7e>
 8006a8c:	ee18 2a90 	vmov	r2, s17
 8006a90:	4b78      	ldr	r3, [pc, #480]	; (8006c74 <_strtod_l+0xbdc>)
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d104      	bne.n	8006aa0 <_strtod_l+0xa08>
 8006a96:	ee18 3a10 	vmov	r3, s16
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	f43f ad40 	beq.w	8006520 <_strtod_l+0x488>
 8006aa0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006c74 <_strtod_l+0xbdc>
 8006aa4:	f04f 38ff 	mov.w	r8, #4294967295
 8006aa8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f002 fb54 	bl	8009158 <_Bfree>
 8006ab0:	9905      	ldr	r1, [sp, #20]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f002 fb50 	bl	8009158 <_Bfree>
 8006ab8:	4659      	mov	r1, fp
 8006aba:	4620      	mov	r0, r4
 8006abc:	f002 fb4c 	bl	8009158 <_Bfree>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f002 fb48 	bl	8009158 <_Bfree>
 8006ac8:	e609      	b.n	80066de <_strtod_l+0x646>
 8006aca:	f1b8 0f01 	cmp.w	r8, #1
 8006ace:	d103      	bne.n	8006ad8 <_strtod_l+0xa40>
 8006ad0:	f1b9 0f00 	cmp.w	r9, #0
 8006ad4:	f43f ad95 	beq.w	8006602 <_strtod_l+0x56a>
 8006ad8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006c30 <_strtod_l+0xb98>
 8006adc:	4f60      	ldr	r7, [pc, #384]	; (8006c60 <_strtod_l+0xbc8>)
 8006ade:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	e7ae      	b.n	8006a44 <_strtod_l+0x9ac>
 8006ae6:	4f5f      	ldr	r7, [pc, #380]	; (8006c64 <_strtod_l+0xbcc>)
 8006ae8:	2600      	movs	r6, #0
 8006aea:	e7a7      	b.n	8006a3c <_strtod_l+0x9a4>
 8006aec:	4b5d      	ldr	r3, [pc, #372]	; (8006c64 <_strtod_l+0xbcc>)
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	2200      	movs	r2, #0
 8006af4:	f7f9 fd90 	bl	8000618 <__aeabi_dmul>
 8006af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d09c      	beq.n	8006a3c <_strtod_l+0x9a4>
 8006b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006b06:	e79d      	b.n	8006a44 <_strtod_l+0x9ac>
 8006b08:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006c38 <_strtod_l+0xba0>
 8006b0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b10:	ec57 6b17 	vmov	r6, r7, d7
 8006b14:	e796      	b.n	8006a44 <_strtod_l+0x9ac>
 8006b16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	46ca      	mov	sl, r9
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1c2      	bne.n	8006aa8 <_strtod_l+0xa10>
 8006b22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b28:	0d1b      	lsrs	r3, r3, #20
 8006b2a:	051b      	lsls	r3, r3, #20
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d1bb      	bne.n	8006aa8 <_strtod_l+0xa10>
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7fa f8b8 	bl	8000ca8 <__aeabi_d2lz>
 8006b38:	f7f9 fd40 	bl	80005bc <__aeabi_l2d>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 fbb0 	bl	80002a8 <__aeabi_dsub>
 8006b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b4e:	ea43 0308 	orr.w	r3, r3, r8
 8006b52:	4313      	orrs	r3, r2
 8006b54:	4606      	mov	r6, r0
 8006b56:	460f      	mov	r7, r1
 8006b58:	d054      	beq.n	8006c04 <_strtod_l+0xb6c>
 8006b5a:	a339      	add	r3, pc, #228	; (adr r3, 8006c40 <_strtod_l+0xba8>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 ffcc 	bl	8000afc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f47f ace5 	bne.w	8006534 <_strtod_l+0x49c>
 8006b6a:	a337      	add	r3, pc, #220	; (adr r3, 8006c48 <_strtod_l+0xbb0>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ffe0 	bl	8000b38 <__aeabi_dcmpgt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d095      	beq.n	8006aa8 <_strtod_l+0xa10>
 8006b7c:	e4da      	b.n	8006534 <_strtod_l+0x49c>
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	b333      	cbz	r3, 8006bd0 <_strtod_l+0xb38>
 8006b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b88:	d822      	bhi.n	8006bd0 <_strtod_l+0xb38>
 8006b8a:	a331      	add	r3, pc, #196	; (adr r3, 8006c50 <_strtod_l+0xbb8>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 ffbc 	bl	8000b10 <__aeabi_dcmple>
 8006b98:	b1a0      	cbz	r0, 8006bc4 <_strtod_l+0xb2c>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f7fa f813 	bl	8000bc8 <__aeabi_d2uiz>
 8006ba2:	2801      	cmp	r0, #1
 8006ba4:	bf38      	it	cc
 8006ba6:	2001      	movcc	r0, #1
 8006ba8:	f7f9 fcbc 	bl	8000524 <__aeabi_ui2d>
 8006bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	bb23      	cbnz	r3, 8006bfe <_strtod_l+0xb66>
 8006bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bb8:	9010      	str	r0, [sp, #64]	; 0x40
 8006bba:	9311      	str	r3, [sp, #68]	; 0x44
 8006bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8006bd8:	eef0 0a68 	vmov.f32	s1, s17
 8006bdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006be0:	f002 fde6 	bl	80097b0 <__ulp>
 8006be4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006be8:	ec53 2b10 	vmov	r2, r3, d0
 8006bec:	f7f9 fd14 	bl	8000618 <__aeabi_dmul>
 8006bf0:	ec53 2b18 	vmov	r2, r3, d8
 8006bf4:	f7f9 fb5a 	bl	80002ac <__adddf3>
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4689      	mov	r9, r1
 8006bfc:	e78d      	b.n	8006b1a <_strtod_l+0xa82>
 8006bfe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006c02:	e7db      	b.n	8006bbc <_strtod_l+0xb24>
 8006c04:	a314      	add	r3, pc, #80	; (adr r3, 8006c58 <_strtod_l+0xbc0>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 ff77 	bl	8000afc <__aeabi_dcmplt>
 8006c0e:	e7b3      	b.n	8006b78 <_strtod_l+0xae0>
 8006c10:	2300      	movs	r3, #0
 8006c12:	930a      	str	r3, [sp, #40]	; 0x28
 8006c14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	f7ff ba7c 	b.w	8006116 <_strtod_l+0x7e>
 8006c1e:	2a65      	cmp	r2, #101	; 0x65
 8006c20:	f43f ab75 	beq.w	800630e <_strtod_l+0x276>
 8006c24:	2a45      	cmp	r2, #69	; 0x45
 8006c26:	f43f ab72 	beq.w	800630e <_strtod_l+0x276>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f7ff bbaa 	b.w	8006384 <_strtod_l+0x2ec>
 8006c30:	00000000 	.word	0x00000000
 8006c34:	bff00000 	.word	0xbff00000
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	3ff00000 	.word	0x3ff00000
 8006c40:	94a03595 	.word	0x94a03595
 8006c44:	3fdfffff 	.word	0x3fdfffff
 8006c48:	35afe535 	.word	0x35afe535
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	ffc00000 	.word	0xffc00000
 8006c54:	41dfffff 	.word	0x41dfffff
 8006c58:	94a03595 	.word	0x94a03595
 8006c5c:	3fcfffff 	.word	0x3fcfffff
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	3fe00000 	.word	0x3fe00000
 8006c68:	7ff00000 	.word	0x7ff00000
 8006c6c:	7fe00000 	.word	0x7fe00000
 8006c70:	7c9fffff 	.word	0x7c9fffff
 8006c74:	7fefffff 	.word	0x7fefffff

08006c78 <strtof>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006d40 <strtof+0xc8>
 8006c80:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <strtof+0xb4>)
 8006c82:	460a      	mov	r2, r1
 8006c84:	ed2d 8b02 	vpush	{d8}
 8006c88:	4601      	mov	r1, r0
 8006c8a:	f8d8 0000 	ldr.w	r0, [r8]
 8006c8e:	f7ff fa03 	bl	8006098 <_strtod_l>
 8006c92:	ec55 4b10 	vmov	r4, r5, d0
 8006c96:	ee10 2a10 	vmov	r2, s0
 8006c9a:	ee10 0a10 	vmov	r0, s0
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 ff53 	bl	8000b4c <__aeabi_dcmpun>
 8006ca6:	b190      	cbz	r0, 8006cce <strtof+0x56>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	4821      	ldr	r0, [pc, #132]	; (8006d30 <strtof+0xb8>)
 8006cac:	da09      	bge.n	8006cc2 <strtof+0x4a>
 8006cae:	f000 ff27 	bl	8007b00 <nanf>
 8006cb2:	eeb1 8a40 	vneg.f32	s16, s0
 8006cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8006cba:	ecbd 8b02 	vpop	{d8}
 8006cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc2:	ecbd 8b02 	vpop	{d8}
 8006cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cca:	f000 bf19 	b.w	8007b00 <nanf>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 ff99 	bl	8000c08 <__aeabi_d2f>
 8006cd6:	ee08 0a10 	vmov	s16, r0
 8006cda:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006d34 <strtof+0xbc>
 8006cde:	eeb0 7ac8 	vabs.f32	s14, s16
 8006ce2:	eeb4 7a67 	vcmp.f32	s14, s15
 8006ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cea:	dd11      	ble.n	8006d10 <strtof+0x98>
 8006cec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <strtof+0xc0>)
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 ff27 	bl	8000b4c <__aeabi_dcmpun>
 8006cfe:	b980      	cbnz	r0, 8006d22 <strtof+0xaa>
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <strtof+0xc0>)
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	4620      	mov	r0, r4
 8006d08:	4639      	mov	r1, r7
 8006d0a:	f7f9 ff01 	bl	8000b10 <__aeabi_dcmple>
 8006d0e:	b940      	cbnz	r0, 8006d22 <strtof+0xaa>
 8006d10:	ee18 3a10 	vmov	r3, s16
 8006d14:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006d18:	d1cd      	bne.n	8006cb6 <strtof+0x3e>
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <strtof+0xc4>)
 8006d1c:	402b      	ands	r3, r5
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c9      	beq.n	8006cb6 <strtof+0x3e>
 8006d22:	f8d8 3000 	ldr.w	r3, [r8]
 8006d26:	2222      	movs	r2, #34	; 0x22
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e7c4      	b.n	8006cb6 <strtof+0x3e>
 8006d2c:	20000018 	.word	0x20000018
 8006d30:	0800a980 	.word	0x0800a980
 8006d34:	7f7fffff 	.word	0x7f7fffff
 8006d38:	7fefffff 	.word	0x7fefffff
 8006d3c:	7ff00000 	.word	0x7ff00000
 8006d40:	200001d0 	.word	0x200001d0

08006d44 <_strtol_l.constprop.0>:
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4a:	d001      	beq.n	8006d50 <_strtol_l.constprop.0+0xc>
 8006d4c:	2b24      	cmp	r3, #36	; 0x24
 8006d4e:	d906      	bls.n	8006d5e <_strtol_l.constprop.0+0x1a>
 8006d50:	f000 fe88 	bl	8007a64 <__errno>
 8006d54:	2316      	movs	r3, #22
 8006d56:	6003      	str	r3, [r0, #0]
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e44 <_strtol_l.constprop.0+0x100>
 8006d62:	460d      	mov	r5, r1
 8006d64:	462e      	mov	r6, r5
 8006d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d6e:	f017 0708 	ands.w	r7, r7, #8
 8006d72:	d1f7      	bne.n	8006d64 <_strtol_l.constprop.0+0x20>
 8006d74:	2c2d      	cmp	r4, #45	; 0x2d
 8006d76:	d132      	bne.n	8006dde <_strtol_l.constprop.0+0x9a>
 8006d78:	782c      	ldrb	r4, [r5, #0]
 8006d7a:	2701      	movs	r7, #1
 8006d7c:	1cb5      	adds	r5, r6, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d05b      	beq.n	8006e3a <_strtol_l.constprop.0+0xf6>
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d109      	bne.n	8006d9a <_strtol_l.constprop.0+0x56>
 8006d86:	2c30      	cmp	r4, #48	; 0x30
 8006d88:	d107      	bne.n	8006d9a <_strtol_l.constprop.0+0x56>
 8006d8a:	782c      	ldrb	r4, [r5, #0]
 8006d8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d90:	2c58      	cmp	r4, #88	; 0x58
 8006d92:	d14d      	bne.n	8006e30 <_strtol_l.constprop.0+0xec>
 8006d94:	786c      	ldrb	r4, [r5, #1]
 8006d96:	2310      	movs	r3, #16
 8006d98:	3502      	adds	r5, #2
 8006d9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006da2:	f04f 0e00 	mov.w	lr, #0
 8006da6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006daa:	4676      	mov	r6, lr
 8006dac:	fb03 8a19 	mls	sl, r3, r9, r8
 8006db0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006db4:	f1bc 0f09 	cmp.w	ip, #9
 8006db8:	d816      	bhi.n	8006de8 <_strtol_l.constprop.0+0xa4>
 8006dba:	4664      	mov	r4, ip
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	dd24      	ble.n	8006e0a <_strtol_l.constprop.0+0xc6>
 8006dc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8006dc4:	d008      	beq.n	8006dd8 <_strtol_l.constprop.0+0x94>
 8006dc6:	45b1      	cmp	r9, r6
 8006dc8:	d31c      	bcc.n	8006e04 <_strtol_l.constprop.0+0xc0>
 8006dca:	d101      	bne.n	8006dd0 <_strtol_l.constprop.0+0x8c>
 8006dcc:	45a2      	cmp	sl, r4
 8006dce:	db19      	blt.n	8006e04 <_strtol_l.constprop.0+0xc0>
 8006dd0:	fb06 4603 	mla	r6, r6, r3, r4
 8006dd4:	f04f 0e01 	mov.w	lr, #1
 8006dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ddc:	e7e8      	b.n	8006db0 <_strtol_l.constprop.0+0x6c>
 8006dde:	2c2b      	cmp	r4, #43	; 0x2b
 8006de0:	bf04      	itt	eq
 8006de2:	782c      	ldrbeq	r4, [r5, #0]
 8006de4:	1cb5      	addeq	r5, r6, #2
 8006de6:	e7ca      	b.n	8006d7e <_strtol_l.constprop.0+0x3a>
 8006de8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006dec:	f1bc 0f19 	cmp.w	ip, #25
 8006df0:	d801      	bhi.n	8006df6 <_strtol_l.constprop.0+0xb2>
 8006df2:	3c37      	subs	r4, #55	; 0x37
 8006df4:	e7e2      	b.n	8006dbc <_strtol_l.constprop.0+0x78>
 8006df6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006dfa:	f1bc 0f19 	cmp.w	ip, #25
 8006dfe:	d804      	bhi.n	8006e0a <_strtol_l.constprop.0+0xc6>
 8006e00:	3c57      	subs	r4, #87	; 0x57
 8006e02:	e7db      	b.n	8006dbc <_strtol_l.constprop.0+0x78>
 8006e04:	f04f 3eff 	mov.w	lr, #4294967295
 8006e08:	e7e6      	b.n	8006dd8 <_strtol_l.constprop.0+0x94>
 8006e0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e0e:	d105      	bne.n	8006e1c <_strtol_l.constprop.0+0xd8>
 8006e10:	2322      	movs	r3, #34	; 0x22
 8006e12:	6003      	str	r3, [r0, #0]
 8006e14:	4646      	mov	r6, r8
 8006e16:	b942      	cbnz	r2, 8006e2a <_strtol_l.constprop.0+0xe6>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	e79e      	b.n	8006d5a <_strtol_l.constprop.0+0x16>
 8006e1c:	b107      	cbz	r7, 8006e20 <_strtol_l.constprop.0+0xdc>
 8006e1e:	4276      	negs	r6, r6
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d0f9      	beq.n	8006e18 <_strtol_l.constprop.0+0xd4>
 8006e24:	f1be 0f00 	cmp.w	lr, #0
 8006e28:	d000      	beq.n	8006e2c <_strtol_l.constprop.0+0xe8>
 8006e2a:	1e69      	subs	r1, r5, #1
 8006e2c:	6011      	str	r1, [r2, #0]
 8006e2e:	e7f3      	b.n	8006e18 <_strtol_l.constprop.0+0xd4>
 8006e30:	2430      	movs	r4, #48	; 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1b1      	bne.n	8006d9a <_strtol_l.constprop.0+0x56>
 8006e36:	2308      	movs	r3, #8
 8006e38:	e7af      	b.n	8006d9a <_strtol_l.constprop.0+0x56>
 8006e3a:	2c30      	cmp	r4, #48	; 0x30
 8006e3c:	d0a5      	beq.n	8006d8a <_strtol_l.constprop.0+0x46>
 8006e3e:	230a      	movs	r3, #10
 8006e40:	e7ab      	b.n	8006d9a <_strtol_l.constprop.0+0x56>
 8006e42:	bf00      	nop
 8006e44:	0800a5b1 	.word	0x0800a5b1

08006e48 <strtol>:
 8006e48:	4613      	mov	r3, r2
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4802      	ldr	r0, [pc, #8]	; (8006e58 <strtol+0x10>)
 8006e50:	6800      	ldr	r0, [r0, #0]
 8006e52:	f7ff bf77 	b.w	8006d44 <_strtol_l.constprop.0>
 8006e56:	bf00      	nop
 8006e58:	200001d0 	.word	0x200001d0

08006e5c <__cvt>:
 8006e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	ec55 4b10 	vmov	r4, r5, d0
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	460e      	mov	r6, r1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	bfbb      	ittet	lt
 8006e6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e72:	461d      	movlt	r5, r3
 8006e74:	2300      	movge	r3, #0
 8006e76:	232d      	movlt	r3, #45	; 0x2d
 8006e78:	700b      	strb	r3, [r1, #0]
 8006e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e80:	4691      	mov	r9, r2
 8006e82:	f023 0820 	bic.w	r8, r3, #32
 8006e86:	bfbc      	itt	lt
 8006e88:	4622      	movlt	r2, r4
 8006e8a:	4614      	movlt	r4, r2
 8006e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e90:	d005      	beq.n	8006e9e <__cvt+0x42>
 8006e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e96:	d100      	bne.n	8006e9a <__cvt+0x3e>
 8006e98:	3601      	adds	r6, #1
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	e000      	b.n	8006ea0 <__cvt+0x44>
 8006e9e:	2103      	movs	r1, #3
 8006ea0:	ab03      	add	r3, sp, #12
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	ab02      	add	r3, sp, #8
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	ec45 4b10 	vmov	d0, r4, r5
 8006eac:	4653      	mov	r3, sl
 8006eae:	4632      	mov	r2, r6
 8006eb0:	f000 feb6 	bl	8007c20 <_dtoa_r>
 8006eb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eb8:	4607      	mov	r7, r0
 8006eba:	d102      	bne.n	8006ec2 <__cvt+0x66>
 8006ebc:	f019 0f01 	tst.w	r9, #1
 8006ec0:	d022      	beq.n	8006f08 <__cvt+0xac>
 8006ec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec6:	eb07 0906 	add.w	r9, r7, r6
 8006eca:	d110      	bne.n	8006eee <__cvt+0x92>
 8006ecc:	783b      	ldrb	r3, [r7, #0]
 8006ece:	2b30      	cmp	r3, #48	; 0x30
 8006ed0:	d10a      	bne.n	8006ee8 <__cvt+0x8c>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fe05 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ede:	b918      	cbnz	r0, 8006ee8 <__cvt+0x8c>
 8006ee0:	f1c6 0601 	rsb	r6, r6, #1
 8006ee4:	f8ca 6000 	str.w	r6, [sl]
 8006ee8:	f8da 3000 	ldr.w	r3, [sl]
 8006eec:	4499      	add	r9, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006efa:	b108      	cbz	r0, 8006f00 <__cvt+0xa4>
 8006efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f00:	2230      	movs	r2, #48	; 0x30
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	454b      	cmp	r3, r9
 8006f06:	d307      	bcc.n	8006f18 <__cvt+0xbc>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f0c:	1bdb      	subs	r3, r3, r7
 8006f0e:	4638      	mov	r0, r7
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	b004      	add	sp, #16
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	9103      	str	r1, [sp, #12]
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e7f0      	b.n	8006f02 <__cvt+0xa6>

08006f20 <__exponent>:
 8006f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f22:	4603      	mov	r3, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	bfb8      	it	lt
 8006f28:	4249      	neglt	r1, r1
 8006f2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f2e:	bfb4      	ite	lt
 8006f30:	222d      	movlt	r2, #45	; 0x2d
 8006f32:	222b      	movge	r2, #43	; 0x2b
 8006f34:	2909      	cmp	r1, #9
 8006f36:	7042      	strb	r2, [r0, #1]
 8006f38:	dd2a      	ble.n	8006f90 <__exponent+0x70>
 8006f3a:	f10d 0207 	add.w	r2, sp, #7
 8006f3e:	4617      	mov	r7, r2
 8006f40:	260a      	movs	r6, #10
 8006f42:	4694      	mov	ip, r2
 8006f44:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f48:	fb06 1415 	mls	r4, r6, r5, r1
 8006f4c:	3430      	adds	r4, #48	; 0x30
 8006f4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f52:	460c      	mov	r4, r1
 8006f54:	2c63      	cmp	r4, #99	; 0x63
 8006f56:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	dcf1      	bgt.n	8006f42 <__exponent+0x22>
 8006f5e:	3130      	adds	r1, #48	; 0x30
 8006f60:	f1ac 0402 	sub.w	r4, ip, #2
 8006f64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f68:	1c41      	adds	r1, r0, #1
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	42ba      	cmp	r2, r7
 8006f6e:	d30a      	bcc.n	8006f86 <__exponent+0x66>
 8006f70:	f10d 0209 	add.w	r2, sp, #9
 8006f74:	eba2 020c 	sub.w	r2, r2, ip
 8006f78:	42bc      	cmp	r4, r7
 8006f7a:	bf88      	it	hi
 8006f7c:	2200      	movhi	r2, #0
 8006f7e:	4413      	add	r3, r2
 8006f80:	1a18      	subs	r0, r3, r0
 8006f82:	b003      	add	sp, #12
 8006f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f8e:	e7ed      	b.n	8006f6c <__exponent+0x4c>
 8006f90:	2330      	movs	r3, #48	; 0x30
 8006f92:	3130      	adds	r1, #48	; 0x30
 8006f94:	7083      	strb	r3, [r0, #2]
 8006f96:	70c1      	strb	r1, [r0, #3]
 8006f98:	1d03      	adds	r3, r0, #4
 8006f9a:	e7f1      	b.n	8006f80 <__exponent+0x60>

08006f9c <_printf_float>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	ed2d 8b02 	vpush	{d8}
 8006fa4:	b08d      	sub	sp, #52	; 0x34
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	f000 fd0d 	bl	80079d0 <_localeconv_r>
 8006fb6:	f8d0 a000 	ldr.w	sl, [r0]
 8006fba:	4650      	mov	r0, sl
 8006fbc:	f7f9 f968 	bl	8000290 <strlen>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fd0:	3307      	adds	r3, #7
 8006fd2:	f023 0307 	bic.w	r3, r3, #7
 8006fd6:	f103 0208 	add.w	r2, r3, #8
 8006fda:	f8c8 2000 	str.w	r2, [r8]
 8006fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe6:	9307      	str	r3, [sp, #28]
 8006fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fec:	ee08 0a10 	vmov	s16, r0
 8006ff0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ff8:	4b9e      	ldr	r3, [pc, #632]	; (8007274 <_printf_float+0x2d8>)
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffe:	f7f9 fda5 	bl	8000b4c <__aeabi_dcmpun>
 8007002:	bb88      	cbnz	r0, 8007068 <_printf_float+0xcc>
 8007004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007008:	4b9a      	ldr	r3, [pc, #616]	; (8007274 <_printf_float+0x2d8>)
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	f7f9 fd7f 	bl	8000b10 <__aeabi_dcmple>
 8007012:	bb48      	cbnz	r0, 8007068 <_printf_float+0xcc>
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	4640      	mov	r0, r8
 800701a:	4649      	mov	r1, r9
 800701c:	f7f9 fd6e 	bl	8000afc <__aeabi_dcmplt>
 8007020:	b110      	cbz	r0, 8007028 <_printf_float+0x8c>
 8007022:	232d      	movs	r3, #45	; 0x2d
 8007024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007028:	4a93      	ldr	r2, [pc, #588]	; (8007278 <_printf_float+0x2dc>)
 800702a:	4b94      	ldr	r3, [pc, #592]	; (800727c <_printf_float+0x2e0>)
 800702c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007030:	bf94      	ite	ls
 8007032:	4690      	movls	r8, r2
 8007034:	4698      	movhi	r8, r3
 8007036:	2303      	movs	r3, #3
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	f04f 0900 	mov.w	r9, #0
 8007046:	9700      	str	r7, [sp, #0]
 8007048:	4633      	mov	r3, r6
 800704a:	aa0b      	add	r2, sp, #44	; 0x2c
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f9da 	bl	8007408 <_printf_common>
 8007054:	3001      	adds	r0, #1
 8007056:	f040 8090 	bne.w	800717a <_printf_float+0x1de>
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	b00d      	add	sp, #52	; 0x34
 8007060:	ecbd 8b02 	vpop	{d8}
 8007064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 fd6c 	bl	8000b4c <__aeabi_dcmpun>
 8007074:	b140      	cbz	r0, 8007088 <_printf_float+0xec>
 8007076:	464b      	mov	r3, r9
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfbc      	itt	lt
 800707c:	232d      	movlt	r3, #45	; 0x2d
 800707e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007082:	4a7f      	ldr	r2, [pc, #508]	; (8007280 <_printf_float+0x2e4>)
 8007084:	4b7f      	ldr	r3, [pc, #508]	; (8007284 <_printf_float+0x2e8>)
 8007086:	e7d1      	b.n	800702c <_printf_float+0x90>
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800708e:	9206      	str	r2, [sp, #24]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	d13f      	bne.n	8007114 <_printf_float+0x178>
 8007094:	2306      	movs	r3, #6
 8007096:	6063      	str	r3, [r4, #4]
 8007098:	9b05      	ldr	r3, [sp, #20]
 800709a:	6861      	ldr	r1, [r4, #4]
 800709c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070a0:	2300      	movs	r3, #0
 80070a2:	9303      	str	r3, [sp, #12]
 80070a4:	ab0a      	add	r3, sp, #40	; 0x28
 80070a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070aa:	ab09      	add	r3, sp, #36	; 0x24
 80070ac:	ec49 8b10 	vmov	d0, r8, r9
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070b8:	4628      	mov	r0, r5
 80070ba:	f7ff fecf 	bl	8006e5c <__cvt>
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c2:	2b47      	cmp	r3, #71	; 0x47
 80070c4:	4680      	mov	r8, r0
 80070c6:	d108      	bne.n	80070da <_printf_float+0x13e>
 80070c8:	1cc8      	adds	r0, r1, #3
 80070ca:	db02      	blt.n	80070d2 <_printf_float+0x136>
 80070cc:	6863      	ldr	r3, [r4, #4]
 80070ce:	4299      	cmp	r1, r3
 80070d0:	dd41      	ble.n	8007156 <_printf_float+0x1ba>
 80070d2:	f1ab 0302 	sub.w	r3, fp, #2
 80070d6:	fa5f fb83 	uxtb.w	fp, r3
 80070da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070de:	d820      	bhi.n	8007122 <_printf_float+0x186>
 80070e0:	3901      	subs	r1, #1
 80070e2:	465a      	mov	r2, fp
 80070e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070e8:	9109      	str	r1, [sp, #36]	; 0x24
 80070ea:	f7ff ff19 	bl	8006f20 <__exponent>
 80070ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f0:	1813      	adds	r3, r2, r0
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	4681      	mov	r9, r0
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	dc02      	bgt.n	8007100 <_printf_float+0x164>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	07d2      	lsls	r2, r2, #31
 80070fe:	d501      	bpl.n	8007104 <_printf_float+0x168>
 8007100:	3301      	adds	r3, #1
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007108:	2b00      	cmp	r3, #0
 800710a:	d09c      	beq.n	8007046 <_printf_float+0xaa>
 800710c:	232d      	movs	r3, #45	; 0x2d
 800710e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007112:	e798      	b.n	8007046 <_printf_float+0xaa>
 8007114:	9a06      	ldr	r2, [sp, #24]
 8007116:	2a47      	cmp	r2, #71	; 0x47
 8007118:	d1be      	bne.n	8007098 <_printf_float+0xfc>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1bc      	bne.n	8007098 <_printf_float+0xfc>
 800711e:	2301      	movs	r3, #1
 8007120:	e7b9      	b.n	8007096 <_printf_float+0xfa>
 8007122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007126:	d118      	bne.n	800715a <_printf_float+0x1be>
 8007128:	2900      	cmp	r1, #0
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	dd0b      	ble.n	8007146 <_printf_float+0x1aa>
 800712e:	6121      	str	r1, [r4, #16]
 8007130:	b913      	cbnz	r3, 8007138 <_printf_float+0x19c>
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	07d0      	lsls	r0, r2, #31
 8007136:	d502      	bpl.n	800713e <_printf_float+0x1a2>
 8007138:	3301      	adds	r3, #1
 800713a:	440b      	add	r3, r1
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007140:	f04f 0900 	mov.w	r9, #0
 8007144:	e7de      	b.n	8007104 <_printf_float+0x168>
 8007146:	b913      	cbnz	r3, 800714e <_printf_float+0x1b2>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	07d2      	lsls	r2, r2, #31
 800714c:	d501      	bpl.n	8007152 <_printf_float+0x1b6>
 800714e:	3302      	adds	r3, #2
 8007150:	e7f4      	b.n	800713c <_printf_float+0x1a0>
 8007152:	2301      	movs	r3, #1
 8007154:	e7f2      	b.n	800713c <_printf_float+0x1a0>
 8007156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800715a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715c:	4299      	cmp	r1, r3
 800715e:	db05      	blt.n	800716c <_printf_float+0x1d0>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	6121      	str	r1, [r4, #16]
 8007164:	07d8      	lsls	r0, r3, #31
 8007166:	d5ea      	bpl.n	800713e <_printf_float+0x1a2>
 8007168:	1c4b      	adds	r3, r1, #1
 800716a:	e7e7      	b.n	800713c <_printf_float+0x1a0>
 800716c:	2900      	cmp	r1, #0
 800716e:	bfd4      	ite	le
 8007170:	f1c1 0202 	rsble	r2, r1, #2
 8007174:	2201      	movgt	r2, #1
 8007176:	4413      	add	r3, r2
 8007178:	e7e0      	b.n	800713c <_printf_float+0x1a0>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	055a      	lsls	r2, r3, #21
 800717e:	d407      	bmi.n	8007190 <_printf_float+0x1f4>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	4642      	mov	r2, r8
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	d12c      	bne.n	80071e8 <_printf_float+0x24c>
 800718e:	e764      	b.n	800705a <_printf_float+0xbe>
 8007190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007194:	f240 80e0 	bls.w	8007358 <_printf_float+0x3bc>
 8007198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800719c:	2200      	movs	r2, #0
 800719e:	2300      	movs	r3, #0
 80071a0:	f7f9 fca2 	bl	8000ae8 <__aeabi_dcmpeq>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d034      	beq.n	8007212 <_printf_float+0x276>
 80071a8:	4a37      	ldr	r2, [pc, #220]	; (8007288 <_printf_float+0x2ec>)
 80071aa:	2301      	movs	r3, #1
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f af51 	beq.w	800705a <_printf_float+0xbe>
 80071b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071bc:	429a      	cmp	r2, r3
 80071be:	db02      	blt.n	80071c6 <_printf_float+0x22a>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07d8      	lsls	r0, r3, #31
 80071c4:	d510      	bpl.n	80071e8 <_printf_float+0x24c>
 80071c6:	ee18 3a10 	vmov	r3, s16
 80071ca:	4652      	mov	r2, sl
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	f43f af41 	beq.w	800705a <_printf_float+0xbe>
 80071d8:	f04f 0800 	mov.w	r8, #0
 80071dc:	f104 091a 	add.w	r9, r4, #26
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4543      	cmp	r3, r8
 80071e6:	dc09      	bgt.n	80071fc <_printf_float+0x260>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	079b      	lsls	r3, r3, #30
 80071ec:	f100 8107 	bmi.w	80073fe <_printf_float+0x462>
 80071f0:	68e0      	ldr	r0, [r4, #12]
 80071f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f4:	4298      	cmp	r0, r3
 80071f6:	bfb8      	it	lt
 80071f8:	4618      	movlt	r0, r3
 80071fa:	e730      	b.n	800705e <_printf_float+0xc2>
 80071fc:	2301      	movs	r3, #1
 80071fe:	464a      	mov	r2, r9
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	f43f af27 	beq.w	800705a <_printf_float+0xbe>
 800720c:	f108 0801 	add.w	r8, r8, #1
 8007210:	e7e6      	b.n	80071e0 <_printf_float+0x244>
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc39      	bgt.n	800728c <_printf_float+0x2f0>
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <_printf_float+0x2ec>)
 800721a:	2301      	movs	r3, #1
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f af19 	beq.w	800705a <_printf_float+0xbe>
 8007228:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800722c:	4313      	orrs	r3, r2
 800722e:	d102      	bne.n	8007236 <_printf_float+0x29a>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	d5d8      	bpl.n	80071e8 <_printf_float+0x24c>
 8007236:	ee18 3a10 	vmov	r3, s16
 800723a:	4652      	mov	r2, sl
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af09 	beq.w	800705a <_printf_float+0xbe>
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	f104 0a1a 	add.w	sl, r4, #26
 8007250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007252:	425b      	negs	r3, r3
 8007254:	454b      	cmp	r3, r9
 8007256:	dc01      	bgt.n	800725c <_printf_float+0x2c0>
 8007258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725a:	e792      	b.n	8007182 <_printf_float+0x1e6>
 800725c:	2301      	movs	r3, #1
 800725e:	4652      	mov	r2, sl
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	f43f aef7 	beq.w	800705a <_printf_float+0xbe>
 800726c:	f109 0901 	add.w	r9, r9, #1
 8007270:	e7ee      	b.n	8007250 <_printf_float+0x2b4>
 8007272:	bf00      	nop
 8007274:	7fefffff 	.word	0x7fefffff
 8007278:	0800a6b1 	.word	0x0800a6b1
 800727c:	0800a6b5 	.word	0x0800a6b5
 8007280:	0800a6b9 	.word	0x0800a6b9
 8007284:	0800a6bd 	.word	0x0800a6bd
 8007288:	0800a6c1 	.word	0x0800a6c1
 800728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800728e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007290:	429a      	cmp	r2, r3
 8007292:	bfa8      	it	ge
 8007294:	461a      	movge	r2, r3
 8007296:	2a00      	cmp	r2, #0
 8007298:	4691      	mov	r9, r2
 800729a:	dc37      	bgt.n	800730c <_printf_float+0x370>
 800729c:	f04f 0b00 	mov.w	fp, #0
 80072a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072a4:	f104 021a 	add.w	r2, r4, #26
 80072a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	eba3 0309 	sub.w	r3, r3, r9
 80072b0:	455b      	cmp	r3, fp
 80072b2:	dc33      	bgt.n	800731c <_printf_float+0x380>
 80072b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b8:	429a      	cmp	r2, r3
 80072ba:	db3b      	blt.n	8007334 <_printf_float+0x398>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	07da      	lsls	r2, r3, #31
 80072c0:	d438      	bmi.n	8007334 <_printf_float+0x398>
 80072c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072c6:	eba2 0903 	sub.w	r9, r2, r3
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	4591      	cmp	r9, r2
 80072d0:	bfa8      	it	ge
 80072d2:	4691      	movge	r9, r2
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	dc35      	bgt.n	8007346 <_printf_float+0x3aa>
 80072da:	f04f 0800 	mov.w	r8, #0
 80072de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e2:	f104 0a1a 	add.w	sl, r4, #26
 80072e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	eba3 0309 	sub.w	r3, r3, r9
 80072f0:	4543      	cmp	r3, r8
 80072f2:	f77f af79 	ble.w	80071e8 <_printf_float+0x24c>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4652      	mov	r2, sl
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f aeaa 	beq.w	800705a <_printf_float+0xbe>
 8007306:	f108 0801 	add.w	r8, r8, #1
 800730a:	e7ec      	b.n	80072e6 <_printf_float+0x34a>
 800730c:	4613      	mov	r3, r2
 800730e:	4631      	mov	r1, r6
 8007310:	4642      	mov	r2, r8
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	d1c0      	bne.n	800729c <_printf_float+0x300>
 800731a:	e69e      	b.n	800705a <_printf_float+0xbe>
 800731c:	2301      	movs	r3, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	9205      	str	r2, [sp, #20]
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f ae97 	beq.w	800705a <_printf_float+0xbe>
 800732c:	9a05      	ldr	r2, [sp, #20]
 800732e:	f10b 0b01 	add.w	fp, fp, #1
 8007332:	e7b9      	b.n	80072a8 <_printf_float+0x30c>
 8007334:	ee18 3a10 	vmov	r3, s16
 8007338:	4652      	mov	r2, sl
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	47b8      	blx	r7
 8007340:	3001      	adds	r0, #1
 8007342:	d1be      	bne.n	80072c2 <_printf_float+0x326>
 8007344:	e689      	b.n	800705a <_printf_float+0xbe>
 8007346:	9a05      	ldr	r2, [sp, #20]
 8007348:	464b      	mov	r3, r9
 800734a:	4442      	add	r2, r8
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	d1c1      	bne.n	80072da <_printf_float+0x33e>
 8007356:	e680      	b.n	800705a <_printf_float+0xbe>
 8007358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735a:	2a01      	cmp	r2, #1
 800735c:	dc01      	bgt.n	8007362 <_printf_float+0x3c6>
 800735e:	07db      	lsls	r3, r3, #31
 8007360:	d53a      	bpl.n	80073d8 <_printf_float+0x43c>
 8007362:	2301      	movs	r3, #1
 8007364:	4642      	mov	r2, r8
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f ae74 	beq.w	800705a <_printf_float+0xbe>
 8007372:	ee18 3a10 	vmov	r3, s16
 8007376:	4652      	mov	r2, sl
 8007378:	4631      	mov	r1, r6
 800737a:	4628      	mov	r0, r5
 800737c:	47b8      	blx	r7
 800737e:	3001      	adds	r0, #1
 8007380:	f43f ae6b 	beq.w	800705a <_printf_float+0xbe>
 8007384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007390:	f7f9 fbaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8007394:	b9d8      	cbnz	r0, 80073ce <_printf_float+0x432>
 8007396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800739a:	f108 0201 	add.w	r2, r8, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d10e      	bne.n	80073c6 <_printf_float+0x42a>
 80073a8:	e657      	b.n	800705a <_printf_float+0xbe>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4652      	mov	r2, sl
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae50 	beq.w	800705a <_printf_float+0xbe>
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4543      	cmp	r3, r8
 80073c4:	dcf1      	bgt.n	80073aa <_printf_float+0x40e>
 80073c6:	464b      	mov	r3, r9
 80073c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073cc:	e6da      	b.n	8007184 <_printf_float+0x1e8>
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	f104 0a1a 	add.w	sl, r4, #26
 80073d6:	e7f2      	b.n	80073be <_printf_float+0x422>
 80073d8:	2301      	movs	r3, #1
 80073da:	4642      	mov	r2, r8
 80073dc:	e7df      	b.n	800739e <_printf_float+0x402>
 80073de:	2301      	movs	r3, #1
 80073e0:	464a      	mov	r2, r9
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae36 	beq.w	800705a <_printf_float+0xbe>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	4543      	cmp	r3, r8
 80073fa:	dcf0      	bgt.n	80073de <_printf_float+0x442>
 80073fc:	e6f8      	b.n	80071f0 <_printf_float+0x254>
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	f104 0919 	add.w	r9, r4, #25
 8007406:	e7f4      	b.n	80073f2 <_printf_float+0x456>

08007408 <_printf_common>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	4616      	mov	r6, r2
 800740e:	4699      	mov	r9, r3
 8007410:	688a      	ldr	r2, [r1, #8]
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007418:	4293      	cmp	r3, r2
 800741a:	bfb8      	it	lt
 800741c:	4613      	movlt	r3, r2
 800741e:	6033      	str	r3, [r6, #0]
 8007420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007424:	4607      	mov	r7, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b10a      	cbz	r2, 800742e <_printf_common+0x26>
 800742a:	3301      	adds	r3, #1
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	0699      	lsls	r1, r3, #26
 8007432:	bf42      	ittt	mi
 8007434:	6833      	ldrmi	r3, [r6, #0]
 8007436:	3302      	addmi	r3, #2
 8007438:	6033      	strmi	r3, [r6, #0]
 800743a:	6825      	ldr	r5, [r4, #0]
 800743c:	f015 0506 	ands.w	r5, r5, #6
 8007440:	d106      	bne.n	8007450 <_printf_common+0x48>
 8007442:	f104 0a19 	add.w	sl, r4, #25
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	6832      	ldr	r2, [r6, #0]
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	42ab      	cmp	r3, r5
 800744e:	dc26      	bgt.n	800749e <_printf_common+0x96>
 8007450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007454:	1e13      	subs	r3, r2, #0
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	bf18      	it	ne
 800745a:	2301      	movne	r3, #1
 800745c:	0692      	lsls	r2, r2, #26
 800745e:	d42b      	bmi.n	80074b8 <_printf_common+0xb0>
 8007460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007464:	4649      	mov	r1, r9
 8007466:	4638      	mov	r0, r7
 8007468:	47c0      	blx	r8
 800746a:	3001      	adds	r0, #1
 800746c:	d01e      	beq.n	80074ac <_printf_common+0xa4>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	f003 0306 	and.w	r3, r3, #6
 8007476:	2b04      	cmp	r3, #4
 8007478:	bf02      	ittt	eq
 800747a:	68e5      	ldreq	r5, [r4, #12]
 800747c:	6833      	ldreq	r3, [r6, #0]
 800747e:	1aed      	subeq	r5, r5, r3
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	bf0c      	ite	eq
 8007484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007488:	2500      	movne	r5, #0
 800748a:	4293      	cmp	r3, r2
 800748c:	bfc4      	itt	gt
 800748e:	1a9b      	subgt	r3, r3, r2
 8007490:	18ed      	addgt	r5, r5, r3
 8007492:	2600      	movs	r6, #0
 8007494:	341a      	adds	r4, #26
 8007496:	42b5      	cmp	r5, r6
 8007498:	d11a      	bne.n	80074d0 <_printf_common+0xc8>
 800749a:	2000      	movs	r0, #0
 800749c:	e008      	b.n	80074b0 <_printf_common+0xa8>
 800749e:	2301      	movs	r3, #1
 80074a0:	4652      	mov	r2, sl
 80074a2:	4649      	mov	r1, r9
 80074a4:	4638      	mov	r0, r7
 80074a6:	47c0      	blx	r8
 80074a8:	3001      	adds	r0, #1
 80074aa:	d103      	bne.n	80074b4 <_printf_common+0xac>
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b4:	3501      	adds	r5, #1
 80074b6:	e7c6      	b.n	8007446 <_printf_common+0x3e>
 80074b8:	18e1      	adds	r1, r4, r3
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	2030      	movs	r0, #48	; 0x30
 80074be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074c2:	4422      	add	r2, r4
 80074c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074cc:	3302      	adds	r3, #2
 80074ce:	e7c7      	b.n	8007460 <_printf_common+0x58>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4622      	mov	r2, r4
 80074d4:	4649      	mov	r1, r9
 80074d6:	4638      	mov	r0, r7
 80074d8:	47c0      	blx	r8
 80074da:	3001      	adds	r0, #1
 80074dc:	d0e6      	beq.n	80074ac <_printf_common+0xa4>
 80074de:	3601      	adds	r6, #1
 80074e0:	e7d9      	b.n	8007496 <_printf_common+0x8e>
	...

080074e4 <_printf_i>:
 80074e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	7e0f      	ldrb	r7, [r1, #24]
 80074ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074ec:	2f78      	cmp	r7, #120	; 0x78
 80074ee:	4691      	mov	r9, r2
 80074f0:	4680      	mov	r8, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	469a      	mov	sl, r3
 80074f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074fa:	d807      	bhi.n	800750c <_printf_i+0x28>
 80074fc:	2f62      	cmp	r7, #98	; 0x62
 80074fe:	d80a      	bhi.n	8007516 <_printf_i+0x32>
 8007500:	2f00      	cmp	r7, #0
 8007502:	f000 80d4 	beq.w	80076ae <_printf_i+0x1ca>
 8007506:	2f58      	cmp	r7, #88	; 0x58
 8007508:	f000 80c0 	beq.w	800768c <_printf_i+0x1a8>
 800750c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007514:	e03a      	b.n	800758c <_printf_i+0xa8>
 8007516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800751a:	2b15      	cmp	r3, #21
 800751c:	d8f6      	bhi.n	800750c <_printf_i+0x28>
 800751e:	a101      	add	r1, pc, #4	; (adr r1, 8007524 <_printf_i+0x40>)
 8007520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007524:	0800757d 	.word	0x0800757d
 8007528:	08007591 	.word	0x08007591
 800752c:	0800750d 	.word	0x0800750d
 8007530:	0800750d 	.word	0x0800750d
 8007534:	0800750d 	.word	0x0800750d
 8007538:	0800750d 	.word	0x0800750d
 800753c:	08007591 	.word	0x08007591
 8007540:	0800750d 	.word	0x0800750d
 8007544:	0800750d 	.word	0x0800750d
 8007548:	0800750d 	.word	0x0800750d
 800754c:	0800750d 	.word	0x0800750d
 8007550:	08007695 	.word	0x08007695
 8007554:	080075bd 	.word	0x080075bd
 8007558:	0800764f 	.word	0x0800764f
 800755c:	0800750d 	.word	0x0800750d
 8007560:	0800750d 	.word	0x0800750d
 8007564:	080076b7 	.word	0x080076b7
 8007568:	0800750d 	.word	0x0800750d
 800756c:	080075bd 	.word	0x080075bd
 8007570:	0800750d 	.word	0x0800750d
 8007574:	0800750d 	.word	0x0800750d
 8007578:	08007657 	.word	0x08007657
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	1d1a      	adds	r2, r3, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	602a      	str	r2, [r5, #0]
 8007584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800758c:	2301      	movs	r3, #1
 800758e:	e09f      	b.n	80076d0 <_printf_i+0x1ec>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	0607      	lsls	r7, r0, #24
 8007596:	f103 0104 	add.w	r1, r3, #4
 800759a:	6029      	str	r1, [r5, #0]
 800759c:	d501      	bpl.n	80075a2 <_printf_i+0xbe>
 800759e:	681e      	ldr	r6, [r3, #0]
 80075a0:	e003      	b.n	80075aa <_printf_i+0xc6>
 80075a2:	0646      	lsls	r6, r0, #25
 80075a4:	d5fb      	bpl.n	800759e <_printf_i+0xba>
 80075a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	da03      	bge.n	80075b6 <_printf_i+0xd2>
 80075ae:	232d      	movs	r3, #45	; 0x2d
 80075b0:	4276      	negs	r6, r6
 80075b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b6:	485a      	ldr	r0, [pc, #360]	; (8007720 <_printf_i+0x23c>)
 80075b8:	230a      	movs	r3, #10
 80075ba:	e012      	b.n	80075e2 <_printf_i+0xfe>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	1d19      	adds	r1, r3, #4
 80075c2:	6029      	str	r1, [r5, #0]
 80075c4:	0605      	lsls	r5, r0, #24
 80075c6:	d501      	bpl.n	80075cc <_printf_i+0xe8>
 80075c8:	681e      	ldr	r6, [r3, #0]
 80075ca:	e002      	b.n	80075d2 <_printf_i+0xee>
 80075cc:	0641      	lsls	r1, r0, #25
 80075ce:	d5fb      	bpl.n	80075c8 <_printf_i+0xe4>
 80075d0:	881e      	ldrh	r6, [r3, #0]
 80075d2:	4853      	ldr	r0, [pc, #332]	; (8007720 <_printf_i+0x23c>)
 80075d4:	2f6f      	cmp	r7, #111	; 0x6f
 80075d6:	bf0c      	ite	eq
 80075d8:	2308      	moveq	r3, #8
 80075da:	230a      	movne	r3, #10
 80075dc:	2100      	movs	r1, #0
 80075de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075e2:	6865      	ldr	r5, [r4, #4]
 80075e4:	60a5      	str	r5, [r4, #8]
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	bfa2      	ittt	ge
 80075ea:	6821      	ldrge	r1, [r4, #0]
 80075ec:	f021 0104 	bicge.w	r1, r1, #4
 80075f0:	6021      	strge	r1, [r4, #0]
 80075f2:	b90e      	cbnz	r6, 80075f8 <_printf_i+0x114>
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	d04b      	beq.n	8007690 <_printf_i+0x1ac>
 80075f8:	4615      	mov	r5, r2
 80075fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80075fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007602:	5dc7      	ldrb	r7, [r0, r7]
 8007604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007608:	4637      	mov	r7, r6
 800760a:	42bb      	cmp	r3, r7
 800760c:	460e      	mov	r6, r1
 800760e:	d9f4      	bls.n	80075fa <_printf_i+0x116>
 8007610:	2b08      	cmp	r3, #8
 8007612:	d10b      	bne.n	800762c <_printf_i+0x148>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07de      	lsls	r6, r3, #31
 8007618:	d508      	bpl.n	800762c <_printf_i+0x148>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	6861      	ldr	r1, [r4, #4]
 800761e:	4299      	cmp	r1, r3
 8007620:	bfde      	ittt	le
 8007622:	2330      	movle	r3, #48	; 0x30
 8007624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800762c:	1b52      	subs	r2, r2, r5
 800762e:	6122      	str	r2, [r4, #16]
 8007630:	f8cd a000 	str.w	sl, [sp]
 8007634:	464b      	mov	r3, r9
 8007636:	aa03      	add	r2, sp, #12
 8007638:	4621      	mov	r1, r4
 800763a:	4640      	mov	r0, r8
 800763c:	f7ff fee4 	bl	8007408 <_printf_common>
 8007640:	3001      	adds	r0, #1
 8007642:	d14a      	bne.n	80076da <_printf_i+0x1f6>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	b004      	add	sp, #16
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	4833      	ldr	r0, [pc, #204]	; (8007724 <_printf_i+0x240>)
 8007658:	2778      	movs	r7, #120	; 0x78
 800765a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6829      	ldr	r1, [r5, #0]
 8007662:	061f      	lsls	r7, r3, #24
 8007664:	f851 6b04 	ldr.w	r6, [r1], #4
 8007668:	d402      	bmi.n	8007670 <_printf_i+0x18c>
 800766a:	065f      	lsls	r7, r3, #25
 800766c:	bf48      	it	mi
 800766e:	b2b6      	uxthmi	r6, r6
 8007670:	07df      	lsls	r7, r3, #31
 8007672:	bf48      	it	mi
 8007674:	f043 0320 	orrmi.w	r3, r3, #32
 8007678:	6029      	str	r1, [r5, #0]
 800767a:	bf48      	it	mi
 800767c:	6023      	strmi	r3, [r4, #0]
 800767e:	b91e      	cbnz	r6, 8007688 <_printf_i+0x1a4>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	2310      	movs	r3, #16
 800768a:	e7a7      	b.n	80075dc <_printf_i+0xf8>
 800768c:	4824      	ldr	r0, [pc, #144]	; (8007720 <_printf_i+0x23c>)
 800768e:	e7e4      	b.n	800765a <_printf_i+0x176>
 8007690:	4615      	mov	r5, r2
 8007692:	e7bd      	b.n	8007610 <_printf_i+0x12c>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	6826      	ldr	r6, [r4, #0]
 8007698:	6961      	ldr	r1, [r4, #20]
 800769a:	1d18      	adds	r0, r3, #4
 800769c:	6028      	str	r0, [r5, #0]
 800769e:	0635      	lsls	r5, r6, #24
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0x1c4>
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	e002      	b.n	80076ae <_printf_i+0x1ca>
 80076a8:	0670      	lsls	r0, r6, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0x1c0>
 80076ac:	8019      	strh	r1, [r3, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	4615      	mov	r5, r2
 80076b4:	e7bc      	b.n	8007630 <_printf_i+0x14c>
 80076b6:	682b      	ldr	r3, [r5, #0]
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	602a      	str	r2, [r5, #0]
 80076bc:	681d      	ldr	r5, [r3, #0]
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	2100      	movs	r1, #0
 80076c2:	4628      	mov	r0, r5
 80076c4:	f7f8 fd94 	bl	80001f0 <memchr>
 80076c8:	b108      	cbz	r0, 80076ce <_printf_i+0x1ea>
 80076ca:	1b40      	subs	r0, r0, r5
 80076cc:	6060      	str	r0, [r4, #4]
 80076ce:	6863      	ldr	r3, [r4, #4]
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	2300      	movs	r3, #0
 80076d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d8:	e7aa      	b.n	8007630 <_printf_i+0x14c>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	462a      	mov	r2, r5
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d0ad      	beq.n	8007644 <_printf_i+0x160>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	079b      	lsls	r3, r3, #30
 80076ec:	d413      	bmi.n	8007716 <_printf_i+0x232>
 80076ee:	68e0      	ldr	r0, [r4, #12]
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	4298      	cmp	r0, r3
 80076f4:	bfb8      	it	lt
 80076f6:	4618      	movlt	r0, r3
 80076f8:	e7a6      	b.n	8007648 <_printf_i+0x164>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4632      	mov	r2, r6
 80076fe:	4649      	mov	r1, r9
 8007700:	4640      	mov	r0, r8
 8007702:	47d0      	blx	sl
 8007704:	3001      	adds	r0, #1
 8007706:	d09d      	beq.n	8007644 <_printf_i+0x160>
 8007708:	3501      	adds	r5, #1
 800770a:	68e3      	ldr	r3, [r4, #12]
 800770c:	9903      	ldr	r1, [sp, #12]
 800770e:	1a5b      	subs	r3, r3, r1
 8007710:	42ab      	cmp	r3, r5
 8007712:	dcf2      	bgt.n	80076fa <_printf_i+0x216>
 8007714:	e7eb      	b.n	80076ee <_printf_i+0x20a>
 8007716:	2500      	movs	r5, #0
 8007718:	f104 0619 	add.w	r6, r4, #25
 800771c:	e7f5      	b.n	800770a <_printf_i+0x226>
 800771e:	bf00      	nop
 8007720:	0800a6c3 	.word	0x0800a6c3
 8007724:	0800a6d4 	.word	0x0800a6d4

08007728 <std>:
 8007728:	2300      	movs	r3, #0
 800772a:	b510      	push	{r4, lr}
 800772c:	4604      	mov	r4, r0
 800772e:	e9c0 3300 	strd	r3, r3, [r0]
 8007732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007736:	6083      	str	r3, [r0, #8]
 8007738:	8181      	strh	r1, [r0, #12]
 800773a:	6643      	str	r3, [r0, #100]	; 0x64
 800773c:	81c2      	strh	r2, [r0, #14]
 800773e:	6183      	str	r3, [r0, #24]
 8007740:	4619      	mov	r1, r3
 8007742:	2208      	movs	r2, #8
 8007744:	305c      	adds	r0, #92	; 0x5c
 8007746:	f000 f928 	bl	800799a <memset>
 800774a:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <std+0x58>)
 800774c:	6263      	str	r3, [r4, #36]	; 0x24
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <std+0x5c>)
 8007750:	62a3      	str	r3, [r4, #40]	; 0x28
 8007752:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <std+0x60>)
 8007754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <std+0x64>)
 8007758:	6323      	str	r3, [r4, #48]	; 0x30
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <std+0x68>)
 800775c:	6224      	str	r4, [r4, #32]
 800775e:	429c      	cmp	r4, r3
 8007760:	d006      	beq.n	8007770 <std+0x48>
 8007762:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007766:	4294      	cmp	r4, r2
 8007768:	d002      	beq.n	8007770 <std+0x48>
 800776a:	33d0      	adds	r3, #208	; 0xd0
 800776c:	429c      	cmp	r4, r3
 800776e:	d105      	bne.n	800777c <std+0x54>
 8007770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007778:	f000 b99e 	b.w	8007ab8 <__retarget_lock_init_recursive>
 800777c:	bd10      	pop	{r4, pc}
 800777e:	bf00      	nop
 8007780:	08007915 	.word	0x08007915
 8007784:	08007937 	.word	0x08007937
 8007788:	0800796f 	.word	0x0800796f
 800778c:	08007993 	.word	0x08007993
 8007790:	20000428 	.word	0x20000428

08007794 <stdio_exit_handler>:
 8007794:	4a02      	ldr	r2, [pc, #8]	; (80077a0 <stdio_exit_handler+0xc>)
 8007796:	4903      	ldr	r1, [pc, #12]	; (80077a4 <stdio_exit_handler+0x10>)
 8007798:	4803      	ldr	r0, [pc, #12]	; (80077a8 <stdio_exit_handler+0x14>)
 800779a:	f000 b869 	b.w	8007870 <_fwalk_sglue>
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	08009e09 	.word	0x08009e09
 80077a8:	20000184 	.word	0x20000184

080077ac <cleanup_stdio>:
 80077ac:	6841      	ldr	r1, [r0, #4]
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <cleanup_stdio+0x34>)
 80077b0:	4299      	cmp	r1, r3
 80077b2:	b510      	push	{r4, lr}
 80077b4:	4604      	mov	r4, r0
 80077b6:	d001      	beq.n	80077bc <cleanup_stdio+0x10>
 80077b8:	f002 fb26 	bl	8009e08 <_fflush_r>
 80077bc:	68a1      	ldr	r1, [r4, #8]
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <cleanup_stdio+0x38>)
 80077c0:	4299      	cmp	r1, r3
 80077c2:	d002      	beq.n	80077ca <cleanup_stdio+0x1e>
 80077c4:	4620      	mov	r0, r4
 80077c6:	f002 fb1f 	bl	8009e08 <_fflush_r>
 80077ca:	68e1      	ldr	r1, [r4, #12]
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <cleanup_stdio+0x3c>)
 80077ce:	4299      	cmp	r1, r3
 80077d0:	d004      	beq.n	80077dc <cleanup_stdio+0x30>
 80077d2:	4620      	mov	r0, r4
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f002 bb16 	b.w	8009e08 <_fflush_r>
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	20000428 	.word	0x20000428
 80077e4:	20000490 	.word	0x20000490
 80077e8:	200004f8 	.word	0x200004f8

080077ec <global_stdio_init.part.0>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <global_stdio_init.part.0+0x30>)
 80077f0:	4c0b      	ldr	r4, [pc, #44]	; (8007820 <global_stdio_init.part.0+0x34>)
 80077f2:	4a0c      	ldr	r2, [pc, #48]	; (8007824 <global_stdio_init.part.0+0x38>)
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	4620      	mov	r0, r4
 80077f8:	2200      	movs	r2, #0
 80077fa:	2104      	movs	r1, #4
 80077fc:	f7ff ff94 	bl	8007728 <std>
 8007800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007804:	2201      	movs	r2, #1
 8007806:	2109      	movs	r1, #9
 8007808:	f7ff ff8e 	bl	8007728 <std>
 800780c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007810:	2202      	movs	r2, #2
 8007812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff bf86 	b.w	8007728 <std>
 800781c:	20000560 	.word	0x20000560
 8007820:	20000428 	.word	0x20000428
 8007824:	08007795 	.word	0x08007795

08007828 <__sfp_lock_acquire>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sfp_lock_acquire+0x8>)
 800782a:	f000 b946 	b.w	8007aba <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	20000569 	.word	0x20000569

08007834 <__sfp_lock_release>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__sfp_lock_release+0x8>)
 8007836:	f000 b941 	b.w	8007abc <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	20000569 	.word	0x20000569

08007840 <__sinit>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	f7ff fff0 	bl	8007828 <__sfp_lock_acquire>
 8007848:	6a23      	ldr	r3, [r4, #32]
 800784a:	b11b      	cbz	r3, 8007854 <__sinit+0x14>
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007850:	f7ff bff0 	b.w	8007834 <__sfp_lock_release>
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <__sinit+0x28>)
 8007856:	6223      	str	r3, [r4, #32]
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <__sinit+0x2c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f5      	bne.n	800784c <__sinit+0xc>
 8007860:	f7ff ffc4 	bl	80077ec <global_stdio_init.part.0>
 8007864:	e7f2      	b.n	800784c <__sinit+0xc>
 8007866:	bf00      	nop
 8007868:	080077ad 	.word	0x080077ad
 800786c:	20000560 	.word	0x20000560

08007870 <_fwalk_sglue>:
 8007870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007874:	4607      	mov	r7, r0
 8007876:	4688      	mov	r8, r1
 8007878:	4614      	mov	r4, r2
 800787a:	2600      	movs	r6, #0
 800787c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007880:	f1b9 0901 	subs.w	r9, r9, #1
 8007884:	d505      	bpl.n	8007892 <_fwalk_sglue+0x22>
 8007886:	6824      	ldr	r4, [r4, #0]
 8007888:	2c00      	cmp	r4, #0
 800788a:	d1f7      	bne.n	800787c <_fwalk_sglue+0xc>
 800788c:	4630      	mov	r0, r6
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d907      	bls.n	80078a8 <_fwalk_sglue+0x38>
 8007898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800789c:	3301      	adds	r3, #1
 800789e:	d003      	beq.n	80078a8 <_fwalk_sglue+0x38>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4638      	mov	r0, r7
 80078a4:	47c0      	blx	r8
 80078a6:	4306      	orrs	r6, r0
 80078a8:	3568      	adds	r5, #104	; 0x68
 80078aa:	e7e9      	b.n	8007880 <_fwalk_sglue+0x10>

080078ac <sniprintf>:
 80078ac:	b40c      	push	{r2, r3}
 80078ae:	b530      	push	{r4, r5, lr}
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <sniprintf+0x64>)
 80078b2:	1e0c      	subs	r4, r1, #0
 80078b4:	681d      	ldr	r5, [r3, #0]
 80078b6:	b09d      	sub	sp, #116	; 0x74
 80078b8:	da08      	bge.n	80078cc <sniprintf+0x20>
 80078ba:	238b      	movs	r3, #139	; 0x8b
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	b01d      	add	sp, #116	; 0x74
 80078c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c8:	b002      	add	sp, #8
 80078ca:	4770      	bx	lr
 80078cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078d4:	bf14      	ite	ne
 80078d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078da:	4623      	moveq	r3, r4
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	9307      	str	r3, [sp, #28]
 80078e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078e4:	9002      	str	r0, [sp, #8]
 80078e6:	9006      	str	r0, [sp, #24]
 80078e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078ee:	ab21      	add	r3, sp, #132	; 0x84
 80078f0:	a902      	add	r1, sp, #8
 80078f2:	4628      	mov	r0, r5
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	f002 f903 	bl	8009b00 <_svfiprintf_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	bfbc      	itt	lt
 80078fe:	238b      	movlt	r3, #139	; 0x8b
 8007900:	602b      	strlt	r3, [r5, #0]
 8007902:	2c00      	cmp	r4, #0
 8007904:	d0dd      	beq.n	80078c2 <sniprintf+0x16>
 8007906:	9b02      	ldr	r3, [sp, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e7d9      	b.n	80078c2 <sniprintf+0x16>
 800790e:	bf00      	nop
 8007910:	200001d0 	.word	0x200001d0

08007914 <__sread>:
 8007914:	b510      	push	{r4, lr}
 8007916:	460c      	mov	r4, r1
 8007918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791c:	f000 f87e 	bl	8007a1c <_read_r>
 8007920:	2800      	cmp	r0, #0
 8007922:	bfab      	itete	ge
 8007924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007926:	89a3      	ldrhlt	r3, [r4, #12]
 8007928:	181b      	addge	r3, r3, r0
 800792a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792e:	bfac      	ite	ge
 8007930:	6563      	strge	r3, [r4, #84]	; 0x54
 8007932:	81a3      	strhlt	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__swrite>:
 8007936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	461f      	mov	r7, r3
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	05db      	lsls	r3, r3, #23
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4616      	mov	r6, r2
 8007946:	d505      	bpl.n	8007954 <__swrite+0x1e>
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	2302      	movs	r3, #2
 800794e:	2200      	movs	r2, #0
 8007950:	f000 f852 	bl	80079f8 <_lseek_r>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800795a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800796a:	f000 b869 	b.w	8007a40 <_write_r>

0800796e <__sseek>:
 800796e:	b510      	push	{r4, lr}
 8007970:	460c      	mov	r4, r1
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 f83f 	bl	80079f8 <_lseek_r>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	bf15      	itete	ne
 8007980:	6560      	strne	r0, [r4, #84]	; 0x54
 8007982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800798a:	81a3      	strheq	r3, [r4, #12]
 800798c:	bf18      	it	ne
 800798e:	81a3      	strhne	r3, [r4, #12]
 8007990:	bd10      	pop	{r4, pc}

08007992 <__sclose>:
 8007992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007996:	f000 b81f 	b.w	80079d8 <_close_r>

0800799a <memset>:
 800799a:	4402      	add	r2, r0
 800799c:	4603      	mov	r3, r0
 800799e:	4293      	cmp	r3, r2
 80079a0:	d100      	bne.n	80079a4 <memset+0xa>
 80079a2:	4770      	bx	lr
 80079a4:	f803 1b01 	strb.w	r1, [r3], #1
 80079a8:	e7f9      	b.n	800799e <memset+0x4>

080079aa <strncmp>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	b16a      	cbz	r2, 80079ca <strncmp+0x20>
 80079ae:	3901      	subs	r1, #1
 80079b0:	1884      	adds	r4, r0, r2
 80079b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d103      	bne.n	80079c6 <strncmp+0x1c>
 80079be:	42a0      	cmp	r0, r4
 80079c0:	d001      	beq.n	80079c6 <strncmp+0x1c>
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d1f5      	bne.n	80079b2 <strncmp+0x8>
 80079c6:	1ad0      	subs	r0, r2, r3
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	4610      	mov	r0, r2
 80079cc:	e7fc      	b.n	80079c8 <strncmp+0x1e>
	...

080079d0 <_localeconv_r>:
 80079d0:	4800      	ldr	r0, [pc, #0]	; (80079d4 <_localeconv_r+0x4>)
 80079d2:	4770      	bx	lr
 80079d4:	20000108 	.word	0x20000108

080079d8 <_close_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_close_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 ffc3 	bl	800196e <_close>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_close_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_close_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20000564 	.word	0x20000564

080079f8 <_lseek_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	; (8007a18 <_lseek_r+0x20>)
 80079fc:	4604      	mov	r4, r0
 80079fe:	4608      	mov	r0, r1
 8007a00:	4611      	mov	r1, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7f9 ffd8 	bl	80019bc <_lseek>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_lseek_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_lseek_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000564 	.word	0x20000564

08007a1c <_read_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d07      	ldr	r5, [pc, #28]	; (8007a3c <_read_r+0x20>)
 8007a20:	4604      	mov	r4, r0
 8007a22:	4608      	mov	r0, r1
 8007a24:	4611      	mov	r1, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7f9 ff66 	bl	80018fc <_read>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_read_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_read_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20000564 	.word	0x20000564

08007a40 <_write_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d07      	ldr	r5, [pc, #28]	; (8007a60 <_write_r+0x20>)
 8007a44:	4604      	mov	r4, r0
 8007a46:	4608      	mov	r0, r1
 8007a48:	4611      	mov	r1, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7f9 ff71 	bl	8001936 <_write>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_write_r+0x1e>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_write_r+0x1e>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20000564 	.word	0x20000564

08007a64 <__errno>:
 8007a64:	4b01      	ldr	r3, [pc, #4]	; (8007a6c <__errno+0x8>)
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	200001d0 	.word	0x200001d0

08007a70 <__libc_init_array>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4d0d      	ldr	r5, [pc, #52]	; (8007aa8 <__libc_init_array+0x38>)
 8007a74:	4c0d      	ldr	r4, [pc, #52]	; (8007aac <__libc_init_array+0x3c>)
 8007a76:	1b64      	subs	r4, r4, r5
 8007a78:	10a4      	asrs	r4, r4, #2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	42a6      	cmp	r6, r4
 8007a7e:	d109      	bne.n	8007a94 <__libc_init_array+0x24>
 8007a80:	4d0b      	ldr	r5, [pc, #44]	; (8007ab0 <__libc_init_array+0x40>)
 8007a82:	4c0c      	ldr	r4, [pc, #48]	; (8007ab4 <__libc_init_array+0x44>)
 8007a84:	f002 fd38 	bl	800a4f8 <_init>
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	10a4      	asrs	r4, r4, #2
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	42a6      	cmp	r6, r4
 8007a90:	d105      	bne.n	8007a9e <__libc_init_array+0x2e>
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a98:	4798      	blx	r3
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7ee      	b.n	8007a7c <__libc_init_array+0xc>
 8007a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa2:	4798      	blx	r3
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	e7f2      	b.n	8007a8e <__libc_init_array+0x1e>
 8007aa8:	0800a984 	.word	0x0800a984
 8007aac:	0800a984 	.word	0x0800a984
 8007ab0:	0800a984 	.word	0x0800a984
 8007ab4:	0800a988 	.word	0x0800a988

08007ab8 <__retarget_lock_init_recursive>:
 8007ab8:	4770      	bx	lr

08007aba <__retarget_lock_acquire_recursive>:
 8007aba:	4770      	bx	lr

08007abc <__retarget_lock_release_recursive>:
 8007abc:	4770      	bx	lr

08007abe <strcpy>:
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac4:	f803 2b01 	strb.w	r2, [r3], #1
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	d1f9      	bne.n	8007ac0 <strcpy+0x2>
 8007acc:	4770      	bx	lr

08007ace <memcpy>:
 8007ace:	440a      	add	r2, r1
 8007ad0:	4291      	cmp	r1, r2
 8007ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad6:	d100      	bne.n	8007ada <memcpy+0xc>
 8007ad8:	4770      	bx	lr
 8007ada:	b510      	push	{r4, lr}
 8007adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae4:	4291      	cmp	r1, r2
 8007ae6:	d1f9      	bne.n	8007adc <memcpy+0xe>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	0000      	movs	r0, r0
 8007aec:	0000      	movs	r0, r0
	...

08007af0 <nan>:
 8007af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007af8 <nan+0x8>
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00000000 	.word	0x00000000
 8007afc:	7ff80000 	.word	0x7ff80000

08007b00 <nanf>:
 8007b00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b08 <nanf+0x8>
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	7fc00000 	.word	0x7fc00000

08007b0c <quorem>:
 8007b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	6903      	ldr	r3, [r0, #16]
 8007b12:	690c      	ldr	r4, [r1, #16]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	4607      	mov	r7, r0
 8007b18:	db7e      	blt.n	8007c18 <quorem+0x10c>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	f101 0814 	add.w	r8, r1, #20
 8007b20:	f100 0514 	add.w	r5, r0, #20
 8007b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b32:	3301      	adds	r3, #1
 8007b34:	429a      	cmp	r2, r3
 8007b36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b42:	d331      	bcc.n	8007ba8 <quorem+0x9c>
 8007b44:	f04f 0e00 	mov.w	lr, #0
 8007b48:	4640      	mov	r0, r8
 8007b4a:	46ac      	mov	ip, r5
 8007b4c:	46f2      	mov	sl, lr
 8007b4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b52:	b293      	uxth	r3, r2
 8007b54:	fb06 e303 	mla	r3, r6, r3, lr
 8007b58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b5c:	0c1a      	lsrs	r2, r3, #16
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ebaa 0303 	sub.w	r3, sl, r3
 8007b64:	f8dc a000 	ldr.w	sl, [ip]
 8007b68:	fa13 f38a 	uxtah	r3, r3, sl
 8007b6c:	fb06 220e 	mla	r2, r6, lr, r2
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	9b00      	ldr	r3, [sp, #0]
 8007b74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b82:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b86:	4581      	cmp	r9, r0
 8007b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b8c:	f84c 3b04 	str.w	r3, [ip], #4
 8007b90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b94:	d2db      	bcs.n	8007b4e <quorem+0x42>
 8007b96:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b9a:	b92b      	cbnz	r3, 8007ba8 <quorem+0x9c>
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	3b04      	subs	r3, #4
 8007ba0:	429d      	cmp	r5, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	d32c      	bcc.n	8007c00 <quorem+0xf4>
 8007ba6:	613c      	str	r4, [r7, #16]
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f001 fd5b 	bl	8009664 <__mcmp>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	db22      	blt.n	8007bf8 <quorem+0xec>
 8007bb2:	3601      	adds	r6, #1
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8007bc0:	b293      	uxth	r3, r2
 8007bc2:	1ac3      	subs	r3, r0, r3
 8007bc4:	0c12      	lsrs	r2, r2, #16
 8007bc6:	fa13 f38c 	uxtah	r3, r3, ip
 8007bca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd8:	45c1      	cmp	r9, r8
 8007bda:	f841 3b04 	str.w	r3, [r1], #4
 8007bde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007be2:	d2e9      	bcs.n	8007bb8 <quorem+0xac>
 8007be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bec:	b922      	cbnz	r2, 8007bf8 <quorem+0xec>
 8007bee:	3b04      	subs	r3, #4
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	d30a      	bcc.n	8007c0c <quorem+0x100>
 8007bf6:	613c      	str	r4, [r7, #16]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	b003      	add	sp, #12
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	3b04      	subs	r3, #4
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	d1ce      	bne.n	8007ba6 <quorem+0x9a>
 8007c08:	3c01      	subs	r4, #1
 8007c0a:	e7c9      	b.n	8007ba0 <quorem+0x94>
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	d1f0      	bne.n	8007bf6 <quorem+0xea>
 8007c14:	3c01      	subs	r4, #1
 8007c16:	e7eb      	b.n	8007bf0 <quorem+0xe4>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e7ee      	b.n	8007bfa <quorem+0xee>
 8007c1c:	0000      	movs	r0, r0
	...

08007c20 <_dtoa_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	ed2d 8b04 	vpush	{d8-d9}
 8007c28:	69c5      	ldr	r5, [r0, #28]
 8007c2a:	b093      	sub	sp, #76	; 0x4c
 8007c2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c30:	ec57 6b10 	vmov	r6, r7, d0
 8007c34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c38:	9107      	str	r1, [sp, #28]
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c40:	b975      	cbnz	r5, 8007c60 <_dtoa_r+0x40>
 8007c42:	2010      	movs	r0, #16
 8007c44:	f001 f982 	bl	8008f4c <malloc>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	61e0      	str	r0, [r4, #28]
 8007c4c:	b920      	cbnz	r0, 8007c58 <_dtoa_r+0x38>
 8007c4e:	4bae      	ldr	r3, [pc, #696]	; (8007f08 <_dtoa_r+0x2e8>)
 8007c50:	21ef      	movs	r1, #239	; 0xef
 8007c52:	48ae      	ldr	r0, [pc, #696]	; (8007f0c <_dtoa_r+0x2ec>)
 8007c54:	f002 f92a 	bl	8009eac <__assert_func>
 8007c58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c5c:	6005      	str	r5, [r0, #0]
 8007c5e:	60c5      	str	r5, [r0, #12]
 8007c60:	69e3      	ldr	r3, [r4, #28]
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	b151      	cbz	r1, 8007c7c <_dtoa_r+0x5c>
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	604a      	str	r2, [r1, #4]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4093      	lsls	r3, r2
 8007c6e:	608b      	str	r3, [r1, #8]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f001 fa71 	bl	8009158 <_Bfree>
 8007c76:	69e3      	ldr	r3, [r4, #28]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	1e3b      	subs	r3, r7, #0
 8007c7e:	bfbb      	ittet	lt
 8007c80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c84:	9303      	strlt	r3, [sp, #12]
 8007c86:	2300      	movge	r3, #0
 8007c88:	2201      	movlt	r2, #1
 8007c8a:	bfac      	ite	ge
 8007c8c:	f8c8 3000 	strge.w	r3, [r8]
 8007c90:	f8c8 2000 	strlt.w	r2, [r8]
 8007c94:	4b9e      	ldr	r3, [pc, #632]	; (8007f10 <_dtoa_r+0x2f0>)
 8007c96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c9a:	ea33 0308 	bics.w	r3, r3, r8
 8007c9e:	d11b      	bne.n	8007cd8 <_dtoa_r+0xb8>
 8007ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007cac:	4333      	orrs	r3, r6
 8007cae:	f000 8593 	beq.w	80087d8 <_dtoa_r+0xbb8>
 8007cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb4:	b963      	cbnz	r3, 8007cd0 <_dtoa_r+0xb0>
 8007cb6:	4b97      	ldr	r3, [pc, #604]	; (8007f14 <_dtoa_r+0x2f4>)
 8007cb8:	e027      	b.n	8007d0a <_dtoa_r+0xea>
 8007cba:	4b97      	ldr	r3, [pc, #604]	; (8007f18 <_dtoa_r+0x2f8>)
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	9800      	ldr	r0, [sp, #0]
 8007cc6:	b013      	add	sp, #76	; 0x4c
 8007cc8:	ecbd 8b04 	vpop	{d8-d9}
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	4b90      	ldr	r3, [pc, #576]	; (8007f14 <_dtoa_r+0x2f4>)
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	3303      	adds	r3, #3
 8007cd6:	e7f3      	b.n	8007cc0 <_dtoa_r+0xa0>
 8007cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	ec51 0b17 	vmov	r0, r1, d7
 8007ce2:	eeb0 8a47 	vmov.f32	s16, s14
 8007ce6:	eef0 8a67 	vmov.f32	s17, s15
 8007cea:	2300      	movs	r3, #0
 8007cec:	f7f8 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cf0:	4681      	mov	r9, r0
 8007cf2:	b160      	cbz	r0, 8007d0e <_dtoa_r+0xee>
 8007cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8568 	beq.w	80087d2 <_dtoa_r+0xbb2>
 8007d02:	4b86      	ldr	r3, [pc, #536]	; (8007f1c <_dtoa_r+0x2fc>)
 8007d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	e7da      	b.n	8007cc4 <_dtoa_r+0xa4>
 8007d0e:	aa10      	add	r2, sp, #64	; 0x40
 8007d10:	a911      	add	r1, sp, #68	; 0x44
 8007d12:	4620      	mov	r0, r4
 8007d14:	eeb0 0a48 	vmov.f32	s0, s16
 8007d18:	eef0 0a68 	vmov.f32	s1, s17
 8007d1c:	f001 fdb8 	bl	8009890 <__d2b>
 8007d20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d24:	4682      	mov	sl, r0
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	d07f      	beq.n	8007e2a <_dtoa_r+0x20a>
 8007d2a:	ee18 3a90 	vmov	r3, s17
 8007d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007d36:	ec51 0b18 	vmov	r0, r1, d8
 8007d3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007d46:	4619      	mov	r1, r3
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b75      	ldr	r3, [pc, #468]	; (8007f20 <_dtoa_r+0x300>)
 8007d4c:	f7f8 faac 	bl	80002a8 <__aeabi_dsub>
 8007d50:	a367      	add	r3, pc, #412	; (adr r3, 8007ef0 <_dtoa_r+0x2d0>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f7f8 fc5f 	bl	8000618 <__aeabi_dmul>
 8007d5a:	a367      	add	r3, pc, #412	; (adr r3, 8007ef8 <_dtoa_r+0x2d8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 faa4 	bl	80002ac <__adddf3>
 8007d64:	4606      	mov	r6, r0
 8007d66:	4628      	mov	r0, r5
 8007d68:	460f      	mov	r7, r1
 8007d6a:	f7f8 fbeb 	bl	8000544 <__aeabi_i2d>
 8007d6e:	a364      	add	r3, pc, #400	; (adr r3, 8007f00 <_dtoa_r+0x2e0>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f7f8 fc50 	bl	8000618 <__aeabi_dmul>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fa94 	bl	80002ac <__adddf3>
 8007d84:	4606      	mov	r6, r0
 8007d86:	460f      	mov	r7, r1
 8007d88:	f7f8 fef6 	bl	8000b78 <__aeabi_d2iz>
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4683      	mov	fp, r0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4630      	mov	r0, r6
 8007d94:	4639      	mov	r1, r7
 8007d96:	f7f8 feb1 	bl	8000afc <__aeabi_dcmplt>
 8007d9a:	b148      	cbz	r0, 8007db0 <_dtoa_r+0x190>
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f7f8 fbd1 	bl	8000544 <__aeabi_i2d>
 8007da2:	4632      	mov	r2, r6
 8007da4:	463b      	mov	r3, r7
 8007da6:	f7f8 fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007daa:	b908      	cbnz	r0, 8007db0 <_dtoa_r+0x190>
 8007dac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007db0:	f1bb 0f16 	cmp.w	fp, #22
 8007db4:	d857      	bhi.n	8007e66 <_dtoa_r+0x246>
 8007db6:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <_dtoa_r+0x304>)
 8007db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	ec51 0b18 	vmov	r0, r1, d8
 8007dc4:	f7f8 fe9a 	bl	8000afc <__aeabi_dcmplt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d04e      	beq.n	8007e6a <_dtoa_r+0x24a>
 8007dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dd6:	1b5b      	subs	r3, r3, r5
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	bf45      	ittet	mi
 8007ddc:	f1c3 0301 	rsbmi	r3, r3, #1
 8007de0:	9305      	strmi	r3, [sp, #20]
 8007de2:	2300      	movpl	r3, #0
 8007de4:	2300      	movmi	r3, #0
 8007de6:	9206      	str	r2, [sp, #24]
 8007de8:	bf54      	ite	pl
 8007dea:	9305      	strpl	r3, [sp, #20]
 8007dec:	9306      	strmi	r3, [sp, #24]
 8007dee:	f1bb 0f00 	cmp.w	fp, #0
 8007df2:	db3c      	blt.n	8007e6e <_dtoa_r+0x24e>
 8007df4:	9b06      	ldr	r3, [sp, #24]
 8007df6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007dfa:	445b      	add	r3, fp
 8007dfc:	9306      	str	r3, [sp, #24]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9308      	str	r3, [sp, #32]
 8007e02:	9b07      	ldr	r3, [sp, #28]
 8007e04:	2b09      	cmp	r3, #9
 8007e06:	d868      	bhi.n	8007eda <_dtoa_r+0x2ba>
 8007e08:	2b05      	cmp	r3, #5
 8007e0a:	bfc4      	itt	gt
 8007e0c:	3b04      	subgt	r3, #4
 8007e0e:	9307      	strgt	r3, [sp, #28]
 8007e10:	9b07      	ldr	r3, [sp, #28]
 8007e12:	f1a3 0302 	sub.w	r3, r3, #2
 8007e16:	bfcc      	ite	gt
 8007e18:	2500      	movgt	r5, #0
 8007e1a:	2501      	movle	r5, #1
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	f200 8085 	bhi.w	8007f2c <_dtoa_r+0x30c>
 8007e22:	e8df f003 	tbb	[pc, r3]
 8007e26:	3b2e      	.short	0x3b2e
 8007e28:	5839      	.short	0x5839
 8007e2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e2e:	441d      	add	r5, r3
 8007e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	bfc1      	itttt	gt
 8007e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007e44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007e48:	bfd6      	itet	le
 8007e4a:	f1c3 0320 	rsble	r3, r3, #32
 8007e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007e52:	fa06 f003 	lslle.w	r0, r6, r3
 8007e56:	f7f8 fb65 	bl	8000524 <__aeabi_ui2d>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007e60:	3d01      	subs	r5, #1
 8007e62:	920e      	str	r2, [sp, #56]	; 0x38
 8007e64:	e76f      	b.n	8007d46 <_dtoa_r+0x126>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e7b3      	b.n	8007dd2 <_dtoa_r+0x1b2>
 8007e6a:	900c      	str	r0, [sp, #48]	; 0x30
 8007e6c:	e7b2      	b.n	8007dd4 <_dtoa_r+0x1b4>
 8007e6e:	9b05      	ldr	r3, [sp, #20]
 8007e70:	eba3 030b 	sub.w	r3, r3, fp
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	f1cb 0300 	rsb	r3, fp, #0
 8007e7a:	9308      	str	r3, [sp, #32]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e80:	e7bf      	b.n	8007e02 <_dtoa_r+0x1e2>
 8007e82:	2300      	movs	r3, #0
 8007e84:	9309      	str	r3, [sp, #36]	; 0x24
 8007e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc52      	bgt.n	8007f32 <_dtoa_r+0x312>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	461a      	mov	r2, r3
 8007e94:	920a      	str	r2, [sp, #40]	; 0x28
 8007e96:	e00b      	b.n	8007eb0 <_dtoa_r+0x290>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e7f3      	b.n	8007e84 <_dtoa_r+0x264>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	445b      	add	r3, fp
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	bfb8      	it	lt
 8007eae:	2301      	movlt	r3, #1
 8007eb0:	69e0      	ldr	r0, [r4, #28]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	f102 0614 	add.w	r6, r2, #20
 8007eba:	429e      	cmp	r6, r3
 8007ebc:	d93d      	bls.n	8007f3a <_dtoa_r+0x31a>
 8007ebe:	6041      	str	r1, [r0, #4]
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 f909 	bl	80090d8 <_Balloc>
 8007ec6:	9000      	str	r0, [sp, #0]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d139      	bne.n	8007f40 <_dtoa_r+0x320>
 8007ecc:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <_dtoa_r+0x308>)
 8007ece:	4602      	mov	r2, r0
 8007ed0:	f240 11af 	movw	r1, #431	; 0x1af
 8007ed4:	e6bd      	b.n	8007c52 <_dtoa_r+0x32>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e7e1      	b.n	8007e9e <_dtoa_r+0x27e>
 8007eda:	2501      	movs	r5, #1
 8007edc:	2300      	movs	r3, #0
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	9509      	str	r5, [sp, #36]	; 0x24
 8007ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	2200      	movs	r2, #0
 8007eec:	2312      	movs	r3, #18
 8007eee:	e7d1      	b.n	8007e94 <_dtoa_r+0x274>
 8007ef0:	636f4361 	.word	0x636f4361
 8007ef4:	3fd287a7 	.word	0x3fd287a7
 8007ef8:	8b60c8b3 	.word	0x8b60c8b3
 8007efc:	3fc68a28 	.word	0x3fc68a28
 8007f00:	509f79fb 	.word	0x509f79fb
 8007f04:	3fd34413 	.word	0x3fd34413
 8007f08:	0800a6fa 	.word	0x0800a6fa
 8007f0c:	0800a711 	.word	0x0800a711
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	0800a6f6 	.word	0x0800a6f6
 8007f18:	0800a6ed 	.word	0x0800a6ed
 8007f1c:	0800a6c2 	.word	0x0800a6c2
 8007f20:	3ff80000 	.word	0x3ff80000
 8007f24:	0800a860 	.word	0x0800a860
 8007f28:	0800a769 	.word	0x0800a769
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f30:	e7d7      	b.n	8007ee2 <_dtoa_r+0x2c2>
 8007f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	9304      	str	r3, [sp, #16]
 8007f38:	e7ba      	b.n	8007eb0 <_dtoa_r+0x290>
 8007f3a:	3101      	adds	r1, #1
 8007f3c:	0052      	lsls	r2, r2, #1
 8007f3e:	e7ba      	b.n	8007eb6 <_dtoa_r+0x296>
 8007f40:	69e3      	ldr	r3, [r4, #28]
 8007f42:	9a00      	ldr	r2, [sp, #0]
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	2b0e      	cmp	r3, #14
 8007f4a:	f200 80a8 	bhi.w	800809e <_dtoa_r+0x47e>
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	f000 80a5 	beq.w	800809e <_dtoa_r+0x47e>
 8007f54:	f1bb 0f00 	cmp.w	fp, #0
 8007f58:	dd38      	ble.n	8007fcc <_dtoa_r+0x3ac>
 8007f5a:	4bc0      	ldr	r3, [pc, #768]	; (800825c <_dtoa_r+0x63c>)
 8007f5c:	f00b 020f 	and.w	r2, fp, #15
 8007f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007f68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007f6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007f70:	d019      	beq.n	8007fa6 <_dtoa_r+0x386>
 8007f72:	4bbb      	ldr	r3, [pc, #748]	; (8008260 <_dtoa_r+0x640>)
 8007f74:	ec51 0b18 	vmov	r0, r1, d8
 8007f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f7c:	f7f8 fc76 	bl	800086c <__aeabi_ddiv>
 8007f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f84:	f008 080f 	and.w	r8, r8, #15
 8007f88:	2503      	movs	r5, #3
 8007f8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008260 <_dtoa_r+0x640>
 8007f8e:	f1b8 0f00 	cmp.w	r8, #0
 8007f92:	d10a      	bne.n	8007faa <_dtoa_r+0x38a>
 8007f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	f7f8 fc66 	bl	800086c <__aeabi_ddiv>
 8007fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa4:	e02b      	b.n	8007ffe <_dtoa_r+0x3de>
 8007fa6:	2502      	movs	r5, #2
 8007fa8:	e7ef      	b.n	8007f8a <_dtoa_r+0x36a>
 8007faa:	f018 0f01 	tst.w	r8, #1
 8007fae:	d008      	beq.n	8007fc2 <_dtoa_r+0x3a2>
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007fb8:	f7f8 fb2e 	bl	8000618 <__aeabi_dmul>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fc6:	f109 0908 	add.w	r9, r9, #8
 8007fca:	e7e0      	b.n	8007f8e <_dtoa_r+0x36e>
 8007fcc:	f000 809f 	beq.w	800810e <_dtoa_r+0x4ee>
 8007fd0:	f1cb 0600 	rsb	r6, fp, #0
 8007fd4:	4ba1      	ldr	r3, [pc, #644]	; (800825c <_dtoa_r+0x63c>)
 8007fd6:	4fa2      	ldr	r7, [pc, #648]	; (8008260 <_dtoa_r+0x640>)
 8007fd8:	f006 020f 	and.w	r2, r6, #15
 8007fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	ec51 0b18 	vmov	r0, r1, d8
 8007fe8:	f7f8 fb16 	bl	8000618 <__aeabi_dmul>
 8007fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff0:	1136      	asrs	r6, r6, #4
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2502      	movs	r5, #2
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	d17e      	bne.n	80080f8 <_dtoa_r+0x4d8>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1d0      	bne.n	8007fa0 <_dtoa_r+0x380>
 8007ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008000:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8084 	beq.w	8008112 <_dtoa_r+0x4f2>
 800800a:	4b96      	ldr	r3, [pc, #600]	; (8008264 <_dtoa_r+0x644>)
 800800c:	2200      	movs	r2, #0
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fd73 	bl	8000afc <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d07b      	beq.n	8008112 <_dtoa_r+0x4f2>
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d078      	beq.n	8008112 <_dtoa_r+0x4f2>
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd39      	ble.n	800809a <_dtoa_r+0x47a>
 8008026:	4b90      	ldr	r3, [pc, #576]	; (8008268 <_dtoa_r+0x648>)
 8008028:	2200      	movs	r2, #0
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	f7f8 faf3 	bl	8000618 <__aeabi_dmul>
 8008032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008036:	9e01      	ldr	r6, [sp, #4]
 8008038:	f10b 37ff 	add.w	r7, fp, #4294967295
 800803c:	3501      	adds	r5, #1
 800803e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008042:	4628      	mov	r0, r5
 8008044:	f7f8 fa7e 	bl	8000544 <__aeabi_i2d>
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	f7f8 fae4 	bl	8000618 <__aeabi_dmul>
 8008050:	4b86      	ldr	r3, [pc, #536]	; (800826c <_dtoa_r+0x64c>)
 8008052:	2200      	movs	r2, #0
 8008054:	f7f8 f92a 	bl	80002ac <__adddf3>
 8008058:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	2e00      	cmp	r6, #0
 8008064:	d158      	bne.n	8008118 <_dtoa_r+0x4f8>
 8008066:	4b82      	ldr	r3, [pc, #520]	; (8008270 <_dtoa_r+0x650>)
 8008068:	2200      	movs	r2, #0
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 f91b 	bl	80002a8 <__aeabi_dsub>
 8008072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008076:	4680      	mov	r8, r0
 8008078:	4689      	mov	r9, r1
 800807a:	f7f8 fd5d 	bl	8000b38 <__aeabi_dcmpgt>
 800807e:	2800      	cmp	r0, #0
 8008080:	f040 8296 	bne.w	80085b0 <_dtoa_r+0x990>
 8008084:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008088:	4640      	mov	r0, r8
 800808a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 fd34 	bl	8000afc <__aeabi_dcmplt>
 8008094:	2800      	cmp	r0, #0
 8008096:	f040 8289 	bne.w	80085ac <_dtoa_r+0x98c>
 800809a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800809e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f2c0 814e 	blt.w	8008342 <_dtoa_r+0x722>
 80080a6:	f1bb 0f0e 	cmp.w	fp, #14
 80080aa:	f300 814a 	bgt.w	8008342 <_dtoa_r+0x722>
 80080ae:	4b6b      	ldr	r3, [pc, #428]	; (800825c <_dtoa_r+0x63c>)
 80080b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f280 80dc 	bge.w	8008278 <_dtoa_r+0x658>
 80080c0:	9b04      	ldr	r3, [sp, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f300 80d8 	bgt.w	8008278 <_dtoa_r+0x658>
 80080c8:	f040 826f 	bne.w	80085aa <_dtoa_r+0x98a>
 80080cc:	4b68      	ldr	r3, [pc, #416]	; (8008270 <_dtoa_r+0x650>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 faa0 	bl	8000618 <__aeabi_dmul>
 80080d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080dc:	f7f8 fd22 	bl	8000b24 <__aeabi_dcmpge>
 80080e0:	9e04      	ldr	r6, [sp, #16]
 80080e2:	4637      	mov	r7, r6
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f040 8245 	bne.w	8008574 <_dtoa_r+0x954>
 80080ea:	9d00      	ldr	r5, [sp, #0]
 80080ec:	2331      	movs	r3, #49	; 0x31
 80080ee:	f805 3b01 	strb.w	r3, [r5], #1
 80080f2:	f10b 0b01 	add.w	fp, fp, #1
 80080f6:	e241      	b.n	800857c <_dtoa_r+0x95c>
 80080f8:	07f2      	lsls	r2, r6, #31
 80080fa:	d505      	bpl.n	8008108 <_dtoa_r+0x4e8>
 80080fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008100:	f7f8 fa8a 	bl	8000618 <__aeabi_dmul>
 8008104:	3501      	adds	r5, #1
 8008106:	2301      	movs	r3, #1
 8008108:	1076      	asrs	r6, r6, #1
 800810a:	3708      	adds	r7, #8
 800810c:	e773      	b.n	8007ff6 <_dtoa_r+0x3d6>
 800810e:	2502      	movs	r5, #2
 8008110:	e775      	b.n	8007ffe <_dtoa_r+0x3de>
 8008112:	9e04      	ldr	r6, [sp, #16]
 8008114:	465f      	mov	r7, fp
 8008116:	e792      	b.n	800803e <_dtoa_r+0x41e>
 8008118:	9900      	ldr	r1, [sp, #0]
 800811a:	4b50      	ldr	r3, [pc, #320]	; (800825c <_dtoa_r+0x63c>)
 800811c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008120:	4431      	add	r1, r6
 8008122:	9102      	str	r1, [sp, #8]
 8008124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008126:	eeb0 9a47 	vmov.f32	s18, s14
 800812a:	eef0 9a67 	vmov.f32	s19, s15
 800812e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008136:	2900      	cmp	r1, #0
 8008138:	d044      	beq.n	80081c4 <_dtoa_r+0x5a4>
 800813a:	494e      	ldr	r1, [pc, #312]	; (8008274 <_dtoa_r+0x654>)
 800813c:	2000      	movs	r0, #0
 800813e:	f7f8 fb95 	bl	800086c <__aeabi_ddiv>
 8008142:	ec53 2b19 	vmov	r2, r3, d9
 8008146:	f7f8 f8af 	bl	80002a8 <__aeabi_dsub>
 800814a:	9d00      	ldr	r5, [sp, #0]
 800814c:	ec41 0b19 	vmov	d9, r0, r1
 8008150:	4649      	mov	r1, r9
 8008152:	4640      	mov	r0, r8
 8008154:	f7f8 fd10 	bl	8000b78 <__aeabi_d2iz>
 8008158:	4606      	mov	r6, r0
 800815a:	f7f8 f9f3 	bl	8000544 <__aeabi_i2d>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f89f 	bl	80002a8 <__aeabi_dsub>
 800816a:	3630      	adds	r6, #48	; 0x30
 800816c:	f805 6b01 	strb.w	r6, [r5], #1
 8008170:	ec53 2b19 	vmov	r2, r3, d9
 8008174:	4680      	mov	r8, r0
 8008176:	4689      	mov	r9, r1
 8008178:	f7f8 fcc0 	bl	8000afc <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	d164      	bne.n	800824a <_dtoa_r+0x62a>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	4937      	ldr	r1, [pc, #220]	; (8008264 <_dtoa_r+0x644>)
 8008186:	2000      	movs	r0, #0
 8008188:	f7f8 f88e 	bl	80002a8 <__aeabi_dsub>
 800818c:	ec53 2b19 	vmov	r2, r3, d9
 8008190:	f7f8 fcb4 	bl	8000afc <__aeabi_dcmplt>
 8008194:	2800      	cmp	r0, #0
 8008196:	f040 80b6 	bne.w	8008306 <_dtoa_r+0x6e6>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	429d      	cmp	r5, r3
 800819e:	f43f af7c 	beq.w	800809a <_dtoa_r+0x47a>
 80081a2:	4b31      	ldr	r3, [pc, #196]	; (8008268 <_dtoa_r+0x648>)
 80081a4:	ec51 0b19 	vmov	r0, r1, d9
 80081a8:	2200      	movs	r2, #0
 80081aa:	f7f8 fa35 	bl	8000618 <__aeabi_dmul>
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <_dtoa_r+0x648>)
 80081b0:	ec41 0b19 	vmov	d9, r0, r1
 80081b4:	2200      	movs	r2, #0
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fa2d 	bl	8000618 <__aeabi_dmul>
 80081be:	4680      	mov	r8, r0
 80081c0:	4689      	mov	r9, r1
 80081c2:	e7c5      	b.n	8008150 <_dtoa_r+0x530>
 80081c4:	ec51 0b17 	vmov	r0, r1, d7
 80081c8:	f7f8 fa26 	bl	8000618 <__aeabi_dmul>
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	9d00      	ldr	r5, [sp, #0]
 80081d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d2:	ec41 0b19 	vmov	d9, r0, r1
 80081d6:	4649      	mov	r1, r9
 80081d8:	4640      	mov	r0, r8
 80081da:	f7f8 fccd 	bl	8000b78 <__aeabi_d2iz>
 80081de:	4606      	mov	r6, r0
 80081e0:	f7f8 f9b0 	bl	8000544 <__aeabi_i2d>
 80081e4:	3630      	adds	r6, #48	; 0x30
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4640      	mov	r0, r8
 80081ec:	4649      	mov	r1, r9
 80081ee:	f7f8 f85b 	bl	80002a8 <__aeabi_dsub>
 80081f2:	f805 6b01 	strb.w	r6, [r5], #1
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	429d      	cmp	r5, r3
 80081fa:	4680      	mov	r8, r0
 80081fc:	4689      	mov	r9, r1
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	d124      	bne.n	800824e <_dtoa_r+0x62e>
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <_dtoa_r+0x654>)
 8008206:	ec51 0b19 	vmov	r0, r1, d9
 800820a:	f7f8 f84f 	bl	80002ac <__adddf3>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	f7f8 fc8f 	bl	8000b38 <__aeabi_dcmpgt>
 800821a:	2800      	cmp	r0, #0
 800821c:	d173      	bne.n	8008306 <_dtoa_r+0x6e6>
 800821e:	ec53 2b19 	vmov	r2, r3, d9
 8008222:	4914      	ldr	r1, [pc, #80]	; (8008274 <_dtoa_r+0x654>)
 8008224:	2000      	movs	r0, #0
 8008226:	f7f8 f83f 	bl	80002a8 <__aeabi_dsub>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 fc63 	bl	8000afc <__aeabi_dcmplt>
 8008236:	2800      	cmp	r0, #0
 8008238:	f43f af2f 	beq.w	800809a <_dtoa_r+0x47a>
 800823c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800823e:	1e6b      	subs	r3, r5, #1
 8008240:	930f      	str	r3, [sp, #60]	; 0x3c
 8008242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008246:	2b30      	cmp	r3, #48	; 0x30
 8008248:	d0f8      	beq.n	800823c <_dtoa_r+0x61c>
 800824a:	46bb      	mov	fp, r7
 800824c:	e04a      	b.n	80082e4 <_dtoa_r+0x6c4>
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <_dtoa_r+0x648>)
 8008250:	f7f8 f9e2 	bl	8000618 <__aeabi_dmul>
 8008254:	4680      	mov	r8, r0
 8008256:	4689      	mov	r9, r1
 8008258:	e7bd      	b.n	80081d6 <_dtoa_r+0x5b6>
 800825a:	bf00      	nop
 800825c:	0800a860 	.word	0x0800a860
 8008260:	0800a838 	.word	0x0800a838
 8008264:	3ff00000 	.word	0x3ff00000
 8008268:	40240000 	.word	0x40240000
 800826c:	401c0000 	.word	0x401c0000
 8008270:	40140000 	.word	0x40140000
 8008274:	3fe00000 	.word	0x3fe00000
 8008278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800827c:	9d00      	ldr	r5, [sp, #0]
 800827e:	4642      	mov	r2, r8
 8008280:	464b      	mov	r3, r9
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 faf1 	bl	800086c <__aeabi_ddiv>
 800828a:	f7f8 fc75 	bl	8000b78 <__aeabi_d2iz>
 800828e:	9001      	str	r0, [sp, #4]
 8008290:	f7f8 f958 	bl	8000544 <__aeabi_i2d>
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	f7f8 f9be 	bl	8000618 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f8 f800 	bl	80002a8 <__aeabi_dsub>
 80082a8:	9e01      	ldr	r6, [sp, #4]
 80082aa:	9f04      	ldr	r7, [sp, #16]
 80082ac:	3630      	adds	r6, #48	; 0x30
 80082ae:	f805 6b01 	strb.w	r6, [r5], #1
 80082b2:	9e00      	ldr	r6, [sp, #0]
 80082b4:	1bae      	subs	r6, r5, r6
 80082b6:	42b7      	cmp	r7, r6
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	d134      	bne.n	8008328 <_dtoa_r+0x708>
 80082be:	f7f7 fff5 	bl	80002ac <__adddf3>
 80082c2:	4642      	mov	r2, r8
 80082c4:	464b      	mov	r3, r9
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	f7f8 fc35 	bl	8000b38 <__aeabi_dcmpgt>
 80082ce:	b9c8      	cbnz	r0, 8008304 <_dtoa_r+0x6e4>
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	f7f8 fc06 	bl	8000ae8 <__aeabi_dcmpeq>
 80082dc:	b110      	cbz	r0, 80082e4 <_dtoa_r+0x6c4>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	07db      	lsls	r3, r3, #31
 80082e2:	d40f      	bmi.n	8008304 <_dtoa_r+0x6e4>
 80082e4:	4651      	mov	r1, sl
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 ff36 	bl	8009158 <_Bfree>
 80082ec:	2300      	movs	r3, #0
 80082ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082f0:	702b      	strb	r3, [r5, #0]
 80082f2:	f10b 0301 	add.w	r3, fp, #1
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f43f ace2 	beq.w	8007cc4 <_dtoa_r+0xa4>
 8008300:	601d      	str	r5, [r3, #0]
 8008302:	e4df      	b.n	8007cc4 <_dtoa_r+0xa4>
 8008304:	465f      	mov	r7, fp
 8008306:	462b      	mov	r3, r5
 8008308:	461d      	mov	r5, r3
 800830a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830e:	2a39      	cmp	r2, #57	; 0x39
 8008310:	d106      	bne.n	8008320 <_dtoa_r+0x700>
 8008312:	9a00      	ldr	r2, [sp, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d1f7      	bne.n	8008308 <_dtoa_r+0x6e8>
 8008318:	9900      	ldr	r1, [sp, #0]
 800831a:	2230      	movs	r2, #48	; 0x30
 800831c:	3701      	adds	r7, #1
 800831e:	700a      	strb	r2, [r1, #0]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	3201      	adds	r2, #1
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e790      	b.n	800824a <_dtoa_r+0x62a>
 8008328:	4ba3      	ldr	r3, [pc, #652]	; (80085b8 <_dtoa_r+0x998>)
 800832a:	2200      	movs	r2, #0
 800832c:	f7f8 f974 	bl	8000618 <__aeabi_dmul>
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	f7f8 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800833c:	2800      	cmp	r0, #0
 800833e:	d09e      	beq.n	800827e <_dtoa_r+0x65e>
 8008340:	e7d0      	b.n	80082e4 <_dtoa_r+0x6c4>
 8008342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008344:	2a00      	cmp	r2, #0
 8008346:	f000 80ca 	beq.w	80084de <_dtoa_r+0x8be>
 800834a:	9a07      	ldr	r2, [sp, #28]
 800834c:	2a01      	cmp	r2, #1
 800834e:	f300 80ad 	bgt.w	80084ac <_dtoa_r+0x88c>
 8008352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008354:	2a00      	cmp	r2, #0
 8008356:	f000 80a5 	beq.w	80084a4 <_dtoa_r+0x884>
 800835a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800835e:	9e08      	ldr	r6, [sp, #32]
 8008360:	9d05      	ldr	r5, [sp, #20]
 8008362:	9a05      	ldr	r2, [sp, #20]
 8008364:	441a      	add	r2, r3
 8008366:	9205      	str	r2, [sp, #20]
 8008368:	9a06      	ldr	r2, [sp, #24]
 800836a:	2101      	movs	r1, #1
 800836c:	441a      	add	r2, r3
 800836e:	4620      	mov	r0, r4
 8008370:	9206      	str	r2, [sp, #24]
 8008372:	f000 fff1 	bl	8009358 <__i2b>
 8008376:	4607      	mov	r7, r0
 8008378:	b165      	cbz	r5, 8008394 <_dtoa_r+0x774>
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	dd09      	ble.n	8008394 <_dtoa_r+0x774>
 8008380:	42ab      	cmp	r3, r5
 8008382:	9a05      	ldr	r2, [sp, #20]
 8008384:	bfa8      	it	ge
 8008386:	462b      	movge	r3, r5
 8008388:	1ad2      	subs	r2, r2, r3
 800838a:	9205      	str	r2, [sp, #20]
 800838c:	9a06      	ldr	r2, [sp, #24]
 800838e:	1aed      	subs	r5, r5, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	9306      	str	r3, [sp, #24]
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	b1f3      	cbz	r3, 80083d6 <_dtoa_r+0x7b6>
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80a3 	beq.w	80084e6 <_dtoa_r+0x8c6>
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	dd10      	ble.n	80083c6 <_dtoa_r+0x7a6>
 80083a4:	4639      	mov	r1, r7
 80083a6:	4632      	mov	r2, r6
 80083a8:	4620      	mov	r0, r4
 80083aa:	f001 f895 	bl	80094d8 <__pow5mult>
 80083ae:	4652      	mov	r2, sl
 80083b0:	4601      	mov	r1, r0
 80083b2:	4607      	mov	r7, r0
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 ffe5 	bl	8009384 <__multiply>
 80083ba:	4651      	mov	r1, sl
 80083bc:	4680      	mov	r8, r0
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 feca 	bl	8009158 <_Bfree>
 80083c4:	46c2      	mov	sl, r8
 80083c6:	9b08      	ldr	r3, [sp, #32]
 80083c8:	1b9a      	subs	r2, r3, r6
 80083ca:	d004      	beq.n	80083d6 <_dtoa_r+0x7b6>
 80083cc:	4651      	mov	r1, sl
 80083ce:	4620      	mov	r0, r4
 80083d0:	f001 f882 	bl	80094d8 <__pow5mult>
 80083d4:	4682      	mov	sl, r0
 80083d6:	2101      	movs	r1, #1
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 ffbd 	bl	8009358 <__i2b>
 80083de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	4606      	mov	r6, r0
 80083e4:	f340 8081 	ble.w	80084ea <_dtoa_r+0x8ca>
 80083e8:	461a      	mov	r2, r3
 80083ea:	4601      	mov	r1, r0
 80083ec:	4620      	mov	r0, r4
 80083ee:	f001 f873 	bl	80094d8 <__pow5mult>
 80083f2:	9b07      	ldr	r3, [sp, #28]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	4606      	mov	r6, r0
 80083f8:	dd7a      	ble.n	80084f0 <_dtoa_r+0x8d0>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	6933      	ldr	r3, [r6, #16]
 8008400:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008404:	6918      	ldr	r0, [r3, #16]
 8008406:	f000 ff59 	bl	80092bc <__hi0bits>
 800840a:	f1c0 0020 	rsb	r0, r0, #32
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	4418      	add	r0, r3
 8008412:	f010 001f 	ands.w	r0, r0, #31
 8008416:	f000 8094 	beq.w	8008542 <_dtoa_r+0x922>
 800841a:	f1c0 0320 	rsb	r3, r0, #32
 800841e:	2b04      	cmp	r3, #4
 8008420:	f340 8085 	ble.w	800852e <_dtoa_r+0x90e>
 8008424:	9b05      	ldr	r3, [sp, #20]
 8008426:	f1c0 001c 	rsb	r0, r0, #28
 800842a:	4403      	add	r3, r0
 800842c:	9305      	str	r3, [sp, #20]
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	4403      	add	r3, r0
 8008432:	4405      	add	r5, r0
 8008434:	9306      	str	r3, [sp, #24]
 8008436:	9b05      	ldr	r3, [sp, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	dd05      	ble.n	8008448 <_dtoa_r+0x828>
 800843c:	4651      	mov	r1, sl
 800843e:	461a      	mov	r2, r3
 8008440:	4620      	mov	r0, r4
 8008442:	f001 f8a3 	bl	800958c <__lshift>
 8008446:	4682      	mov	sl, r0
 8008448:	9b06      	ldr	r3, [sp, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd05      	ble.n	800845a <_dtoa_r+0x83a>
 800844e:	4631      	mov	r1, r6
 8008450:	461a      	mov	r2, r3
 8008452:	4620      	mov	r0, r4
 8008454:	f001 f89a 	bl	800958c <__lshift>
 8008458:	4606      	mov	r6, r0
 800845a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800845c:	2b00      	cmp	r3, #0
 800845e:	d072      	beq.n	8008546 <_dtoa_r+0x926>
 8008460:	4631      	mov	r1, r6
 8008462:	4650      	mov	r0, sl
 8008464:	f001 f8fe 	bl	8009664 <__mcmp>
 8008468:	2800      	cmp	r0, #0
 800846a:	da6c      	bge.n	8008546 <_dtoa_r+0x926>
 800846c:	2300      	movs	r3, #0
 800846e:	4651      	mov	r1, sl
 8008470:	220a      	movs	r2, #10
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fe92 	bl	800919c <__multadd>
 8008478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800847e:	4682      	mov	sl, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 81b0 	beq.w	80087e6 <_dtoa_r+0xbc6>
 8008486:	2300      	movs	r3, #0
 8008488:	4639      	mov	r1, r7
 800848a:	220a      	movs	r2, #10
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fe85 	bl	800919c <__multadd>
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	4607      	mov	r7, r0
 8008498:	f300 8096 	bgt.w	80085c8 <_dtoa_r+0x9a8>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	dc59      	bgt.n	8008556 <_dtoa_r+0x936>
 80084a2:	e091      	b.n	80085c8 <_dtoa_r+0x9a8>
 80084a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084aa:	e758      	b.n	800835e <_dtoa_r+0x73e>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	1e5e      	subs	r6, r3, #1
 80084b0:	9b08      	ldr	r3, [sp, #32]
 80084b2:	42b3      	cmp	r3, r6
 80084b4:	bfbf      	itttt	lt
 80084b6:	9b08      	ldrlt	r3, [sp, #32]
 80084b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80084ba:	9608      	strlt	r6, [sp, #32]
 80084bc:	1af3      	sublt	r3, r6, r3
 80084be:	bfb4      	ite	lt
 80084c0:	18d2      	addlt	r2, r2, r3
 80084c2:	1b9e      	subge	r6, r3, r6
 80084c4:	9b04      	ldr	r3, [sp, #16]
 80084c6:	bfbc      	itt	lt
 80084c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80084ca:	2600      	movlt	r6, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfb7      	itett	lt
 80084d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80084d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80084d8:	1a9d      	sublt	r5, r3, r2
 80084da:	2300      	movlt	r3, #0
 80084dc:	e741      	b.n	8008362 <_dtoa_r+0x742>
 80084de:	9e08      	ldr	r6, [sp, #32]
 80084e0:	9d05      	ldr	r5, [sp, #20]
 80084e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80084e4:	e748      	b.n	8008378 <_dtoa_r+0x758>
 80084e6:	9a08      	ldr	r2, [sp, #32]
 80084e8:	e770      	b.n	80083cc <_dtoa_r+0x7ac>
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	dc19      	bgt.n	8008524 <_dtoa_r+0x904>
 80084f0:	9b02      	ldr	r3, [sp, #8]
 80084f2:	b9bb      	cbnz	r3, 8008524 <_dtoa_r+0x904>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084fa:	b99b      	cbnz	r3, 8008524 <_dtoa_r+0x904>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008502:	0d1b      	lsrs	r3, r3, #20
 8008504:	051b      	lsls	r3, r3, #20
 8008506:	b183      	cbz	r3, 800852a <_dtoa_r+0x90a>
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	3301      	adds	r3, #1
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	3301      	adds	r3, #1
 8008512:	9306      	str	r3, [sp, #24]
 8008514:	f04f 0801 	mov.w	r8, #1
 8008518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	f47f af6f 	bne.w	80083fe <_dtoa_r+0x7de>
 8008520:	2001      	movs	r0, #1
 8008522:	e774      	b.n	800840e <_dtoa_r+0x7ee>
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	e7f6      	b.n	8008518 <_dtoa_r+0x8f8>
 800852a:	4698      	mov	r8, r3
 800852c:	e7f4      	b.n	8008518 <_dtoa_r+0x8f8>
 800852e:	d082      	beq.n	8008436 <_dtoa_r+0x816>
 8008530:	9a05      	ldr	r2, [sp, #20]
 8008532:	331c      	adds	r3, #28
 8008534:	441a      	add	r2, r3
 8008536:	9205      	str	r2, [sp, #20]
 8008538:	9a06      	ldr	r2, [sp, #24]
 800853a:	441a      	add	r2, r3
 800853c:	441d      	add	r5, r3
 800853e:	9206      	str	r2, [sp, #24]
 8008540:	e779      	b.n	8008436 <_dtoa_r+0x816>
 8008542:	4603      	mov	r3, r0
 8008544:	e7f4      	b.n	8008530 <_dtoa_r+0x910>
 8008546:	9b04      	ldr	r3, [sp, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	dc37      	bgt.n	80085bc <_dtoa_r+0x99c>
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	2b02      	cmp	r3, #2
 8008550:	dd34      	ble.n	80085bc <_dtoa_r+0x99c>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	b963      	cbnz	r3, 8008574 <_dtoa_r+0x954>
 800855a:	4631      	mov	r1, r6
 800855c:	2205      	movs	r2, #5
 800855e:	4620      	mov	r0, r4
 8008560:	f000 fe1c 	bl	800919c <__multadd>
 8008564:	4601      	mov	r1, r0
 8008566:	4606      	mov	r6, r0
 8008568:	4650      	mov	r0, sl
 800856a:	f001 f87b 	bl	8009664 <__mcmp>
 800856e:	2800      	cmp	r0, #0
 8008570:	f73f adbb 	bgt.w	80080ea <_dtoa_r+0x4ca>
 8008574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008576:	9d00      	ldr	r5, [sp, #0]
 8008578:	ea6f 0b03 	mvn.w	fp, r3
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	4631      	mov	r1, r6
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fde8 	bl	8009158 <_Bfree>
 8008588:	2f00      	cmp	r7, #0
 800858a:	f43f aeab 	beq.w	80082e4 <_dtoa_r+0x6c4>
 800858e:	f1b8 0f00 	cmp.w	r8, #0
 8008592:	d005      	beq.n	80085a0 <_dtoa_r+0x980>
 8008594:	45b8      	cmp	r8, r7
 8008596:	d003      	beq.n	80085a0 <_dtoa_r+0x980>
 8008598:	4641      	mov	r1, r8
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fddc 	bl	8009158 <_Bfree>
 80085a0:	4639      	mov	r1, r7
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fdd8 	bl	8009158 <_Bfree>
 80085a8:	e69c      	b.n	80082e4 <_dtoa_r+0x6c4>
 80085aa:	2600      	movs	r6, #0
 80085ac:	4637      	mov	r7, r6
 80085ae:	e7e1      	b.n	8008574 <_dtoa_r+0x954>
 80085b0:	46bb      	mov	fp, r7
 80085b2:	4637      	mov	r7, r6
 80085b4:	e599      	b.n	80080ea <_dtoa_r+0x4ca>
 80085b6:	bf00      	nop
 80085b8:	40240000 	.word	0x40240000
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80c8 	beq.w	8008754 <_dtoa_r+0xb34>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	dd05      	ble.n	80085d8 <_dtoa_r+0x9b8>
 80085cc:	4639      	mov	r1, r7
 80085ce:	462a      	mov	r2, r5
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 ffdb 	bl	800958c <__lshift>
 80085d6:	4607      	mov	r7, r0
 80085d8:	f1b8 0f00 	cmp.w	r8, #0
 80085dc:	d05b      	beq.n	8008696 <_dtoa_r+0xa76>
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fd79 	bl	80090d8 <_Balloc>
 80085e6:	4605      	mov	r5, r0
 80085e8:	b928      	cbnz	r0, 80085f6 <_dtoa_r+0x9d6>
 80085ea:	4b83      	ldr	r3, [pc, #524]	; (80087f8 <_dtoa_r+0xbd8>)
 80085ec:	4602      	mov	r2, r0
 80085ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80085f2:	f7ff bb2e 	b.w	8007c52 <_dtoa_r+0x32>
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	3202      	adds	r2, #2
 80085fa:	0092      	lsls	r2, r2, #2
 80085fc:	f107 010c 	add.w	r1, r7, #12
 8008600:	300c      	adds	r0, #12
 8008602:	f7ff fa64 	bl	8007ace <memcpy>
 8008606:	2201      	movs	r2, #1
 8008608:	4629      	mov	r1, r5
 800860a:	4620      	mov	r0, r4
 800860c:	f000 ffbe 	bl	800958c <__lshift>
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861a:	4413      	add	r3, r2
 800861c:	9308      	str	r3, [sp, #32]
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	46b8      	mov	r8, r7
 8008626:	9306      	str	r3, [sp, #24]
 8008628:	4607      	mov	r7, r0
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	4631      	mov	r1, r6
 800862e:	3b01      	subs	r3, #1
 8008630:	4650      	mov	r0, sl
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	f7ff fa6a 	bl	8007b0c <quorem>
 8008638:	4641      	mov	r1, r8
 800863a:	9002      	str	r0, [sp, #8]
 800863c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008640:	4650      	mov	r0, sl
 8008642:	f001 f80f 	bl	8009664 <__mcmp>
 8008646:	463a      	mov	r2, r7
 8008648:	9005      	str	r0, [sp, #20]
 800864a:	4631      	mov	r1, r6
 800864c:	4620      	mov	r0, r4
 800864e:	f001 f825 	bl	800969c <__mdiff>
 8008652:	68c2      	ldr	r2, [r0, #12]
 8008654:	4605      	mov	r5, r0
 8008656:	bb02      	cbnz	r2, 800869a <_dtoa_r+0xa7a>
 8008658:	4601      	mov	r1, r0
 800865a:	4650      	mov	r0, sl
 800865c:	f001 f802 	bl	8009664 <__mcmp>
 8008660:	4602      	mov	r2, r0
 8008662:	4629      	mov	r1, r5
 8008664:	4620      	mov	r0, r4
 8008666:	9209      	str	r2, [sp, #36]	; 0x24
 8008668:	f000 fd76 	bl	8009158 <_Bfree>
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008670:	9d04      	ldr	r5, [sp, #16]
 8008672:	ea43 0102 	orr.w	r1, r3, r2
 8008676:	9b06      	ldr	r3, [sp, #24]
 8008678:	4319      	orrs	r1, r3
 800867a:	d110      	bne.n	800869e <_dtoa_r+0xa7e>
 800867c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008680:	d029      	beq.n	80086d6 <_dtoa_r+0xab6>
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	dd02      	ble.n	800868e <_dtoa_r+0xa6e>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	f883 9000 	strb.w	r9, [r3]
 8008694:	e774      	b.n	8008580 <_dtoa_r+0x960>
 8008696:	4638      	mov	r0, r7
 8008698:	e7ba      	b.n	8008610 <_dtoa_r+0x9f0>
 800869a:	2201      	movs	r2, #1
 800869c:	e7e1      	b.n	8008662 <_dtoa_r+0xa42>
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	db04      	blt.n	80086ae <_dtoa_r+0xa8e>
 80086a4:	9907      	ldr	r1, [sp, #28]
 80086a6:	430b      	orrs	r3, r1
 80086a8:	9906      	ldr	r1, [sp, #24]
 80086aa:	430b      	orrs	r3, r1
 80086ac:	d120      	bne.n	80086f0 <_dtoa_r+0xad0>
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	dded      	ble.n	800868e <_dtoa_r+0xa6e>
 80086b2:	4651      	mov	r1, sl
 80086b4:	2201      	movs	r2, #1
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 ff68 	bl	800958c <__lshift>
 80086bc:	4631      	mov	r1, r6
 80086be:	4682      	mov	sl, r0
 80086c0:	f000 ffd0 	bl	8009664 <__mcmp>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	dc03      	bgt.n	80086d0 <_dtoa_r+0xab0>
 80086c8:	d1e1      	bne.n	800868e <_dtoa_r+0xa6e>
 80086ca:	f019 0f01 	tst.w	r9, #1
 80086ce:	d0de      	beq.n	800868e <_dtoa_r+0xa6e>
 80086d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086d4:	d1d8      	bne.n	8008688 <_dtoa_r+0xa68>
 80086d6:	9a01      	ldr	r2, [sp, #4]
 80086d8:	2339      	movs	r3, #57	; 0x39
 80086da:	7013      	strb	r3, [r2, #0]
 80086dc:	462b      	mov	r3, r5
 80086de:	461d      	mov	r5, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086e6:	2a39      	cmp	r2, #57	; 0x39
 80086e8:	d06c      	beq.n	80087c4 <_dtoa_r+0xba4>
 80086ea:	3201      	adds	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e747      	b.n	8008580 <_dtoa_r+0x960>
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	dd07      	ble.n	8008704 <_dtoa_r+0xae4>
 80086f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086f8:	d0ed      	beq.n	80086d6 <_dtoa_r+0xab6>
 80086fa:	9a01      	ldr	r2, [sp, #4]
 80086fc:	f109 0301 	add.w	r3, r9, #1
 8008700:	7013      	strb	r3, [r2, #0]
 8008702:	e73d      	b.n	8008580 <_dtoa_r+0x960>
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	9a08      	ldr	r2, [sp, #32]
 8008708:	f803 9c01 	strb.w	r9, [r3, #-1]
 800870c:	4293      	cmp	r3, r2
 800870e:	d043      	beq.n	8008798 <_dtoa_r+0xb78>
 8008710:	4651      	mov	r1, sl
 8008712:	2300      	movs	r3, #0
 8008714:	220a      	movs	r2, #10
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fd40 	bl	800919c <__multadd>
 800871c:	45b8      	cmp	r8, r7
 800871e:	4682      	mov	sl, r0
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f04f 020a 	mov.w	r2, #10
 8008728:	4641      	mov	r1, r8
 800872a:	4620      	mov	r0, r4
 800872c:	d107      	bne.n	800873e <_dtoa_r+0xb1e>
 800872e:	f000 fd35 	bl	800919c <__multadd>
 8008732:	4680      	mov	r8, r0
 8008734:	4607      	mov	r7, r0
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	e775      	b.n	800862a <_dtoa_r+0xa0a>
 800873e:	f000 fd2d 	bl	800919c <__multadd>
 8008742:	4639      	mov	r1, r7
 8008744:	4680      	mov	r8, r0
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fd26 	bl	800919c <__multadd>
 8008750:	4607      	mov	r7, r0
 8008752:	e7f0      	b.n	8008736 <_dtoa_r+0xb16>
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	9d00      	ldr	r5, [sp, #0]
 800875a:	4631      	mov	r1, r6
 800875c:	4650      	mov	r0, sl
 800875e:	f7ff f9d5 	bl	8007b0c <quorem>
 8008762:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	f805 9b01 	strb.w	r9, [r5], #1
 800876c:	1aea      	subs	r2, r5, r3
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	4293      	cmp	r3, r2
 8008772:	dd07      	ble.n	8008784 <_dtoa_r+0xb64>
 8008774:	4651      	mov	r1, sl
 8008776:	2300      	movs	r3, #0
 8008778:	220a      	movs	r2, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fd0e 	bl	800919c <__multadd>
 8008780:	4682      	mov	sl, r0
 8008782:	e7ea      	b.n	800875a <_dtoa_r+0xb3a>
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfc8      	it	gt
 800878a:	461d      	movgt	r5, r3
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	bfd8      	it	le
 8008790:	2501      	movle	r5, #1
 8008792:	441d      	add	r5, r3
 8008794:	f04f 0800 	mov.w	r8, #0
 8008798:	4651      	mov	r1, sl
 800879a:	2201      	movs	r2, #1
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fef5 	bl	800958c <__lshift>
 80087a2:	4631      	mov	r1, r6
 80087a4:	4682      	mov	sl, r0
 80087a6:	f000 ff5d 	bl	8009664 <__mcmp>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	dc96      	bgt.n	80086dc <_dtoa_r+0xabc>
 80087ae:	d102      	bne.n	80087b6 <_dtoa_r+0xb96>
 80087b0:	f019 0f01 	tst.w	r9, #1
 80087b4:	d192      	bne.n	80086dc <_dtoa_r+0xabc>
 80087b6:	462b      	mov	r3, r5
 80087b8:	461d      	mov	r5, r3
 80087ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087be:	2a30      	cmp	r2, #48	; 0x30
 80087c0:	d0fa      	beq.n	80087b8 <_dtoa_r+0xb98>
 80087c2:	e6dd      	b.n	8008580 <_dtoa_r+0x960>
 80087c4:	9a00      	ldr	r2, [sp, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d189      	bne.n	80086de <_dtoa_r+0xabe>
 80087ca:	f10b 0b01 	add.w	fp, fp, #1
 80087ce:	2331      	movs	r3, #49	; 0x31
 80087d0:	e796      	b.n	8008700 <_dtoa_r+0xae0>
 80087d2:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <_dtoa_r+0xbdc>)
 80087d4:	f7ff ba99 	b.w	8007d0a <_dtoa_r+0xea>
 80087d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f47f aa6d 	bne.w	8007cba <_dtoa_r+0x9a>
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <_dtoa_r+0xbe0>)
 80087e2:	f7ff ba92 	b.w	8007d0a <_dtoa_r+0xea>
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dcb5      	bgt.n	8008758 <_dtoa_r+0xb38>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	f73f aeb1 	bgt.w	8008556 <_dtoa_r+0x936>
 80087f4:	e7b0      	b.n	8008758 <_dtoa_r+0xb38>
 80087f6:	bf00      	nop
 80087f8:	0800a769 	.word	0x0800a769
 80087fc:	0800a6c1 	.word	0x0800a6c1
 8008800:	0800a6ed 	.word	0x0800a6ed

08008804 <_free_r>:
 8008804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008806:	2900      	cmp	r1, #0
 8008808:	d044      	beq.n	8008894 <_free_r+0x90>
 800880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f1a1 0404 	sub.w	r4, r1, #4
 8008816:	bfb8      	it	lt
 8008818:	18e4      	addlt	r4, r4, r3
 800881a:	f000 fc51 	bl	80090c0 <__malloc_lock>
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <_free_r+0x94>)
 8008820:	9801      	ldr	r0, [sp, #4]
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	b933      	cbnz	r3, 8008834 <_free_r+0x30>
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	6014      	str	r4, [r2, #0]
 800882a:	b003      	add	sp, #12
 800882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008830:	f000 bc4c 	b.w	80090cc <__malloc_unlock>
 8008834:	42a3      	cmp	r3, r4
 8008836:	d908      	bls.n	800884a <_free_r+0x46>
 8008838:	6825      	ldr	r5, [r4, #0]
 800883a:	1961      	adds	r1, r4, r5
 800883c:	428b      	cmp	r3, r1
 800883e:	bf01      	itttt	eq
 8008840:	6819      	ldreq	r1, [r3, #0]
 8008842:	685b      	ldreq	r3, [r3, #4]
 8008844:	1949      	addeq	r1, r1, r5
 8008846:	6021      	streq	r1, [r4, #0]
 8008848:	e7ed      	b.n	8008826 <_free_r+0x22>
 800884a:	461a      	mov	r2, r3
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b10b      	cbz	r3, 8008854 <_free_r+0x50>
 8008850:	42a3      	cmp	r3, r4
 8008852:	d9fa      	bls.n	800884a <_free_r+0x46>
 8008854:	6811      	ldr	r1, [r2, #0]
 8008856:	1855      	adds	r5, r2, r1
 8008858:	42a5      	cmp	r5, r4
 800885a:	d10b      	bne.n	8008874 <_free_r+0x70>
 800885c:	6824      	ldr	r4, [r4, #0]
 800885e:	4421      	add	r1, r4
 8008860:	1854      	adds	r4, r2, r1
 8008862:	42a3      	cmp	r3, r4
 8008864:	6011      	str	r1, [r2, #0]
 8008866:	d1e0      	bne.n	800882a <_free_r+0x26>
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	440c      	add	r4, r1
 8008870:	6014      	str	r4, [r2, #0]
 8008872:	e7da      	b.n	800882a <_free_r+0x26>
 8008874:	d902      	bls.n	800887c <_free_r+0x78>
 8008876:	230c      	movs	r3, #12
 8008878:	6003      	str	r3, [r0, #0]
 800887a:	e7d6      	b.n	800882a <_free_r+0x26>
 800887c:	6825      	ldr	r5, [r4, #0]
 800887e:	1961      	adds	r1, r4, r5
 8008880:	428b      	cmp	r3, r1
 8008882:	bf04      	itt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	bf04      	itt	eq
 800888c:	1949      	addeq	r1, r1, r5
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	6054      	str	r4, [r2, #4]
 8008892:	e7ca      	b.n	800882a <_free_r+0x26>
 8008894:	b003      	add	sp, #12
 8008896:	bd30      	pop	{r4, r5, pc}
 8008898:	2000056c 	.word	0x2000056c

0800889c <rshift>:
 800889c:	6903      	ldr	r3, [r0, #16]
 800889e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088aa:	f100 0414 	add.w	r4, r0, #20
 80088ae:	dd45      	ble.n	800893c <rshift+0xa0>
 80088b0:	f011 011f 	ands.w	r1, r1, #31
 80088b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088bc:	d10c      	bne.n	80088d8 <rshift+0x3c>
 80088be:	f100 0710 	add.w	r7, r0, #16
 80088c2:	4629      	mov	r1, r5
 80088c4:	42b1      	cmp	r1, r6
 80088c6:	d334      	bcc.n	8008932 <rshift+0x96>
 80088c8:	1a9b      	subs	r3, r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	1eea      	subs	r2, r5, #3
 80088ce:	4296      	cmp	r6, r2
 80088d0:	bf38      	it	cc
 80088d2:	2300      	movcc	r3, #0
 80088d4:	4423      	add	r3, r4
 80088d6:	e015      	b.n	8008904 <rshift+0x68>
 80088d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088dc:	f1c1 0820 	rsb	r8, r1, #32
 80088e0:	40cf      	lsrs	r7, r1
 80088e2:	f105 0e04 	add.w	lr, r5, #4
 80088e6:	46a1      	mov	r9, r4
 80088e8:	4576      	cmp	r6, lr
 80088ea:	46f4      	mov	ip, lr
 80088ec:	d815      	bhi.n	800891a <rshift+0x7e>
 80088ee:	1a9a      	subs	r2, r3, r2
 80088f0:	0092      	lsls	r2, r2, #2
 80088f2:	3a04      	subs	r2, #4
 80088f4:	3501      	adds	r5, #1
 80088f6:	42ae      	cmp	r6, r5
 80088f8:	bf38      	it	cc
 80088fa:	2200      	movcc	r2, #0
 80088fc:	18a3      	adds	r3, r4, r2
 80088fe:	50a7      	str	r7, [r4, r2]
 8008900:	b107      	cbz	r7, 8008904 <rshift+0x68>
 8008902:	3304      	adds	r3, #4
 8008904:	1b1a      	subs	r2, r3, r4
 8008906:	42a3      	cmp	r3, r4
 8008908:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800890c:	bf08      	it	eq
 800890e:	2300      	moveq	r3, #0
 8008910:	6102      	str	r2, [r0, #16]
 8008912:	bf08      	it	eq
 8008914:	6143      	streq	r3, [r0, #20]
 8008916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800891a:	f8dc c000 	ldr.w	ip, [ip]
 800891e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008922:	ea4c 0707 	orr.w	r7, ip, r7
 8008926:	f849 7b04 	str.w	r7, [r9], #4
 800892a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800892e:	40cf      	lsrs	r7, r1
 8008930:	e7da      	b.n	80088e8 <rshift+0x4c>
 8008932:	f851 cb04 	ldr.w	ip, [r1], #4
 8008936:	f847 cf04 	str.w	ip, [r7, #4]!
 800893a:	e7c3      	b.n	80088c4 <rshift+0x28>
 800893c:	4623      	mov	r3, r4
 800893e:	e7e1      	b.n	8008904 <rshift+0x68>

08008940 <__hexdig_fun>:
 8008940:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008944:	2b09      	cmp	r3, #9
 8008946:	d802      	bhi.n	800894e <__hexdig_fun+0xe>
 8008948:	3820      	subs	r0, #32
 800894a:	b2c0      	uxtb	r0, r0
 800894c:	4770      	bx	lr
 800894e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008952:	2b05      	cmp	r3, #5
 8008954:	d801      	bhi.n	800895a <__hexdig_fun+0x1a>
 8008956:	3847      	subs	r0, #71	; 0x47
 8008958:	e7f7      	b.n	800894a <__hexdig_fun+0xa>
 800895a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800895e:	2b05      	cmp	r3, #5
 8008960:	d801      	bhi.n	8008966 <__hexdig_fun+0x26>
 8008962:	3827      	subs	r0, #39	; 0x27
 8008964:	e7f1      	b.n	800894a <__hexdig_fun+0xa>
 8008966:	2000      	movs	r0, #0
 8008968:	4770      	bx	lr
	...

0800896c <__gethex>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	4617      	mov	r7, r2
 8008972:	680a      	ldr	r2, [r1, #0]
 8008974:	b085      	sub	sp, #20
 8008976:	f102 0b02 	add.w	fp, r2, #2
 800897a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800897e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008982:	4681      	mov	r9, r0
 8008984:	468a      	mov	sl, r1
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	32fe      	adds	r2, #254	; 0xfe
 800898a:	eb02 030b 	add.w	r3, r2, fp
 800898e:	46d8      	mov	r8, fp
 8008990:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	2830      	cmp	r0, #48	; 0x30
 8008998:	d0f7      	beq.n	800898a <__gethex+0x1e>
 800899a:	f7ff ffd1 	bl	8008940 <__hexdig_fun>
 800899e:	4604      	mov	r4, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d138      	bne.n	8008a16 <__gethex+0xaa>
 80089a4:	49a7      	ldr	r1, [pc, #668]	; (8008c44 <__gethex+0x2d8>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	4640      	mov	r0, r8
 80089aa:	f7fe fffe 	bl	80079aa <strncmp>
 80089ae:	4606      	mov	r6, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d169      	bne.n	8008a88 <__gethex+0x11c>
 80089b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80089b8:	465d      	mov	r5, fp
 80089ba:	f7ff ffc1 	bl	8008940 <__hexdig_fun>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d064      	beq.n	8008a8c <__gethex+0x120>
 80089c2:	465a      	mov	r2, fp
 80089c4:	7810      	ldrb	r0, [r2, #0]
 80089c6:	2830      	cmp	r0, #48	; 0x30
 80089c8:	4690      	mov	r8, r2
 80089ca:	f102 0201 	add.w	r2, r2, #1
 80089ce:	d0f9      	beq.n	80089c4 <__gethex+0x58>
 80089d0:	f7ff ffb6 	bl	8008940 <__hexdig_fun>
 80089d4:	2301      	movs	r3, #1
 80089d6:	fab0 f480 	clz	r4, r0
 80089da:	0964      	lsrs	r4, r4, #5
 80089dc:	465e      	mov	r6, fp
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	4642      	mov	r2, r8
 80089e2:	4615      	mov	r5, r2
 80089e4:	3201      	adds	r2, #1
 80089e6:	7828      	ldrb	r0, [r5, #0]
 80089e8:	f7ff ffaa 	bl	8008940 <__hexdig_fun>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1f8      	bne.n	80089e2 <__gethex+0x76>
 80089f0:	4994      	ldr	r1, [pc, #592]	; (8008c44 <__gethex+0x2d8>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7fe ffd8 	bl	80079aa <strncmp>
 80089fa:	b978      	cbnz	r0, 8008a1c <__gethex+0xb0>
 80089fc:	b946      	cbnz	r6, 8008a10 <__gethex+0xa4>
 80089fe:	1c6e      	adds	r6, r5, #1
 8008a00:	4632      	mov	r2, r6
 8008a02:	4615      	mov	r5, r2
 8008a04:	3201      	adds	r2, #1
 8008a06:	7828      	ldrb	r0, [r5, #0]
 8008a08:	f7ff ff9a 	bl	8008940 <__hexdig_fun>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d1f8      	bne.n	8008a02 <__gethex+0x96>
 8008a10:	1b73      	subs	r3, r6, r5
 8008a12:	009e      	lsls	r6, r3, #2
 8008a14:	e004      	b.n	8008a20 <__gethex+0xb4>
 8008a16:	2400      	movs	r4, #0
 8008a18:	4626      	mov	r6, r4
 8008a1a:	e7e1      	b.n	80089e0 <__gethex+0x74>
 8008a1c:	2e00      	cmp	r6, #0
 8008a1e:	d1f7      	bne.n	8008a10 <__gethex+0xa4>
 8008a20:	782b      	ldrb	r3, [r5, #0]
 8008a22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a26:	2b50      	cmp	r3, #80	; 0x50
 8008a28:	d13d      	bne.n	8008aa6 <__gethex+0x13a>
 8008a2a:	786b      	ldrb	r3, [r5, #1]
 8008a2c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a2e:	d02f      	beq.n	8008a90 <__gethex+0x124>
 8008a30:	2b2d      	cmp	r3, #45	; 0x2d
 8008a32:	d031      	beq.n	8008a98 <__gethex+0x12c>
 8008a34:	1c69      	adds	r1, r5, #1
 8008a36:	f04f 0b00 	mov.w	fp, #0
 8008a3a:	7808      	ldrb	r0, [r1, #0]
 8008a3c:	f7ff ff80 	bl	8008940 <__hexdig_fun>
 8008a40:	1e42      	subs	r2, r0, #1
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	2a18      	cmp	r2, #24
 8008a46:	d82e      	bhi.n	8008aa6 <__gethex+0x13a>
 8008a48:	f1a0 0210 	sub.w	r2, r0, #16
 8008a4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a50:	f7ff ff76 	bl	8008940 <__hexdig_fun>
 8008a54:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a58:	fa5f fc8c 	uxtb.w	ip, ip
 8008a5c:	f1bc 0f18 	cmp.w	ip, #24
 8008a60:	d91d      	bls.n	8008a9e <__gethex+0x132>
 8008a62:	f1bb 0f00 	cmp.w	fp, #0
 8008a66:	d000      	beq.n	8008a6a <__gethex+0xfe>
 8008a68:	4252      	negs	r2, r2
 8008a6a:	4416      	add	r6, r2
 8008a6c:	f8ca 1000 	str.w	r1, [sl]
 8008a70:	b1dc      	cbz	r4, 8008aaa <__gethex+0x13e>
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bf14      	ite	ne
 8008a78:	f04f 0800 	movne.w	r8, #0
 8008a7c:	f04f 0806 	moveq.w	r8, #6
 8008a80:	4640      	mov	r0, r8
 8008a82:	b005      	add	sp, #20
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4645      	mov	r5, r8
 8008a8a:	4626      	mov	r6, r4
 8008a8c:	2401      	movs	r4, #1
 8008a8e:	e7c7      	b.n	8008a20 <__gethex+0xb4>
 8008a90:	f04f 0b00 	mov.w	fp, #0
 8008a94:	1ca9      	adds	r1, r5, #2
 8008a96:	e7d0      	b.n	8008a3a <__gethex+0xce>
 8008a98:	f04f 0b01 	mov.w	fp, #1
 8008a9c:	e7fa      	b.n	8008a94 <__gethex+0x128>
 8008a9e:	230a      	movs	r3, #10
 8008aa0:	fb03 0002 	mla	r0, r3, r2, r0
 8008aa4:	e7d0      	b.n	8008a48 <__gethex+0xdc>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	e7e0      	b.n	8008a6c <__gethex+0x100>
 8008aaa:	eba5 0308 	sub.w	r3, r5, r8
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	2b07      	cmp	r3, #7
 8008ab4:	dc0a      	bgt.n	8008acc <__gethex+0x160>
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	f000 fb0e 	bl	80090d8 <_Balloc>
 8008abc:	4604      	mov	r4, r0
 8008abe:	b940      	cbnz	r0, 8008ad2 <__gethex+0x166>
 8008ac0:	4b61      	ldr	r3, [pc, #388]	; (8008c48 <__gethex+0x2dc>)
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	21e4      	movs	r1, #228	; 0xe4
 8008ac6:	4861      	ldr	r0, [pc, #388]	; (8008c4c <__gethex+0x2e0>)
 8008ac8:	f001 f9f0 	bl	8009eac <__assert_func>
 8008acc:	3101      	adds	r1, #1
 8008ace:	105b      	asrs	r3, r3, #1
 8008ad0:	e7ef      	b.n	8008ab2 <__gethex+0x146>
 8008ad2:	f100 0a14 	add.w	sl, r0, #20
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	495a      	ldr	r1, [pc, #360]	; (8008c44 <__gethex+0x2d8>)
 8008ada:	f8cd a004 	str.w	sl, [sp, #4]
 8008ade:	469b      	mov	fp, r3
 8008ae0:	45a8      	cmp	r8, r5
 8008ae2:	d342      	bcc.n	8008b6a <__gethex+0x1fe>
 8008ae4:	9801      	ldr	r0, [sp, #4]
 8008ae6:	f840 bb04 	str.w	fp, [r0], #4
 8008aea:	eba0 000a 	sub.w	r0, r0, sl
 8008aee:	1080      	asrs	r0, r0, #2
 8008af0:	6120      	str	r0, [r4, #16]
 8008af2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 fbe0 	bl	80092bc <__hi0bits>
 8008afc:	683d      	ldr	r5, [r7, #0]
 8008afe:	eba8 0000 	sub.w	r0, r8, r0
 8008b02:	42a8      	cmp	r0, r5
 8008b04:	dd59      	ble.n	8008bba <__gethex+0x24e>
 8008b06:	eba0 0805 	sub.w	r8, r0, r5
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 ff6f 	bl	80099f0 <__any_on>
 8008b12:	4683      	mov	fp, r0
 8008b14:	b1b8      	cbz	r0, 8008b46 <__gethex+0x1da>
 8008b16:	f108 33ff 	add.w	r3, r8, #4294967295
 8008b1a:	1159      	asrs	r1, r3, #5
 8008b1c:	f003 021f 	and.w	r2, r3, #31
 8008b20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b24:	f04f 0b01 	mov.w	fp, #1
 8008b28:	fa0b f202 	lsl.w	r2, fp, r2
 8008b2c:	420a      	tst	r2, r1
 8008b2e:	d00a      	beq.n	8008b46 <__gethex+0x1da>
 8008b30:	455b      	cmp	r3, fp
 8008b32:	dd06      	ble.n	8008b42 <__gethex+0x1d6>
 8008b34:	f1a8 0102 	sub.w	r1, r8, #2
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 ff59 	bl	80099f0 <__any_on>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d138      	bne.n	8008bb4 <__gethex+0x248>
 8008b42:	f04f 0b02 	mov.w	fp, #2
 8008b46:	4641      	mov	r1, r8
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff fea7 	bl	800889c <rshift>
 8008b4e:	4446      	add	r6, r8
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	da41      	bge.n	8008bda <__gethex+0x26e>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4648      	mov	r0, r9
 8008b5a:	f000 fafd 	bl	8009158 <_Bfree>
 8008b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b60:	2300      	movs	r3, #0
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008b68:	e78a      	b.n	8008a80 <__gethex+0x114>
 8008b6a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008b6e:	2a2e      	cmp	r2, #46	; 0x2e
 8008b70:	d014      	beq.n	8008b9c <__gethex+0x230>
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	d106      	bne.n	8008b84 <__gethex+0x218>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	f843 bb04 	str.w	fp, [r3], #4
 8008b7c:	f04f 0b00 	mov.w	fp, #0
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	465b      	mov	r3, fp
 8008b84:	7828      	ldrb	r0, [r5, #0]
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	f7ff feda 	bl	8008940 <__hexdig_fun>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	f000 000f 	and.w	r0, r0, #15
 8008b92:	4098      	lsls	r0, r3
 8008b94:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b98:	3304      	adds	r3, #4
 8008b9a:	e7a1      	b.n	8008ae0 <__gethex+0x174>
 8008b9c:	45a8      	cmp	r8, r5
 8008b9e:	d8e8      	bhi.n	8008b72 <__gethex+0x206>
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	f7fe ff00 	bl	80079aa <strncmp>
 8008baa:	4926      	ldr	r1, [pc, #152]	; (8008c44 <__gethex+0x2d8>)
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d1df      	bne.n	8008b72 <__gethex+0x206>
 8008bb2:	e795      	b.n	8008ae0 <__gethex+0x174>
 8008bb4:	f04f 0b03 	mov.w	fp, #3
 8008bb8:	e7c5      	b.n	8008b46 <__gethex+0x1da>
 8008bba:	da0b      	bge.n	8008bd4 <__gethex+0x268>
 8008bbc:	eba5 0800 	sub.w	r8, r5, r0
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4642      	mov	r2, r8
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f000 fce1 	bl	800958c <__lshift>
 8008bca:	eba6 0608 	sub.w	r6, r6, r8
 8008bce:	4604      	mov	r4, r0
 8008bd0:	f100 0a14 	add.w	sl, r0, #20
 8008bd4:	f04f 0b00 	mov.w	fp, #0
 8008bd8:	e7ba      	b.n	8008b50 <__gethex+0x1e4>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	42b3      	cmp	r3, r6
 8008bde:	dd73      	ble.n	8008cc8 <__gethex+0x35c>
 8008be0:	1b9e      	subs	r6, r3, r6
 8008be2:	42b5      	cmp	r5, r6
 8008be4:	dc34      	bgt.n	8008c50 <__gethex+0x2e4>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d023      	beq.n	8008c34 <__gethex+0x2c8>
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d025      	beq.n	8008c3c <__gethex+0x2d0>
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d115      	bne.n	8008c20 <__gethex+0x2b4>
 8008bf4:	42b5      	cmp	r5, r6
 8008bf6:	d113      	bne.n	8008c20 <__gethex+0x2b4>
 8008bf8:	2d01      	cmp	r5, #1
 8008bfa:	d10b      	bne.n	8008c14 <__gethex+0x2a8>
 8008bfc:	9a02      	ldr	r2, [sp, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	2301      	movs	r3, #1
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	f8ca 3000 	str.w	r3, [sl]
 8008c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c0c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008c10:	601c      	str	r4, [r3, #0]
 8008c12:	e735      	b.n	8008a80 <__gethex+0x114>
 8008c14:	1e69      	subs	r1, r5, #1
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 feea 	bl	80099f0 <__any_on>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d1ed      	bne.n	8008bfc <__gethex+0x290>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4648      	mov	r0, r9
 8008c24:	f000 fa98 	bl	8009158 <_Bfree>
 8008c28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008c32:	e725      	b.n	8008a80 <__gethex+0x114>
 8008c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f2      	bne.n	8008c20 <__gethex+0x2b4>
 8008c3a:	e7df      	b.n	8008bfc <__gethex+0x290>
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1dc      	bne.n	8008bfc <__gethex+0x290>
 8008c42:	e7ed      	b.n	8008c20 <__gethex+0x2b4>
 8008c44:	0800a558 	.word	0x0800a558
 8008c48:	0800a769 	.word	0x0800a769
 8008c4c:	0800a77a 	.word	0x0800a77a
 8008c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8008c54:	f1bb 0f00 	cmp.w	fp, #0
 8008c58:	d133      	bne.n	8008cc2 <__gethex+0x356>
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d004      	beq.n	8008c6a <__gethex+0x2fe>
 8008c60:	4641      	mov	r1, r8
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 fec4 	bl	80099f0 <__any_on>
 8008c68:	4683      	mov	fp, r0
 8008c6a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c74:	f008 081f 	and.w	r8, r8, #31
 8008c78:	fa03 f308 	lsl.w	r3, r3, r8
 8008c7c:	4213      	tst	r3, r2
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4620      	mov	r0, r4
 8008c82:	bf18      	it	ne
 8008c84:	f04b 0b02 	orrne.w	fp, fp, #2
 8008c88:	1bad      	subs	r5, r5, r6
 8008c8a:	f7ff fe07 	bl	800889c <rshift>
 8008c8e:	687e      	ldr	r6, [r7, #4]
 8008c90:	f04f 0802 	mov.w	r8, #2
 8008c94:	f1bb 0f00 	cmp.w	fp, #0
 8008c98:	d04a      	beq.n	8008d30 <__gethex+0x3c4>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d016      	beq.n	8008cce <__gethex+0x362>
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d018      	beq.n	8008cd6 <__gethex+0x36a>
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d109      	bne.n	8008cbc <__gethex+0x350>
 8008ca8:	f01b 0f02 	tst.w	fp, #2
 8008cac:	d006      	beq.n	8008cbc <__gethex+0x350>
 8008cae:	f8da 3000 	ldr.w	r3, [sl]
 8008cb2:	ea4b 0b03 	orr.w	fp, fp, r3
 8008cb6:	f01b 0f01 	tst.w	fp, #1
 8008cba:	d10f      	bne.n	8008cdc <__gethex+0x370>
 8008cbc:	f048 0810 	orr.w	r8, r8, #16
 8008cc0:	e036      	b.n	8008d30 <__gethex+0x3c4>
 8008cc2:	f04f 0b01 	mov.w	fp, #1
 8008cc6:	e7d0      	b.n	8008c6a <__gethex+0x2fe>
 8008cc8:	f04f 0801 	mov.w	r8, #1
 8008ccc:	e7e2      	b.n	8008c94 <__gethex+0x328>
 8008cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cd0:	f1c3 0301 	rsb	r3, r3, #1
 8008cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0ef      	beq.n	8008cbc <__gethex+0x350>
 8008cdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ce0:	f104 0214 	add.w	r2, r4, #20
 8008ce4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4694      	mov	ip, r2
 8008cf2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008cf6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008cfa:	d01e      	beq.n	8008d3a <__gethex+0x3ce>
 8008cfc:	3101      	adds	r1, #1
 8008cfe:	f8cc 1000 	str.w	r1, [ip]
 8008d02:	f1b8 0f02 	cmp.w	r8, #2
 8008d06:	f104 0214 	add.w	r2, r4, #20
 8008d0a:	d13d      	bne.n	8008d88 <__gethex+0x41c>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	d10b      	bne.n	8008d2c <__gethex+0x3c0>
 8008d14:	1169      	asrs	r1, r5, #5
 8008d16:	2301      	movs	r3, #1
 8008d18:	f005 051f 	and.w	r5, r5, #31
 8008d1c:	fa03 f505 	lsl.w	r5, r3, r5
 8008d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d24:	421d      	tst	r5, r3
 8008d26:	bf18      	it	ne
 8008d28:	f04f 0801 	movne.w	r8, #1
 8008d2c:	f048 0820 	orr.w	r8, r8, #32
 8008d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d32:	601c      	str	r4, [r3, #0]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	601e      	str	r6, [r3, #0]
 8008d38:	e6a2      	b.n	8008a80 <__gethex+0x114>
 8008d3a:	4290      	cmp	r0, r2
 8008d3c:	f842 3c04 	str.w	r3, [r2, #-4]
 8008d40:	d8d6      	bhi.n	8008cf0 <__gethex+0x384>
 8008d42:	68a2      	ldr	r2, [r4, #8]
 8008d44:	4593      	cmp	fp, r2
 8008d46:	db17      	blt.n	8008d78 <__gethex+0x40c>
 8008d48:	6861      	ldr	r1, [r4, #4]
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	f000 f9c3 	bl	80090d8 <_Balloc>
 8008d52:	4682      	mov	sl, r0
 8008d54:	b918      	cbnz	r0, 8008d5e <__gethex+0x3f2>
 8008d56:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <__gethex+0x458>)
 8008d58:	4602      	mov	r2, r0
 8008d5a:	2184      	movs	r1, #132	; 0x84
 8008d5c:	e6b3      	b.n	8008ac6 <__gethex+0x15a>
 8008d5e:	6922      	ldr	r2, [r4, #16]
 8008d60:	3202      	adds	r2, #2
 8008d62:	f104 010c 	add.w	r1, r4, #12
 8008d66:	0092      	lsls	r2, r2, #2
 8008d68:	300c      	adds	r0, #12
 8008d6a:	f7fe feb0 	bl	8007ace <memcpy>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4648      	mov	r0, r9
 8008d72:	f000 f9f1 	bl	8009158 <_Bfree>
 8008d76:	4654      	mov	r4, sl
 8008d78:	6922      	ldr	r2, [r4, #16]
 8008d7a:	1c51      	adds	r1, r2, #1
 8008d7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d80:	6121      	str	r1, [r4, #16]
 8008d82:	2101      	movs	r1, #1
 8008d84:	6151      	str	r1, [r2, #20]
 8008d86:	e7bc      	b.n	8008d02 <__gethex+0x396>
 8008d88:	6921      	ldr	r1, [r4, #16]
 8008d8a:	4559      	cmp	r1, fp
 8008d8c:	dd0b      	ble.n	8008da6 <__gethex+0x43a>
 8008d8e:	2101      	movs	r1, #1
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff fd83 	bl	800889c <rshift>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3601      	adds	r6, #1
 8008d9a:	42b3      	cmp	r3, r6
 8008d9c:	f6ff aedb 	blt.w	8008b56 <__gethex+0x1ea>
 8008da0:	f04f 0801 	mov.w	r8, #1
 8008da4:	e7c2      	b.n	8008d2c <__gethex+0x3c0>
 8008da6:	f015 051f 	ands.w	r5, r5, #31
 8008daa:	d0f9      	beq.n	8008da0 <__gethex+0x434>
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	441a      	add	r2, r3
 8008db0:	f1c5 0520 	rsb	r5, r5, #32
 8008db4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008db8:	f000 fa80 	bl	80092bc <__hi0bits>
 8008dbc:	42a8      	cmp	r0, r5
 8008dbe:	dbe6      	blt.n	8008d8e <__gethex+0x422>
 8008dc0:	e7ee      	b.n	8008da0 <__gethex+0x434>
 8008dc2:	bf00      	nop
 8008dc4:	0800a769 	.word	0x0800a769

08008dc8 <L_shift>:
 8008dc8:	f1c2 0208 	rsb	r2, r2, #8
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	b570      	push	{r4, r5, r6, lr}
 8008dd0:	f1c2 0620 	rsb	r6, r2, #32
 8008dd4:	6843      	ldr	r3, [r0, #4]
 8008dd6:	6804      	ldr	r4, [r0, #0]
 8008dd8:	fa03 f506 	lsl.w	r5, r3, r6
 8008ddc:	432c      	orrs	r4, r5
 8008dde:	40d3      	lsrs	r3, r2
 8008de0:	6004      	str	r4, [r0, #0]
 8008de2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008de6:	4288      	cmp	r0, r1
 8008de8:	d3f4      	bcc.n	8008dd4 <L_shift+0xc>
 8008dea:	bd70      	pop	{r4, r5, r6, pc}

08008dec <__match>:
 8008dec:	b530      	push	{r4, r5, lr}
 8008dee:	6803      	ldr	r3, [r0, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	b914      	cbnz	r4, 8008dfe <__match+0x12>
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	bd30      	pop	{r4, r5, pc}
 8008dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e06:	2d19      	cmp	r5, #25
 8008e08:	bf98      	it	ls
 8008e0a:	3220      	addls	r2, #32
 8008e0c:	42a2      	cmp	r2, r4
 8008e0e:	d0f0      	beq.n	8008df2 <__match+0x6>
 8008e10:	2000      	movs	r0, #0
 8008e12:	e7f3      	b.n	8008dfc <__match+0x10>

08008e14 <__hexnan>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	680b      	ldr	r3, [r1, #0]
 8008e1a:	6801      	ldr	r1, [r0, #0]
 8008e1c:	115e      	asrs	r6, r3, #5
 8008e1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e22:	f013 031f 	ands.w	r3, r3, #31
 8008e26:	b087      	sub	sp, #28
 8008e28:	bf18      	it	ne
 8008e2a:	3604      	addne	r6, #4
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	1f37      	subs	r7, r6, #4
 8008e30:	4682      	mov	sl, r0
 8008e32:	4690      	mov	r8, r2
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e3a:	46b9      	mov	r9, r7
 8008e3c:	463c      	mov	r4, r7
 8008e3e:	9502      	str	r5, [sp, #8]
 8008e40:	46ab      	mov	fp, r5
 8008e42:	784a      	ldrb	r2, [r1, #1]
 8008e44:	1c4b      	adds	r3, r1, #1
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	b342      	cbz	r2, 8008e9c <__hexnan+0x88>
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	9204      	str	r2, [sp, #16]
 8008e50:	f7ff fd76 	bl	8008940 <__hexdig_fun>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d14f      	bne.n	8008ef8 <__hexnan+0xe4>
 8008e58:	9a04      	ldr	r2, [sp, #16]
 8008e5a:	9905      	ldr	r1, [sp, #20]
 8008e5c:	2a20      	cmp	r2, #32
 8008e5e:	d818      	bhi.n	8008e92 <__hexnan+0x7e>
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	459b      	cmp	fp, r3
 8008e64:	dd13      	ble.n	8008e8e <__hexnan+0x7a>
 8008e66:	454c      	cmp	r4, r9
 8008e68:	d206      	bcs.n	8008e78 <__hexnan+0x64>
 8008e6a:	2d07      	cmp	r5, #7
 8008e6c:	dc04      	bgt.n	8008e78 <__hexnan+0x64>
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4649      	mov	r1, r9
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff ffa8 	bl	8008dc8 <L_shift>
 8008e78:	4544      	cmp	r4, r8
 8008e7a:	d950      	bls.n	8008f1e <__hexnan+0x10a>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f1a4 0904 	sub.w	r9, r4, #4
 8008e82:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e86:	f8cd b008 	str.w	fp, [sp, #8]
 8008e8a:	464c      	mov	r4, r9
 8008e8c:	461d      	mov	r5, r3
 8008e8e:	9903      	ldr	r1, [sp, #12]
 8008e90:	e7d7      	b.n	8008e42 <__hexnan+0x2e>
 8008e92:	2a29      	cmp	r2, #41	; 0x29
 8008e94:	d155      	bne.n	8008f42 <__hexnan+0x12e>
 8008e96:	3102      	adds	r1, #2
 8008e98:	f8ca 1000 	str.w	r1, [sl]
 8008e9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ea0:	d04f      	beq.n	8008f42 <__hexnan+0x12e>
 8008ea2:	454c      	cmp	r4, r9
 8008ea4:	d206      	bcs.n	8008eb4 <__hexnan+0xa0>
 8008ea6:	2d07      	cmp	r5, #7
 8008ea8:	dc04      	bgt.n	8008eb4 <__hexnan+0xa0>
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4649      	mov	r1, r9
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff ff8a 	bl	8008dc8 <L_shift>
 8008eb4:	4544      	cmp	r4, r8
 8008eb6:	d934      	bls.n	8008f22 <__hexnan+0x10e>
 8008eb8:	f1a8 0204 	sub.w	r2, r8, #4
 8008ebc:	4623      	mov	r3, r4
 8008ebe:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ec2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ec6:	429f      	cmp	r7, r3
 8008ec8:	d2f9      	bcs.n	8008ebe <__hexnan+0xaa>
 8008eca:	1b3b      	subs	r3, r7, r4
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	3e03      	subs	r6, #3
 8008ed4:	3401      	adds	r4, #1
 8008ed6:	42a6      	cmp	r6, r4
 8008ed8:	bf38      	it	cc
 8008eda:	2304      	movcc	r3, #4
 8008edc:	4443      	add	r3, r8
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f843 2b04 	str.w	r2, [r3], #4
 8008ee4:	429f      	cmp	r7, r3
 8008ee6:	d2fb      	bcs.n	8008ee0 <__hexnan+0xcc>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	b91b      	cbnz	r3, 8008ef4 <__hexnan+0xe0>
 8008eec:	4547      	cmp	r7, r8
 8008eee:	d126      	bne.n	8008f3e <__hexnan+0x12a>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	2005      	movs	r0, #5
 8008ef6:	e025      	b.n	8008f44 <__hexnan+0x130>
 8008ef8:	3501      	adds	r5, #1
 8008efa:	2d08      	cmp	r5, #8
 8008efc:	f10b 0b01 	add.w	fp, fp, #1
 8008f00:	dd06      	ble.n	8008f10 <__hexnan+0xfc>
 8008f02:	4544      	cmp	r4, r8
 8008f04:	d9c3      	bls.n	8008e8e <__hexnan+0x7a>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f0c:	2501      	movs	r5, #1
 8008f0e:	3c04      	subs	r4, #4
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	f000 000f 	and.w	r0, r0, #15
 8008f16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f1a:	6020      	str	r0, [r4, #0]
 8008f1c:	e7b7      	b.n	8008e8e <__hexnan+0x7a>
 8008f1e:	2508      	movs	r5, #8
 8008f20:	e7b5      	b.n	8008e8e <__hexnan+0x7a>
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0df      	beq.n	8008ee8 <__hexnan+0xd4>
 8008f28:	f1c3 0320 	rsb	r3, r3, #32
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	40da      	lsrs	r2, r3
 8008f32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f36:	4013      	ands	r3, r2
 8008f38:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f3c:	e7d4      	b.n	8008ee8 <__hexnan+0xd4>
 8008f3e:	3f04      	subs	r7, #4
 8008f40:	e7d2      	b.n	8008ee8 <__hexnan+0xd4>
 8008f42:	2004      	movs	r0, #4
 8008f44:	b007      	add	sp, #28
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008f4c <malloc>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <malloc+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f000 b823 	b.w	8008f9c <_malloc_r>
 8008f56:	bf00      	nop
 8008f58:	200001d0 	.word	0x200001d0

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0e      	ldr	r6, [pc, #56]	; (8008f98 <sbrk_aligned+0x3c>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 ff90 	bl	8009e8c <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 ff8b 	bl	8009e8c <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d00a      	beq.n	8008f90 <sbrk_aligned+0x34>
 8008f7a:	1cc4      	adds	r4, r0, #3
 8008f7c:	f024 0403 	bic.w	r4, r4, #3
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d007      	beq.n	8008f94 <sbrk_aligned+0x38>
 8008f84:	1a21      	subs	r1, r4, r0
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 ff80 	bl	8009e8c <_sbrk_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d101      	bne.n	8008f94 <sbrk_aligned+0x38>
 8008f90:	f04f 34ff 	mov.w	r4, #4294967295
 8008f94:	4620      	mov	r0, r4
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	20000570 	.word	0x20000570

08008f9c <_malloc_r>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	1ccd      	adds	r5, r1, #3
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	db01      	blt.n	8008fb8 <_malloc_r+0x1c>
 8008fb4:	42a9      	cmp	r1, r5
 8008fb6:	d905      	bls.n	8008fc4 <_malloc_r+0x28>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009098 <_malloc_r+0xfc>
 8008fc8:	f000 f87a 	bl	80090c0 <__malloc_lock>
 8008fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd0:	461c      	mov	r4, r3
 8008fd2:	bb5c      	cbnz	r4, 800902c <_malloc_r+0x90>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7ff ffc0 	bl	8008f5c <sbrk_aligned>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	4604      	mov	r4, r0
 8008fe0:	d155      	bne.n	800908e <_malloc_r+0xf2>
 8008fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe6:	4626      	mov	r6, r4
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d145      	bne.n	8009078 <_malloc_r+0xdc>
 8008fec:	2c00      	cmp	r4, #0
 8008fee:	d048      	beq.n	8009082 <_malloc_r+0xe6>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	eb04 0903 	add.w	r9, r4, r3
 8008ffa:	f000 ff47 	bl	8009e8c <_sbrk_r>
 8008ffe:	4581      	cmp	r9, r0
 8009000:	d13f      	bne.n	8009082 <_malloc_r+0xe6>
 8009002:	6821      	ldr	r1, [r4, #0]
 8009004:	1a6d      	subs	r5, r5, r1
 8009006:	4629      	mov	r1, r5
 8009008:	4638      	mov	r0, r7
 800900a:	f7ff ffa7 	bl	8008f5c <sbrk_aligned>
 800900e:	3001      	adds	r0, #1
 8009010:	d037      	beq.n	8009082 <_malloc_r+0xe6>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	442b      	add	r3, r5
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	f8d8 3000 	ldr.w	r3, [r8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d038      	beq.n	8009092 <_malloc_r+0xf6>
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	42a2      	cmp	r2, r4
 8009024:	d12b      	bne.n	800907e <_malloc_r+0xe2>
 8009026:	2200      	movs	r2, #0
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	e00f      	b.n	800904c <_malloc_r+0xb0>
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	1b52      	subs	r2, r2, r5
 8009030:	d41f      	bmi.n	8009072 <_malloc_r+0xd6>
 8009032:	2a0b      	cmp	r2, #11
 8009034:	d917      	bls.n	8009066 <_malloc_r+0xca>
 8009036:	1961      	adds	r1, r4, r5
 8009038:	42a3      	cmp	r3, r4
 800903a:	6025      	str	r5, [r4, #0]
 800903c:	bf18      	it	ne
 800903e:	6059      	strne	r1, [r3, #4]
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	bf08      	it	eq
 8009044:	f8c8 1000 	streq.w	r1, [r8]
 8009048:	5162      	str	r2, [r4, r5]
 800904a:	604b      	str	r3, [r1, #4]
 800904c:	4638      	mov	r0, r7
 800904e:	f104 060b 	add.w	r6, r4, #11
 8009052:	f000 f83b 	bl	80090cc <__malloc_unlock>
 8009056:	f026 0607 	bic.w	r6, r6, #7
 800905a:	1d23      	adds	r3, r4, #4
 800905c:	1af2      	subs	r2, r6, r3
 800905e:	d0ae      	beq.n	8008fbe <_malloc_r+0x22>
 8009060:	1b9b      	subs	r3, r3, r6
 8009062:	50a3      	str	r3, [r4, r2]
 8009064:	e7ab      	b.n	8008fbe <_malloc_r+0x22>
 8009066:	42a3      	cmp	r3, r4
 8009068:	6862      	ldr	r2, [r4, #4]
 800906a:	d1dd      	bne.n	8009028 <_malloc_r+0x8c>
 800906c:	f8c8 2000 	str.w	r2, [r8]
 8009070:	e7ec      	b.n	800904c <_malloc_r+0xb0>
 8009072:	4623      	mov	r3, r4
 8009074:	6864      	ldr	r4, [r4, #4]
 8009076:	e7ac      	b.n	8008fd2 <_malloc_r+0x36>
 8009078:	4634      	mov	r4, r6
 800907a:	6876      	ldr	r6, [r6, #4]
 800907c:	e7b4      	b.n	8008fe8 <_malloc_r+0x4c>
 800907e:	4613      	mov	r3, r2
 8009080:	e7cc      	b.n	800901c <_malloc_r+0x80>
 8009082:	230c      	movs	r3, #12
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4638      	mov	r0, r7
 8009088:	f000 f820 	bl	80090cc <__malloc_unlock>
 800908c:	e797      	b.n	8008fbe <_malloc_r+0x22>
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	e7dc      	b.n	800904c <_malloc_r+0xb0>
 8009092:	605b      	str	r3, [r3, #4]
 8009094:	deff      	udf	#255	; 0xff
 8009096:	bf00      	nop
 8009098:	2000056c 	.word	0x2000056c

0800909c <__ascii_mbtowc>:
 800909c:	b082      	sub	sp, #8
 800909e:	b901      	cbnz	r1, 80090a2 <__ascii_mbtowc+0x6>
 80090a0:	a901      	add	r1, sp, #4
 80090a2:	b142      	cbz	r2, 80090b6 <__ascii_mbtowc+0x1a>
 80090a4:	b14b      	cbz	r3, 80090ba <__ascii_mbtowc+0x1e>
 80090a6:	7813      	ldrb	r3, [r2, #0]
 80090a8:	600b      	str	r3, [r1, #0]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	1e10      	subs	r0, r2, #0
 80090ae:	bf18      	it	ne
 80090b0:	2001      	movne	r0, #1
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	4610      	mov	r0, r2
 80090b8:	e7fb      	b.n	80090b2 <__ascii_mbtowc+0x16>
 80090ba:	f06f 0001 	mvn.w	r0, #1
 80090be:	e7f8      	b.n	80090b2 <__ascii_mbtowc+0x16>

080090c0 <__malloc_lock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_lock+0x8>)
 80090c2:	f7fe bcfa 	b.w	8007aba <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	20000568 	.word	0x20000568

080090cc <__malloc_unlock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__malloc_unlock+0x8>)
 80090ce:	f7fe bcf5 	b.w	8007abc <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	20000568 	.word	0x20000568

080090d8 <_Balloc>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	69c6      	ldr	r6, [r0, #28]
 80090dc:	4604      	mov	r4, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	b976      	cbnz	r6, 8009100 <_Balloc+0x28>
 80090e2:	2010      	movs	r0, #16
 80090e4:	f7ff ff32 	bl	8008f4c <malloc>
 80090e8:	4602      	mov	r2, r0
 80090ea:	61e0      	str	r0, [r4, #28]
 80090ec:	b920      	cbnz	r0, 80090f8 <_Balloc+0x20>
 80090ee:	4b18      	ldr	r3, [pc, #96]	; (8009150 <_Balloc+0x78>)
 80090f0:	4818      	ldr	r0, [pc, #96]	; (8009154 <_Balloc+0x7c>)
 80090f2:	216b      	movs	r1, #107	; 0x6b
 80090f4:	f000 feda 	bl	8009eac <__assert_func>
 80090f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090fc:	6006      	str	r6, [r0, #0]
 80090fe:	60c6      	str	r6, [r0, #12]
 8009100:	69e6      	ldr	r6, [r4, #28]
 8009102:	68f3      	ldr	r3, [r6, #12]
 8009104:	b183      	cbz	r3, 8009128 <_Balloc+0x50>
 8009106:	69e3      	ldr	r3, [r4, #28]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800910e:	b9b8      	cbnz	r0, 8009140 <_Balloc+0x68>
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f605 	lsl.w	r6, r1, r5
 8009116:	1d72      	adds	r2, r6, #5
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fee4 	bl	8009ee8 <_calloc_r>
 8009120:	b160      	cbz	r0, 800913c <_Balloc+0x64>
 8009122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009126:	e00e      	b.n	8009146 <_Balloc+0x6e>
 8009128:	2221      	movs	r2, #33	; 0x21
 800912a:	2104      	movs	r1, #4
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fedb 	bl	8009ee8 <_calloc_r>
 8009132:	69e3      	ldr	r3, [r4, #28]
 8009134:	60f0      	str	r0, [r6, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e4      	bne.n	8009106 <_Balloc+0x2e>
 800913c:	2000      	movs	r0, #0
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	6802      	ldr	r2, [r0, #0]
 8009142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009146:	2300      	movs	r3, #0
 8009148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800914c:	e7f7      	b.n	800913e <_Balloc+0x66>
 800914e:	bf00      	nop
 8009150:	0800a6fa 	.word	0x0800a6fa
 8009154:	0800a7da 	.word	0x0800a7da

08009158 <_Bfree>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	69c6      	ldr	r6, [r0, #28]
 800915c:	4605      	mov	r5, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b976      	cbnz	r6, 8009180 <_Bfree+0x28>
 8009162:	2010      	movs	r0, #16
 8009164:	f7ff fef2 	bl	8008f4c <malloc>
 8009168:	4602      	mov	r2, r0
 800916a:	61e8      	str	r0, [r5, #28]
 800916c:	b920      	cbnz	r0, 8009178 <_Bfree+0x20>
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <_Bfree+0x3c>)
 8009170:	4809      	ldr	r0, [pc, #36]	; (8009198 <_Bfree+0x40>)
 8009172:	218f      	movs	r1, #143	; 0x8f
 8009174:	f000 fe9a 	bl	8009eac <__assert_func>
 8009178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800917c:	6006      	str	r6, [r0, #0]
 800917e:	60c6      	str	r6, [r0, #12]
 8009180:	b13c      	cbz	r4, 8009192 <_Bfree+0x3a>
 8009182:	69eb      	ldr	r3, [r5, #28]
 8009184:	6862      	ldr	r2, [r4, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800918c:	6021      	str	r1, [r4, #0]
 800918e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	0800a6fa 	.word	0x0800a6fa
 8009198:	0800a7da 	.word	0x0800a7da

0800919c <__multadd>:
 800919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a0:	690d      	ldr	r5, [r1, #16]
 80091a2:	4607      	mov	r7, r0
 80091a4:	460c      	mov	r4, r1
 80091a6:	461e      	mov	r6, r3
 80091a8:	f101 0c14 	add.w	ip, r1, #20
 80091ac:	2000      	movs	r0, #0
 80091ae:	f8dc 3000 	ldr.w	r3, [ip]
 80091b2:	b299      	uxth	r1, r3
 80091b4:	fb02 6101 	mla	r1, r2, r1, r6
 80091b8:	0c1e      	lsrs	r6, r3, #16
 80091ba:	0c0b      	lsrs	r3, r1, #16
 80091bc:	fb02 3306 	mla	r3, r2, r6, r3
 80091c0:	b289      	uxth	r1, r1
 80091c2:	3001      	adds	r0, #1
 80091c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091c8:	4285      	cmp	r5, r0
 80091ca:	f84c 1b04 	str.w	r1, [ip], #4
 80091ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091d2:	dcec      	bgt.n	80091ae <__multadd+0x12>
 80091d4:	b30e      	cbz	r6, 800921a <__multadd+0x7e>
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	42ab      	cmp	r3, r5
 80091da:	dc19      	bgt.n	8009210 <__multadd+0x74>
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	4638      	mov	r0, r7
 80091e0:	3101      	adds	r1, #1
 80091e2:	f7ff ff79 	bl	80090d8 <_Balloc>
 80091e6:	4680      	mov	r8, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <__multadd+0x5a>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <__multadd+0x84>)
 80091ee:	480d      	ldr	r0, [pc, #52]	; (8009224 <__multadd+0x88>)
 80091f0:	21ba      	movs	r1, #186	; 0xba
 80091f2:	f000 fe5b 	bl	8009eac <__assert_func>
 80091f6:	6922      	ldr	r2, [r4, #16]
 80091f8:	3202      	adds	r2, #2
 80091fa:	f104 010c 	add.w	r1, r4, #12
 80091fe:	0092      	lsls	r2, r2, #2
 8009200:	300c      	adds	r0, #12
 8009202:	f7fe fc64 	bl	8007ace <memcpy>
 8009206:	4621      	mov	r1, r4
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ffa5 	bl	8009158 <_Bfree>
 800920e:	4644      	mov	r4, r8
 8009210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009214:	3501      	adds	r5, #1
 8009216:	615e      	str	r6, [r3, #20]
 8009218:	6125      	str	r5, [r4, #16]
 800921a:	4620      	mov	r0, r4
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	0800a769 	.word	0x0800a769
 8009224:	0800a7da 	.word	0x0800a7da

08009228 <__s2b>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	460c      	mov	r4, r1
 800922e:	4615      	mov	r5, r2
 8009230:	461f      	mov	r7, r3
 8009232:	2209      	movs	r2, #9
 8009234:	3308      	adds	r3, #8
 8009236:	4606      	mov	r6, r0
 8009238:	fb93 f3f2 	sdiv	r3, r3, r2
 800923c:	2100      	movs	r1, #0
 800923e:	2201      	movs	r2, #1
 8009240:	429a      	cmp	r2, r3
 8009242:	db09      	blt.n	8009258 <__s2b+0x30>
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff ff47 	bl	80090d8 <_Balloc>
 800924a:	b940      	cbnz	r0, 800925e <__s2b+0x36>
 800924c:	4602      	mov	r2, r0
 800924e:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <__s2b+0x8c>)
 8009250:	4819      	ldr	r0, [pc, #100]	; (80092b8 <__s2b+0x90>)
 8009252:	21d3      	movs	r1, #211	; 0xd3
 8009254:	f000 fe2a 	bl	8009eac <__assert_func>
 8009258:	0052      	lsls	r2, r2, #1
 800925a:	3101      	adds	r1, #1
 800925c:	e7f0      	b.n	8009240 <__s2b+0x18>
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	6143      	str	r3, [r0, #20]
 8009262:	2d09      	cmp	r5, #9
 8009264:	f04f 0301 	mov.w	r3, #1
 8009268:	6103      	str	r3, [r0, #16]
 800926a:	dd16      	ble.n	800929a <__s2b+0x72>
 800926c:	f104 0909 	add.w	r9, r4, #9
 8009270:	46c8      	mov	r8, r9
 8009272:	442c      	add	r4, r5
 8009274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009278:	4601      	mov	r1, r0
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	220a      	movs	r2, #10
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff8c 	bl	800919c <__multadd>
 8009284:	45a0      	cmp	r8, r4
 8009286:	d1f5      	bne.n	8009274 <__s2b+0x4c>
 8009288:	f1a5 0408 	sub.w	r4, r5, #8
 800928c:	444c      	add	r4, r9
 800928e:	1b2d      	subs	r5, r5, r4
 8009290:	1963      	adds	r3, r4, r5
 8009292:	42bb      	cmp	r3, r7
 8009294:	db04      	blt.n	80092a0 <__s2b+0x78>
 8009296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929a:	340a      	adds	r4, #10
 800929c:	2509      	movs	r5, #9
 800929e:	e7f6      	b.n	800928e <__s2b+0x66>
 80092a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092a4:	4601      	mov	r1, r0
 80092a6:	3b30      	subs	r3, #48	; 0x30
 80092a8:	220a      	movs	r2, #10
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ff76 	bl	800919c <__multadd>
 80092b0:	e7ee      	b.n	8009290 <__s2b+0x68>
 80092b2:	bf00      	nop
 80092b4:	0800a769 	.word	0x0800a769
 80092b8:	0800a7da 	.word	0x0800a7da

080092bc <__hi0bits>:
 80092bc:	0c03      	lsrs	r3, r0, #16
 80092be:	041b      	lsls	r3, r3, #16
 80092c0:	b9d3      	cbnz	r3, 80092f8 <__hi0bits+0x3c>
 80092c2:	0400      	lsls	r0, r0, #16
 80092c4:	2310      	movs	r3, #16
 80092c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092ca:	bf04      	itt	eq
 80092cc:	0200      	lsleq	r0, r0, #8
 80092ce:	3308      	addeq	r3, #8
 80092d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092d4:	bf04      	itt	eq
 80092d6:	0100      	lsleq	r0, r0, #4
 80092d8:	3304      	addeq	r3, #4
 80092da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092de:	bf04      	itt	eq
 80092e0:	0080      	lsleq	r0, r0, #2
 80092e2:	3302      	addeq	r3, #2
 80092e4:	2800      	cmp	r0, #0
 80092e6:	db05      	blt.n	80092f4 <__hi0bits+0x38>
 80092e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092ec:	f103 0301 	add.w	r3, r3, #1
 80092f0:	bf08      	it	eq
 80092f2:	2320      	moveq	r3, #32
 80092f4:	4618      	mov	r0, r3
 80092f6:	4770      	bx	lr
 80092f8:	2300      	movs	r3, #0
 80092fa:	e7e4      	b.n	80092c6 <__hi0bits+0xa>

080092fc <__lo0bits>:
 80092fc:	6803      	ldr	r3, [r0, #0]
 80092fe:	f013 0207 	ands.w	r2, r3, #7
 8009302:	d00c      	beq.n	800931e <__lo0bits+0x22>
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d422      	bmi.n	800934e <__lo0bits+0x52>
 8009308:	079a      	lsls	r2, r3, #30
 800930a:	bf49      	itett	mi
 800930c:	085b      	lsrmi	r3, r3, #1
 800930e:	089b      	lsrpl	r3, r3, #2
 8009310:	6003      	strmi	r3, [r0, #0]
 8009312:	2201      	movmi	r2, #1
 8009314:	bf5c      	itt	pl
 8009316:	6003      	strpl	r3, [r0, #0]
 8009318:	2202      	movpl	r2, #2
 800931a:	4610      	mov	r0, r2
 800931c:	4770      	bx	lr
 800931e:	b299      	uxth	r1, r3
 8009320:	b909      	cbnz	r1, 8009326 <__lo0bits+0x2a>
 8009322:	0c1b      	lsrs	r3, r3, #16
 8009324:	2210      	movs	r2, #16
 8009326:	b2d9      	uxtb	r1, r3
 8009328:	b909      	cbnz	r1, 800932e <__lo0bits+0x32>
 800932a:	3208      	adds	r2, #8
 800932c:	0a1b      	lsrs	r3, r3, #8
 800932e:	0719      	lsls	r1, r3, #28
 8009330:	bf04      	itt	eq
 8009332:	091b      	lsreq	r3, r3, #4
 8009334:	3204      	addeq	r2, #4
 8009336:	0799      	lsls	r1, r3, #30
 8009338:	bf04      	itt	eq
 800933a:	089b      	lsreq	r3, r3, #2
 800933c:	3202      	addeq	r2, #2
 800933e:	07d9      	lsls	r1, r3, #31
 8009340:	d403      	bmi.n	800934a <__lo0bits+0x4e>
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	f102 0201 	add.w	r2, r2, #1
 8009348:	d003      	beq.n	8009352 <__lo0bits+0x56>
 800934a:	6003      	str	r3, [r0, #0]
 800934c:	e7e5      	b.n	800931a <__lo0bits+0x1e>
 800934e:	2200      	movs	r2, #0
 8009350:	e7e3      	b.n	800931a <__lo0bits+0x1e>
 8009352:	2220      	movs	r2, #32
 8009354:	e7e1      	b.n	800931a <__lo0bits+0x1e>
	...

08009358 <__i2b>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	2101      	movs	r1, #1
 800935e:	f7ff febb 	bl	80090d8 <_Balloc>
 8009362:	4602      	mov	r2, r0
 8009364:	b928      	cbnz	r0, 8009372 <__i2b+0x1a>
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <__i2b+0x24>)
 8009368:	4805      	ldr	r0, [pc, #20]	; (8009380 <__i2b+0x28>)
 800936a:	f240 1145 	movw	r1, #325	; 0x145
 800936e:	f000 fd9d 	bl	8009eac <__assert_func>
 8009372:	2301      	movs	r3, #1
 8009374:	6144      	str	r4, [r0, #20]
 8009376:	6103      	str	r3, [r0, #16]
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	0800a769 	.word	0x0800a769
 8009380:	0800a7da 	.word	0x0800a7da

08009384 <__multiply>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	4691      	mov	r9, r2
 800938a:	690a      	ldr	r2, [r1, #16]
 800938c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009390:	429a      	cmp	r2, r3
 8009392:	bfb8      	it	lt
 8009394:	460b      	movlt	r3, r1
 8009396:	460c      	mov	r4, r1
 8009398:	bfbc      	itt	lt
 800939a:	464c      	movlt	r4, r9
 800939c:	4699      	movlt	r9, r3
 800939e:	6927      	ldr	r7, [r4, #16]
 80093a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	6861      	ldr	r1, [r4, #4]
 80093a8:	eb07 060a 	add.w	r6, r7, sl
 80093ac:	42b3      	cmp	r3, r6
 80093ae:	b085      	sub	sp, #20
 80093b0:	bfb8      	it	lt
 80093b2:	3101      	addlt	r1, #1
 80093b4:	f7ff fe90 	bl	80090d8 <_Balloc>
 80093b8:	b930      	cbnz	r0, 80093c8 <__multiply+0x44>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b44      	ldr	r3, [pc, #272]	; (80094d0 <__multiply+0x14c>)
 80093be:	4845      	ldr	r0, [pc, #276]	; (80094d4 <__multiply+0x150>)
 80093c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093c4:	f000 fd72 	bl	8009eac <__assert_func>
 80093c8:	f100 0514 	add.w	r5, r0, #20
 80093cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093d0:	462b      	mov	r3, r5
 80093d2:	2200      	movs	r2, #0
 80093d4:	4543      	cmp	r3, r8
 80093d6:	d321      	bcc.n	800941c <__multiply+0x98>
 80093d8:	f104 0314 	add.w	r3, r4, #20
 80093dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093e0:	f109 0314 	add.w	r3, r9, #20
 80093e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093e8:	9202      	str	r2, [sp, #8]
 80093ea:	1b3a      	subs	r2, r7, r4
 80093ec:	3a15      	subs	r2, #21
 80093ee:	f022 0203 	bic.w	r2, r2, #3
 80093f2:	3204      	adds	r2, #4
 80093f4:	f104 0115 	add.w	r1, r4, #21
 80093f8:	428f      	cmp	r7, r1
 80093fa:	bf38      	it	cc
 80093fc:	2204      	movcc	r2, #4
 80093fe:	9201      	str	r2, [sp, #4]
 8009400:	9a02      	ldr	r2, [sp, #8]
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	429a      	cmp	r2, r3
 8009406:	d80c      	bhi.n	8009422 <__multiply+0x9e>
 8009408:	2e00      	cmp	r6, #0
 800940a:	dd03      	ble.n	8009414 <__multiply+0x90>
 800940c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009410:	2b00      	cmp	r3, #0
 8009412:	d05b      	beq.n	80094cc <__multiply+0x148>
 8009414:	6106      	str	r6, [r0, #16]
 8009416:	b005      	add	sp, #20
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	f843 2b04 	str.w	r2, [r3], #4
 8009420:	e7d8      	b.n	80093d4 <__multiply+0x50>
 8009422:	f8b3 a000 	ldrh.w	sl, [r3]
 8009426:	f1ba 0f00 	cmp.w	sl, #0
 800942a:	d024      	beq.n	8009476 <__multiply+0xf2>
 800942c:	f104 0e14 	add.w	lr, r4, #20
 8009430:	46a9      	mov	r9, r5
 8009432:	f04f 0c00 	mov.w	ip, #0
 8009436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800943a:	f8d9 1000 	ldr.w	r1, [r9]
 800943e:	fa1f fb82 	uxth.w	fp, r2
 8009442:	b289      	uxth	r1, r1
 8009444:	fb0a 110b 	mla	r1, sl, fp, r1
 8009448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800944c:	f8d9 2000 	ldr.w	r2, [r9]
 8009450:	4461      	add	r1, ip
 8009452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009456:	fb0a c20b 	mla	r2, sl, fp, ip
 800945a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800945e:	b289      	uxth	r1, r1
 8009460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009464:	4577      	cmp	r7, lr
 8009466:	f849 1b04 	str.w	r1, [r9], #4
 800946a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800946e:	d8e2      	bhi.n	8009436 <__multiply+0xb2>
 8009470:	9a01      	ldr	r2, [sp, #4]
 8009472:	f845 c002 	str.w	ip, [r5, r2]
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800947c:	3304      	adds	r3, #4
 800947e:	f1b9 0f00 	cmp.w	r9, #0
 8009482:	d021      	beq.n	80094c8 <__multiply+0x144>
 8009484:	6829      	ldr	r1, [r5, #0]
 8009486:	f104 0c14 	add.w	ip, r4, #20
 800948a:	46ae      	mov	lr, r5
 800948c:	f04f 0a00 	mov.w	sl, #0
 8009490:	f8bc b000 	ldrh.w	fp, [ip]
 8009494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009498:	fb09 220b 	mla	r2, r9, fp, r2
 800949c:	4452      	add	r2, sl
 800949e:	b289      	uxth	r1, r1
 80094a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094a4:	f84e 1b04 	str.w	r1, [lr], #4
 80094a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094b0:	f8be 1000 	ldrh.w	r1, [lr]
 80094b4:	fb09 110a 	mla	r1, r9, sl, r1
 80094b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094bc:	4567      	cmp	r7, ip
 80094be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094c2:	d8e5      	bhi.n	8009490 <__multiply+0x10c>
 80094c4:	9a01      	ldr	r2, [sp, #4]
 80094c6:	50a9      	str	r1, [r5, r2]
 80094c8:	3504      	adds	r5, #4
 80094ca:	e799      	b.n	8009400 <__multiply+0x7c>
 80094cc:	3e01      	subs	r6, #1
 80094ce:	e79b      	b.n	8009408 <__multiply+0x84>
 80094d0:	0800a769 	.word	0x0800a769
 80094d4:	0800a7da 	.word	0x0800a7da

080094d8 <__pow5mult>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	4615      	mov	r5, r2
 80094de:	f012 0203 	ands.w	r2, r2, #3
 80094e2:	4606      	mov	r6, r0
 80094e4:	460f      	mov	r7, r1
 80094e6:	d007      	beq.n	80094f8 <__pow5mult+0x20>
 80094e8:	4c25      	ldr	r4, [pc, #148]	; (8009580 <__pow5mult+0xa8>)
 80094ea:	3a01      	subs	r2, #1
 80094ec:	2300      	movs	r3, #0
 80094ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094f2:	f7ff fe53 	bl	800919c <__multadd>
 80094f6:	4607      	mov	r7, r0
 80094f8:	10ad      	asrs	r5, r5, #2
 80094fa:	d03d      	beq.n	8009578 <__pow5mult+0xa0>
 80094fc:	69f4      	ldr	r4, [r6, #28]
 80094fe:	b97c      	cbnz	r4, 8009520 <__pow5mult+0x48>
 8009500:	2010      	movs	r0, #16
 8009502:	f7ff fd23 	bl	8008f4c <malloc>
 8009506:	4602      	mov	r2, r0
 8009508:	61f0      	str	r0, [r6, #28]
 800950a:	b928      	cbnz	r0, 8009518 <__pow5mult+0x40>
 800950c:	4b1d      	ldr	r3, [pc, #116]	; (8009584 <__pow5mult+0xac>)
 800950e:	481e      	ldr	r0, [pc, #120]	; (8009588 <__pow5mult+0xb0>)
 8009510:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009514:	f000 fcca 	bl	8009eac <__assert_func>
 8009518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800951c:	6004      	str	r4, [r0, #0]
 800951e:	60c4      	str	r4, [r0, #12]
 8009520:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009528:	b94c      	cbnz	r4, 800953e <__pow5mult+0x66>
 800952a:	f240 2171 	movw	r1, #625	; 0x271
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff ff12 	bl	8009358 <__i2b>
 8009534:	2300      	movs	r3, #0
 8009536:	f8c8 0008 	str.w	r0, [r8, #8]
 800953a:	4604      	mov	r4, r0
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	f04f 0900 	mov.w	r9, #0
 8009542:	07eb      	lsls	r3, r5, #31
 8009544:	d50a      	bpl.n	800955c <__pow5mult+0x84>
 8009546:	4639      	mov	r1, r7
 8009548:	4622      	mov	r2, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ff1a 	bl	8009384 <__multiply>
 8009550:	4639      	mov	r1, r7
 8009552:	4680      	mov	r8, r0
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff fdff 	bl	8009158 <_Bfree>
 800955a:	4647      	mov	r7, r8
 800955c:	106d      	asrs	r5, r5, #1
 800955e:	d00b      	beq.n	8009578 <__pow5mult+0xa0>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	b938      	cbnz	r0, 8009574 <__pow5mult+0x9c>
 8009564:	4622      	mov	r2, r4
 8009566:	4621      	mov	r1, r4
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ff0b 	bl	8009384 <__multiply>
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f8c0 9000 	str.w	r9, [r0]
 8009574:	4604      	mov	r4, r0
 8009576:	e7e4      	b.n	8009542 <__pow5mult+0x6a>
 8009578:	4638      	mov	r0, r7
 800957a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957e:	bf00      	nop
 8009580:	0800a928 	.word	0x0800a928
 8009584:	0800a6fa 	.word	0x0800a6fa
 8009588:	0800a7da 	.word	0x0800a7da

0800958c <__lshift>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	460c      	mov	r4, r1
 8009592:	6849      	ldr	r1, [r1, #4]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	4607      	mov	r7, r0
 800959e:	4691      	mov	r9, r2
 80095a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095a4:	f108 0601 	add.w	r6, r8, #1
 80095a8:	42b3      	cmp	r3, r6
 80095aa:	db0b      	blt.n	80095c4 <__lshift+0x38>
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff fd93 	bl	80090d8 <_Balloc>
 80095b2:	4605      	mov	r5, r0
 80095b4:	b948      	cbnz	r0, 80095ca <__lshift+0x3e>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b28      	ldr	r3, [pc, #160]	; (800965c <__lshift+0xd0>)
 80095ba:	4829      	ldr	r0, [pc, #164]	; (8009660 <__lshift+0xd4>)
 80095bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095c0:	f000 fc74 	bl	8009eac <__assert_func>
 80095c4:	3101      	adds	r1, #1
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	e7ee      	b.n	80095a8 <__lshift+0x1c>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f100 0114 	add.w	r1, r0, #20
 80095d0:	f100 0210 	add.w	r2, r0, #16
 80095d4:	4618      	mov	r0, r3
 80095d6:	4553      	cmp	r3, sl
 80095d8:	db33      	blt.n	8009642 <__lshift+0xb6>
 80095da:	6920      	ldr	r0, [r4, #16]
 80095dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095e0:	f104 0314 	add.w	r3, r4, #20
 80095e4:	f019 091f 	ands.w	r9, r9, #31
 80095e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095f0:	d02b      	beq.n	800964a <__lshift+0xbe>
 80095f2:	f1c9 0e20 	rsb	lr, r9, #32
 80095f6:	468a      	mov	sl, r1
 80095f8:	2200      	movs	r2, #0
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009600:	4310      	orrs	r0, r2
 8009602:	f84a 0b04 	str.w	r0, [sl], #4
 8009606:	f853 2b04 	ldr.w	r2, [r3], #4
 800960a:	459c      	cmp	ip, r3
 800960c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009610:	d8f3      	bhi.n	80095fa <__lshift+0x6e>
 8009612:	ebac 0304 	sub.w	r3, ip, r4
 8009616:	3b15      	subs	r3, #21
 8009618:	f023 0303 	bic.w	r3, r3, #3
 800961c:	3304      	adds	r3, #4
 800961e:	f104 0015 	add.w	r0, r4, #21
 8009622:	4584      	cmp	ip, r0
 8009624:	bf38      	it	cc
 8009626:	2304      	movcc	r3, #4
 8009628:	50ca      	str	r2, [r1, r3]
 800962a:	b10a      	cbz	r2, 8009630 <__lshift+0xa4>
 800962c:	f108 0602 	add.w	r6, r8, #2
 8009630:	3e01      	subs	r6, #1
 8009632:	4638      	mov	r0, r7
 8009634:	612e      	str	r6, [r5, #16]
 8009636:	4621      	mov	r1, r4
 8009638:	f7ff fd8e 	bl	8009158 <_Bfree>
 800963c:	4628      	mov	r0, r5
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	f842 0f04 	str.w	r0, [r2, #4]!
 8009646:	3301      	adds	r3, #1
 8009648:	e7c5      	b.n	80095d6 <__lshift+0x4a>
 800964a:	3904      	subs	r1, #4
 800964c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009650:	f841 2f04 	str.w	r2, [r1, #4]!
 8009654:	459c      	cmp	ip, r3
 8009656:	d8f9      	bhi.n	800964c <__lshift+0xc0>
 8009658:	e7ea      	b.n	8009630 <__lshift+0xa4>
 800965a:	bf00      	nop
 800965c:	0800a769 	.word	0x0800a769
 8009660:	0800a7da 	.word	0x0800a7da

08009664 <__mcmp>:
 8009664:	b530      	push	{r4, r5, lr}
 8009666:	6902      	ldr	r2, [r0, #16]
 8009668:	690c      	ldr	r4, [r1, #16]
 800966a:	1b12      	subs	r2, r2, r4
 800966c:	d10e      	bne.n	800968c <__mcmp+0x28>
 800966e:	f100 0314 	add.w	r3, r0, #20
 8009672:	3114      	adds	r1, #20
 8009674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800967c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009684:	42a5      	cmp	r5, r4
 8009686:	d003      	beq.n	8009690 <__mcmp+0x2c>
 8009688:	d305      	bcc.n	8009696 <__mcmp+0x32>
 800968a:	2201      	movs	r2, #1
 800968c:	4610      	mov	r0, r2
 800968e:	bd30      	pop	{r4, r5, pc}
 8009690:	4283      	cmp	r3, r0
 8009692:	d3f3      	bcc.n	800967c <__mcmp+0x18>
 8009694:	e7fa      	b.n	800968c <__mcmp+0x28>
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	e7f7      	b.n	800968c <__mcmp+0x28>

0800969c <__mdiff>:
 800969c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	460c      	mov	r4, r1
 80096a2:	4606      	mov	r6, r0
 80096a4:	4611      	mov	r1, r2
 80096a6:	4620      	mov	r0, r4
 80096a8:	4690      	mov	r8, r2
 80096aa:	f7ff ffdb 	bl	8009664 <__mcmp>
 80096ae:	1e05      	subs	r5, r0, #0
 80096b0:	d110      	bne.n	80096d4 <__mdiff+0x38>
 80096b2:	4629      	mov	r1, r5
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff fd0f 	bl	80090d8 <_Balloc>
 80096ba:	b930      	cbnz	r0, 80096ca <__mdiff+0x2e>
 80096bc:	4b3a      	ldr	r3, [pc, #232]	; (80097a8 <__mdiff+0x10c>)
 80096be:	4602      	mov	r2, r0
 80096c0:	f240 2137 	movw	r1, #567	; 0x237
 80096c4:	4839      	ldr	r0, [pc, #228]	; (80097ac <__mdiff+0x110>)
 80096c6:	f000 fbf1 	bl	8009eac <__assert_func>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	bfa4      	itt	ge
 80096d6:	4643      	movge	r3, r8
 80096d8:	46a0      	movge	r8, r4
 80096da:	4630      	mov	r0, r6
 80096dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096e0:	bfa6      	itte	ge
 80096e2:	461c      	movge	r4, r3
 80096e4:	2500      	movge	r5, #0
 80096e6:	2501      	movlt	r5, #1
 80096e8:	f7ff fcf6 	bl	80090d8 <_Balloc>
 80096ec:	b920      	cbnz	r0, 80096f8 <__mdiff+0x5c>
 80096ee:	4b2e      	ldr	r3, [pc, #184]	; (80097a8 <__mdiff+0x10c>)
 80096f0:	4602      	mov	r2, r0
 80096f2:	f240 2145 	movw	r1, #581	; 0x245
 80096f6:	e7e5      	b.n	80096c4 <__mdiff+0x28>
 80096f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096fc:	6926      	ldr	r6, [r4, #16]
 80096fe:	60c5      	str	r5, [r0, #12]
 8009700:	f104 0914 	add.w	r9, r4, #20
 8009704:	f108 0514 	add.w	r5, r8, #20
 8009708:	f100 0e14 	add.w	lr, r0, #20
 800970c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009714:	f108 0210 	add.w	r2, r8, #16
 8009718:	46f2      	mov	sl, lr
 800971a:	2100      	movs	r1, #0
 800971c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009724:	fa11 f88b 	uxtah	r8, r1, fp
 8009728:	b299      	uxth	r1, r3
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	eba8 0801 	sub.w	r8, r8, r1
 8009730:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009734:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009738:	fa1f f888 	uxth.w	r8, r8
 800973c:	1419      	asrs	r1, r3, #16
 800973e:	454e      	cmp	r6, r9
 8009740:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009744:	f84a 3b04 	str.w	r3, [sl], #4
 8009748:	d8e8      	bhi.n	800971c <__mdiff+0x80>
 800974a:	1b33      	subs	r3, r6, r4
 800974c:	3b15      	subs	r3, #21
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	3304      	adds	r3, #4
 8009754:	3415      	adds	r4, #21
 8009756:	42a6      	cmp	r6, r4
 8009758:	bf38      	it	cc
 800975a:	2304      	movcc	r3, #4
 800975c:	441d      	add	r5, r3
 800975e:	4473      	add	r3, lr
 8009760:	469e      	mov	lr, r3
 8009762:	462e      	mov	r6, r5
 8009764:	4566      	cmp	r6, ip
 8009766:	d30e      	bcc.n	8009786 <__mdiff+0xea>
 8009768:	f10c 0203 	add.w	r2, ip, #3
 800976c:	1b52      	subs	r2, r2, r5
 800976e:	f022 0203 	bic.w	r2, r2, #3
 8009772:	3d03      	subs	r5, #3
 8009774:	45ac      	cmp	ip, r5
 8009776:	bf38      	it	cc
 8009778:	2200      	movcc	r2, #0
 800977a:	4413      	add	r3, r2
 800977c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009780:	b17a      	cbz	r2, 80097a2 <__mdiff+0x106>
 8009782:	6107      	str	r7, [r0, #16]
 8009784:	e7a4      	b.n	80096d0 <__mdiff+0x34>
 8009786:	f856 8b04 	ldr.w	r8, [r6], #4
 800978a:	fa11 f288 	uxtah	r2, r1, r8
 800978e:	1414      	asrs	r4, r2, #16
 8009790:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009794:	b292      	uxth	r2, r2
 8009796:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800979a:	f84e 2b04 	str.w	r2, [lr], #4
 800979e:	1421      	asrs	r1, r4, #16
 80097a0:	e7e0      	b.n	8009764 <__mdiff+0xc8>
 80097a2:	3f01      	subs	r7, #1
 80097a4:	e7ea      	b.n	800977c <__mdiff+0xe0>
 80097a6:	bf00      	nop
 80097a8:	0800a769 	.word	0x0800a769
 80097ac:	0800a7da 	.word	0x0800a7da

080097b0 <__ulp>:
 80097b0:	b082      	sub	sp, #8
 80097b2:	ed8d 0b00 	vstr	d0, [sp]
 80097b6:	9a01      	ldr	r2, [sp, #4]
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <__ulp+0x48>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dc08      	bgt.n	80097d6 <__ulp+0x26>
 80097c4:	425b      	negs	r3, r3
 80097c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80097ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ce:	da04      	bge.n	80097da <__ulp+0x2a>
 80097d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097d4:	4113      	asrs	r3, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	e008      	b.n	80097ec <__ulp+0x3c>
 80097da:	f1a2 0314 	sub.w	r3, r2, #20
 80097de:	2b1e      	cmp	r3, #30
 80097e0:	bfda      	itte	le
 80097e2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80097e6:	40da      	lsrle	r2, r3
 80097e8:	2201      	movgt	r2, #1
 80097ea:	2300      	movs	r3, #0
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	ec41 0b10 	vmov	d0, r0, r1
 80097f4:	b002      	add	sp, #8
 80097f6:	4770      	bx	lr
 80097f8:	7ff00000 	.word	0x7ff00000

080097fc <__b2d>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	6906      	ldr	r6, [r0, #16]
 8009802:	f100 0814 	add.w	r8, r0, #20
 8009806:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800980a:	1f37      	subs	r7, r6, #4
 800980c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009810:	4610      	mov	r0, r2
 8009812:	f7ff fd53 	bl	80092bc <__hi0bits>
 8009816:	f1c0 0320 	rsb	r3, r0, #32
 800981a:	280a      	cmp	r0, #10
 800981c:	600b      	str	r3, [r1, #0]
 800981e:	491b      	ldr	r1, [pc, #108]	; (800988c <__b2d+0x90>)
 8009820:	dc15      	bgt.n	800984e <__b2d+0x52>
 8009822:	f1c0 0c0b 	rsb	ip, r0, #11
 8009826:	fa22 f30c 	lsr.w	r3, r2, ip
 800982a:	45b8      	cmp	r8, r7
 800982c:	ea43 0501 	orr.w	r5, r3, r1
 8009830:	bf34      	ite	cc
 8009832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009836:	2300      	movcs	r3, #0
 8009838:	3015      	adds	r0, #21
 800983a:	fa02 f000 	lsl.w	r0, r2, r0
 800983e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009842:	4303      	orrs	r3, r0
 8009844:	461c      	mov	r4, r3
 8009846:	ec45 4b10 	vmov	d0, r4, r5
 800984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984e:	45b8      	cmp	r8, r7
 8009850:	bf3a      	itte	cc
 8009852:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009856:	f1a6 0708 	subcc.w	r7, r6, #8
 800985a:	2300      	movcs	r3, #0
 800985c:	380b      	subs	r0, #11
 800985e:	d012      	beq.n	8009886 <__b2d+0x8a>
 8009860:	f1c0 0120 	rsb	r1, r0, #32
 8009864:	fa23 f401 	lsr.w	r4, r3, r1
 8009868:	4082      	lsls	r2, r0
 800986a:	4322      	orrs	r2, r4
 800986c:	4547      	cmp	r7, r8
 800986e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009872:	bf8c      	ite	hi
 8009874:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009878:	2200      	movls	r2, #0
 800987a:	4083      	lsls	r3, r0
 800987c:	40ca      	lsrs	r2, r1
 800987e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009882:	4313      	orrs	r3, r2
 8009884:	e7de      	b.n	8009844 <__b2d+0x48>
 8009886:	ea42 0501 	orr.w	r5, r2, r1
 800988a:	e7db      	b.n	8009844 <__b2d+0x48>
 800988c:	3ff00000 	.word	0x3ff00000

08009890 <__d2b>:
 8009890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009894:	460f      	mov	r7, r1
 8009896:	2101      	movs	r1, #1
 8009898:	ec59 8b10 	vmov	r8, r9, d0
 800989c:	4616      	mov	r6, r2
 800989e:	f7ff fc1b 	bl	80090d8 <_Balloc>
 80098a2:	4604      	mov	r4, r0
 80098a4:	b930      	cbnz	r0, 80098b4 <__d2b+0x24>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b24      	ldr	r3, [pc, #144]	; (800993c <__d2b+0xac>)
 80098aa:	4825      	ldr	r0, [pc, #148]	; (8009940 <__d2b+0xb0>)
 80098ac:	f240 310f 	movw	r1, #783	; 0x30f
 80098b0:	f000 fafc 	bl	8009eac <__assert_func>
 80098b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098bc:	bb2d      	cbnz	r5, 800990a <__d2b+0x7a>
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	f1b8 0300 	subs.w	r3, r8, #0
 80098c4:	d026      	beq.n	8009914 <__d2b+0x84>
 80098c6:	4668      	mov	r0, sp
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	f7ff fd17 	bl	80092fc <__lo0bits>
 80098ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098d2:	b1e8      	cbz	r0, 8009910 <__d2b+0x80>
 80098d4:	f1c0 0320 	rsb	r3, r0, #32
 80098d8:	fa02 f303 	lsl.w	r3, r2, r3
 80098dc:	430b      	orrs	r3, r1
 80098de:	40c2      	lsrs	r2, r0
 80098e0:	6163      	str	r3, [r4, #20]
 80098e2:	9201      	str	r2, [sp, #4]
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	61a3      	str	r3, [r4, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf14      	ite	ne
 80098ec:	2202      	movne	r2, #2
 80098ee:	2201      	moveq	r2, #1
 80098f0:	6122      	str	r2, [r4, #16]
 80098f2:	b1bd      	cbz	r5, 8009924 <__d2b+0x94>
 80098f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098f8:	4405      	add	r5, r0
 80098fa:	603d      	str	r5, [r7, #0]
 80098fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009900:	6030      	str	r0, [r6, #0]
 8009902:	4620      	mov	r0, r4
 8009904:	b003      	add	sp, #12
 8009906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800990e:	e7d6      	b.n	80098be <__d2b+0x2e>
 8009910:	6161      	str	r1, [r4, #20]
 8009912:	e7e7      	b.n	80098e4 <__d2b+0x54>
 8009914:	a801      	add	r0, sp, #4
 8009916:	f7ff fcf1 	bl	80092fc <__lo0bits>
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	6163      	str	r3, [r4, #20]
 800991e:	3020      	adds	r0, #32
 8009920:	2201      	movs	r2, #1
 8009922:	e7e5      	b.n	80098f0 <__d2b+0x60>
 8009924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800992c:	6038      	str	r0, [r7, #0]
 800992e:	6918      	ldr	r0, [r3, #16]
 8009930:	f7ff fcc4 	bl	80092bc <__hi0bits>
 8009934:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009938:	e7e2      	b.n	8009900 <__d2b+0x70>
 800993a:	bf00      	nop
 800993c:	0800a769 	.word	0x0800a769
 8009940:	0800a7da 	.word	0x0800a7da

08009944 <__ratio>:
 8009944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	4688      	mov	r8, r1
 800994a:	4669      	mov	r1, sp
 800994c:	4681      	mov	r9, r0
 800994e:	f7ff ff55 	bl	80097fc <__b2d>
 8009952:	a901      	add	r1, sp, #4
 8009954:	4640      	mov	r0, r8
 8009956:	ec55 4b10 	vmov	r4, r5, d0
 800995a:	f7ff ff4f 	bl	80097fc <__b2d>
 800995e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009962:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009966:	eba3 0c02 	sub.w	ip, r3, r2
 800996a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009974:	ec51 0b10 	vmov	r0, r1, d0
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfd6      	itet	le
 800997c:	460a      	movle	r2, r1
 800997e:	462a      	movgt	r2, r5
 8009980:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009984:	468b      	mov	fp, r1
 8009986:	462f      	mov	r7, r5
 8009988:	bfd4      	ite	le
 800998a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800998e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009992:	4620      	mov	r0, r4
 8009994:	ee10 2a10 	vmov	r2, s0
 8009998:	465b      	mov	r3, fp
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 ff66 	bl	800086c <__aeabi_ddiv>
 80099a0:	ec41 0b10 	vmov	d0, r0, r1
 80099a4:	b003      	add	sp, #12
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099aa <__copybits>:
 80099aa:	3901      	subs	r1, #1
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	1149      	asrs	r1, r1, #5
 80099b0:	6914      	ldr	r4, [r2, #16]
 80099b2:	3101      	adds	r1, #1
 80099b4:	f102 0314 	add.w	r3, r2, #20
 80099b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099c0:	1f05      	subs	r5, r0, #4
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	d30c      	bcc.n	80099e0 <__copybits+0x36>
 80099c6:	1aa3      	subs	r3, r4, r2
 80099c8:	3b11      	subs	r3, #17
 80099ca:	f023 0303 	bic.w	r3, r3, #3
 80099ce:	3211      	adds	r2, #17
 80099d0:	42a2      	cmp	r2, r4
 80099d2:	bf88      	it	hi
 80099d4:	2300      	movhi	r3, #0
 80099d6:	4418      	add	r0, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	4288      	cmp	r0, r1
 80099dc:	d305      	bcc.n	80099ea <__copybits+0x40>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80099e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80099e8:	e7eb      	b.n	80099c2 <__copybits+0x18>
 80099ea:	f840 3b04 	str.w	r3, [r0], #4
 80099ee:	e7f4      	b.n	80099da <__copybits+0x30>

080099f0 <__any_on>:
 80099f0:	f100 0214 	add.w	r2, r0, #20
 80099f4:	6900      	ldr	r0, [r0, #16]
 80099f6:	114b      	asrs	r3, r1, #5
 80099f8:	4298      	cmp	r0, r3
 80099fa:	b510      	push	{r4, lr}
 80099fc:	db11      	blt.n	8009a22 <__any_on+0x32>
 80099fe:	dd0a      	ble.n	8009a16 <__any_on+0x26>
 8009a00:	f011 011f 	ands.w	r1, r1, #31
 8009a04:	d007      	beq.n	8009a16 <__any_on+0x26>
 8009a06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a0a:	fa24 f001 	lsr.w	r0, r4, r1
 8009a0e:	fa00 f101 	lsl.w	r1, r0, r1
 8009a12:	428c      	cmp	r4, r1
 8009a14:	d10b      	bne.n	8009a2e <__any_on+0x3e>
 8009a16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d803      	bhi.n	8009a26 <__any_on+0x36>
 8009a1e:	2000      	movs	r0, #0
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	4603      	mov	r3, r0
 8009a24:	e7f7      	b.n	8009a16 <__any_on+0x26>
 8009a26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d0f5      	beq.n	8009a1a <__any_on+0x2a>
 8009a2e:	2001      	movs	r0, #1
 8009a30:	e7f6      	b.n	8009a20 <__any_on+0x30>

08009a32 <__ascii_wctomb>:
 8009a32:	b149      	cbz	r1, 8009a48 <__ascii_wctomb+0x16>
 8009a34:	2aff      	cmp	r2, #255	; 0xff
 8009a36:	bf85      	ittet	hi
 8009a38:	238a      	movhi	r3, #138	; 0x8a
 8009a3a:	6003      	strhi	r3, [r0, #0]
 8009a3c:	700a      	strbls	r2, [r1, #0]
 8009a3e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a42:	bf98      	it	ls
 8009a44:	2001      	movls	r0, #1
 8009a46:	4770      	bx	lr
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4770      	bx	lr

08009a4c <__ssputs_r>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	688e      	ldr	r6, [r1, #8]
 8009a52:	461f      	mov	r7, r3
 8009a54:	42be      	cmp	r6, r7
 8009a56:	680b      	ldr	r3, [r1, #0]
 8009a58:	4682      	mov	sl, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	4690      	mov	r8, r2
 8009a5e:	d82c      	bhi.n	8009aba <__ssputs_r+0x6e>
 8009a60:	898a      	ldrh	r2, [r1, #12]
 8009a62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a66:	d026      	beq.n	8009ab6 <__ssputs_r+0x6a>
 8009a68:	6965      	ldr	r5, [r4, #20]
 8009a6a:	6909      	ldr	r1, [r1, #16]
 8009a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a70:	eba3 0901 	sub.w	r9, r3, r1
 8009a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a78:	1c7b      	adds	r3, r7, #1
 8009a7a:	444b      	add	r3, r9
 8009a7c:	106d      	asrs	r5, r5, #1
 8009a7e:	429d      	cmp	r5, r3
 8009a80:	bf38      	it	cc
 8009a82:	461d      	movcc	r5, r3
 8009a84:	0553      	lsls	r3, r2, #21
 8009a86:	d527      	bpl.n	8009ad8 <__ssputs_r+0x8c>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7ff fa87 	bl	8008f9c <_malloc_r>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	b360      	cbz	r0, 8009aec <__ssputs_r+0xa0>
 8009a92:	6921      	ldr	r1, [r4, #16]
 8009a94:	464a      	mov	r2, r9
 8009a96:	f7fe f81a 	bl	8007ace <memcpy>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	6126      	str	r6, [r4, #16]
 8009aa8:	6165      	str	r5, [r4, #20]
 8009aaa:	444e      	add	r6, r9
 8009aac:	eba5 0509 	sub.w	r5, r5, r9
 8009ab0:	6026      	str	r6, [r4, #0]
 8009ab2:	60a5      	str	r5, [r4, #8]
 8009ab4:	463e      	mov	r6, r7
 8009ab6:	42be      	cmp	r6, r7
 8009ab8:	d900      	bls.n	8009abc <__ssputs_r+0x70>
 8009aba:	463e      	mov	r6, r7
 8009abc:	6820      	ldr	r0, [r4, #0]
 8009abe:	4632      	mov	r2, r6
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	f000 f9c9 	bl	8009e58 <memmove>
 8009ac6:	68a3      	ldr	r3, [r4, #8]
 8009ac8:	1b9b      	subs	r3, r3, r6
 8009aca:	60a3      	str	r3, [r4, #8]
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	4433      	add	r3, r6
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad8:	462a      	mov	r2, r5
 8009ada:	f000 fa1b 	bl	8009f14 <_realloc_r>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1e0      	bne.n	8009aa6 <__ssputs_r+0x5a>
 8009ae4:	6921      	ldr	r1, [r4, #16]
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	f7fe fe8c 	bl	8008804 <_free_r>
 8009aec:	230c      	movs	r3, #12
 8009aee:	f8ca 3000 	str.w	r3, [sl]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	e7e9      	b.n	8009ad4 <__ssputs_r+0x88>

08009b00 <_svfiprintf_r>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4698      	mov	r8, r3
 8009b06:	898b      	ldrh	r3, [r1, #12]
 8009b08:	061b      	lsls	r3, r3, #24
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	d50e      	bpl.n	8009b32 <_svfiprintf_r+0x32>
 8009b14:	690b      	ldr	r3, [r1, #16]
 8009b16:	b963      	cbnz	r3, 8009b32 <_svfiprintf_r+0x32>
 8009b18:	2140      	movs	r1, #64	; 0x40
 8009b1a:	f7ff fa3f 	bl	8008f9c <_malloc_r>
 8009b1e:	6028      	str	r0, [r5, #0]
 8009b20:	6128      	str	r0, [r5, #16]
 8009b22:	b920      	cbnz	r0, 8009b2e <_svfiprintf_r+0x2e>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e0d0      	b.n	8009cd0 <_svfiprintf_r+0x1d0>
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	616b      	str	r3, [r5, #20]
 8009b32:	2300      	movs	r3, #0
 8009b34:	9309      	str	r3, [sp, #36]	; 0x24
 8009b36:	2320      	movs	r3, #32
 8009b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b40:	2330      	movs	r3, #48	; 0x30
 8009b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ce8 <_svfiprintf_r+0x1e8>
 8009b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4a:	f04f 0901 	mov.w	r9, #1
 8009b4e:	4623      	mov	r3, r4
 8009b50:	469a      	mov	sl, r3
 8009b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b56:	b10a      	cbz	r2, 8009b5c <_svfiprintf_r+0x5c>
 8009b58:	2a25      	cmp	r2, #37	; 0x25
 8009b5a:	d1f9      	bne.n	8009b50 <_svfiprintf_r+0x50>
 8009b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b60:	d00b      	beq.n	8009b7a <_svfiprintf_r+0x7a>
 8009b62:	465b      	mov	r3, fp
 8009b64:	4622      	mov	r2, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7ff ff6f 	bl	8009a4c <__ssputs_r>
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f000 80a9 	beq.w	8009cc6 <_svfiprintf_r+0x1c6>
 8009b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b76:	445a      	add	r2, fp
 8009b78:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80a1 	beq.w	8009cc6 <_svfiprintf_r+0x1c6>
 8009b84:	2300      	movs	r3, #0
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8e:	f10a 0a01 	add.w	sl, sl, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9c:	4654      	mov	r4, sl
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba4:	4850      	ldr	r0, [pc, #320]	; (8009ce8 <_svfiprintf_r+0x1e8>)
 8009ba6:	f7f6 fb23 	bl	80001f0 <memchr>
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	b9d8      	cbnz	r0, 8009be6 <_svfiprintf_r+0xe6>
 8009bae:	06d0      	lsls	r0, r2, #27
 8009bb0:	bf44      	itt	mi
 8009bb2:	2320      	movmi	r3, #32
 8009bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb8:	0711      	lsls	r1, r2, #28
 8009bba:	bf44      	itt	mi
 8009bbc:	232b      	movmi	r3, #43	; 0x2b
 8009bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d015      	beq.n	8009bf6 <_svfiprintf_r+0xf6>
 8009bca:	9a07      	ldr	r2, [sp, #28]
 8009bcc:	4654      	mov	r4, sl
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bda:	3b30      	subs	r3, #48	; 0x30
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d94d      	bls.n	8009c7c <_svfiprintf_r+0x17c>
 8009be0:	b1b0      	cbz	r0, 8009c10 <_svfiprintf_r+0x110>
 8009be2:	9207      	str	r2, [sp, #28]
 8009be4:	e014      	b.n	8009c10 <_svfiprintf_r+0x110>
 8009be6:	eba0 0308 	sub.w	r3, r0, r8
 8009bea:	fa09 f303 	lsl.w	r3, r9, r3
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	46a2      	mov	sl, r4
 8009bf4:	e7d2      	b.n	8009b9c <_svfiprintf_r+0x9c>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	1d19      	adds	r1, r3, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	9103      	str	r1, [sp, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfbb      	ittet	lt
 8009c02:	425b      	neglt	r3, r3
 8009c04:	f042 0202 	orrlt.w	r2, r2, #2
 8009c08:	9307      	strge	r3, [sp, #28]
 8009c0a:	9307      	strlt	r3, [sp, #28]
 8009c0c:	bfb8      	it	lt
 8009c0e:	9204      	strlt	r2, [sp, #16]
 8009c10:	7823      	ldrb	r3, [r4, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d10c      	bne.n	8009c30 <_svfiprintf_r+0x130>
 8009c16:	7863      	ldrb	r3, [r4, #1]
 8009c18:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1a:	d134      	bne.n	8009c86 <_svfiprintf_r+0x186>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb8      	it	lt
 8009c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c2c:	3402      	adds	r4, #2
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009cf8 <_svfiprintf_r+0x1f8>
 8009c34:	7821      	ldrb	r1, [r4, #0]
 8009c36:	2203      	movs	r2, #3
 8009c38:	4650      	mov	r0, sl
 8009c3a:	f7f6 fad9 	bl	80001f0 <memchr>
 8009c3e:	b138      	cbz	r0, 8009c50 <_svfiprintf_r+0x150>
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	eba0 000a 	sub.w	r0, r0, sl
 8009c46:	2240      	movs	r2, #64	; 0x40
 8009c48:	4082      	lsls	r2, r0
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c54:	4825      	ldr	r0, [pc, #148]	; (8009cec <_svfiprintf_r+0x1ec>)
 8009c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5a:	2206      	movs	r2, #6
 8009c5c:	f7f6 fac8 	bl	80001f0 <memchr>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d038      	beq.n	8009cd6 <_svfiprintf_r+0x1d6>
 8009c64:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <_svfiprintf_r+0x1f0>)
 8009c66:	bb1b      	cbnz	r3, 8009cb0 <_svfiprintf_r+0x1b0>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	3307      	adds	r3, #7
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	3308      	adds	r3, #8
 8009c72:	9303      	str	r3, [sp, #12]
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	4433      	add	r3, r6
 8009c78:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7a:	e768      	b.n	8009b4e <_svfiprintf_r+0x4e>
 8009c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c80:	460c      	mov	r4, r1
 8009c82:	2001      	movs	r0, #1
 8009c84:	e7a6      	b.n	8009bd4 <_svfiprintf_r+0xd4>
 8009c86:	2300      	movs	r3, #0
 8009c88:	3401      	adds	r4, #1
 8009c8a:	9305      	str	r3, [sp, #20]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f04f 0c0a 	mov.w	ip, #10
 8009c92:	4620      	mov	r0, r4
 8009c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c98:	3a30      	subs	r2, #48	; 0x30
 8009c9a:	2a09      	cmp	r2, #9
 8009c9c:	d903      	bls.n	8009ca6 <_svfiprintf_r+0x1a6>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0c6      	beq.n	8009c30 <_svfiprintf_r+0x130>
 8009ca2:	9105      	str	r1, [sp, #20]
 8009ca4:	e7c4      	b.n	8009c30 <_svfiprintf_r+0x130>
 8009ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009caa:	4604      	mov	r4, r0
 8009cac:	2301      	movs	r3, #1
 8009cae:	e7f0      	b.n	8009c92 <_svfiprintf_r+0x192>
 8009cb0:	ab03      	add	r3, sp, #12
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <_svfiprintf_r+0x1f4>)
 8009cb8:	a904      	add	r1, sp, #16
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f7fd f96e 	bl	8006f9c <_printf_float>
 8009cc0:	1c42      	adds	r2, r0, #1
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	d1d6      	bne.n	8009c74 <_svfiprintf_r+0x174>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	065b      	lsls	r3, r3, #25
 8009cca:	f53f af2d 	bmi.w	8009b28 <_svfiprintf_r+0x28>
 8009cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd0:	b01d      	add	sp, #116	; 0x74
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <_svfiprintf_r+0x1f4>)
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7fd fbff 	bl	80074e4 <_printf_i>
 8009ce6:	e7eb      	b.n	8009cc0 <_svfiprintf_r+0x1c0>
 8009ce8:	0800a934 	.word	0x0800a934
 8009cec:	0800a93e 	.word	0x0800a93e
 8009cf0:	08006f9d 	.word	0x08006f9d
 8009cf4:	08009a4d 	.word	0x08009a4d
 8009cf8:	0800a93a 	.word	0x0800a93a

08009cfc <__sflush_r>:
 8009cfc:	898a      	ldrh	r2, [r1, #12]
 8009cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d02:	4605      	mov	r5, r0
 8009d04:	0710      	lsls	r0, r2, #28
 8009d06:	460c      	mov	r4, r1
 8009d08:	d458      	bmi.n	8009dbc <__sflush_r+0xc0>
 8009d0a:	684b      	ldr	r3, [r1, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dc05      	bgt.n	8009d1c <__sflush_r+0x20>
 8009d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dc02      	bgt.n	8009d1c <__sflush_r+0x20>
 8009d16:	2000      	movs	r0, #0
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d1e:	2e00      	cmp	r6, #0
 8009d20:	d0f9      	beq.n	8009d16 <__sflush_r+0x1a>
 8009d22:	2300      	movs	r3, #0
 8009d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d28:	682f      	ldr	r7, [r5, #0]
 8009d2a:	6a21      	ldr	r1, [r4, #32]
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	d032      	beq.n	8009d96 <__sflush_r+0x9a>
 8009d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	075a      	lsls	r2, r3, #29
 8009d36:	d505      	bpl.n	8009d44 <__sflush_r+0x48>
 8009d38:	6863      	ldr	r3, [r4, #4]
 8009d3a:	1ac0      	subs	r0, r0, r3
 8009d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d3e:	b10b      	cbz	r3, 8009d44 <__sflush_r+0x48>
 8009d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d42:	1ac0      	subs	r0, r0, r3
 8009d44:	2300      	movs	r3, #0
 8009d46:	4602      	mov	r2, r0
 8009d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d4a:	6a21      	ldr	r1, [r4, #32]
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	d106      	bne.n	8009d64 <__sflush_r+0x68>
 8009d56:	6829      	ldr	r1, [r5, #0]
 8009d58:	291d      	cmp	r1, #29
 8009d5a:	d82b      	bhi.n	8009db4 <__sflush_r+0xb8>
 8009d5c:	4a29      	ldr	r2, [pc, #164]	; (8009e04 <__sflush_r+0x108>)
 8009d5e:	410a      	asrs	r2, r1
 8009d60:	07d6      	lsls	r6, r2, #31
 8009d62:	d427      	bmi.n	8009db4 <__sflush_r+0xb8>
 8009d64:	2200      	movs	r2, #0
 8009d66:	6062      	str	r2, [r4, #4]
 8009d68:	04d9      	lsls	r1, r3, #19
 8009d6a:	6922      	ldr	r2, [r4, #16]
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	d504      	bpl.n	8009d7a <__sflush_r+0x7e>
 8009d70:	1c42      	adds	r2, r0, #1
 8009d72:	d101      	bne.n	8009d78 <__sflush_r+0x7c>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b903      	cbnz	r3, 8009d7a <__sflush_r+0x7e>
 8009d78:	6560      	str	r0, [r4, #84]	; 0x54
 8009d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d7c:	602f      	str	r7, [r5, #0]
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	d0c9      	beq.n	8009d16 <__sflush_r+0x1a>
 8009d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d86:	4299      	cmp	r1, r3
 8009d88:	d002      	beq.n	8009d90 <__sflush_r+0x94>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f7fe fd3a 	bl	8008804 <_free_r>
 8009d90:	2000      	movs	r0, #0
 8009d92:	6360      	str	r0, [r4, #52]	; 0x34
 8009d94:	e7c0      	b.n	8009d18 <__sflush_r+0x1c>
 8009d96:	2301      	movs	r3, #1
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b0      	blx	r6
 8009d9c:	1c41      	adds	r1, r0, #1
 8009d9e:	d1c8      	bne.n	8009d32 <__sflush_r+0x36>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0c5      	beq.n	8009d32 <__sflush_r+0x36>
 8009da6:	2b1d      	cmp	r3, #29
 8009da8:	d001      	beq.n	8009dae <__sflush_r+0xb2>
 8009daa:	2b16      	cmp	r3, #22
 8009dac:	d101      	bne.n	8009db2 <__sflush_r+0xb6>
 8009dae:	602f      	str	r7, [r5, #0]
 8009db0:	e7b1      	b.n	8009d16 <__sflush_r+0x1a>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	e7ad      	b.n	8009d18 <__sflush_r+0x1c>
 8009dbc:	690f      	ldr	r7, [r1, #16]
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	d0a9      	beq.n	8009d16 <__sflush_r+0x1a>
 8009dc2:	0793      	lsls	r3, r2, #30
 8009dc4:	680e      	ldr	r6, [r1, #0]
 8009dc6:	bf08      	it	eq
 8009dc8:	694b      	ldreq	r3, [r1, #20]
 8009dca:	600f      	str	r7, [r1, #0]
 8009dcc:	bf18      	it	ne
 8009dce:	2300      	movne	r3, #0
 8009dd0:	eba6 0807 	sub.w	r8, r6, r7
 8009dd4:	608b      	str	r3, [r1, #8]
 8009dd6:	f1b8 0f00 	cmp.w	r8, #0
 8009dda:	dd9c      	ble.n	8009d16 <__sflush_r+0x1a>
 8009ddc:	6a21      	ldr	r1, [r4, #32]
 8009dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de0:	4643      	mov	r3, r8
 8009de2:	463a      	mov	r2, r7
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b0      	blx	r6
 8009de8:	2800      	cmp	r0, #0
 8009dea:	dc06      	bgt.n	8009dfa <__sflush_r+0xfe>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295
 8009df8:	e78e      	b.n	8009d18 <__sflush_r+0x1c>
 8009dfa:	4407      	add	r7, r0
 8009dfc:	eba8 0800 	sub.w	r8, r8, r0
 8009e00:	e7e9      	b.n	8009dd6 <__sflush_r+0xda>
 8009e02:	bf00      	nop
 8009e04:	dfbffffe 	.word	0xdfbffffe

08009e08 <_fflush_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	690b      	ldr	r3, [r1, #16]
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	b913      	cbnz	r3, 8009e18 <_fflush_r+0x10>
 8009e12:	2500      	movs	r5, #0
 8009e14:	4628      	mov	r0, r5
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	b118      	cbz	r0, 8009e22 <_fflush_r+0x1a>
 8009e1a:	6a03      	ldr	r3, [r0, #32]
 8009e1c:	b90b      	cbnz	r3, 8009e22 <_fflush_r+0x1a>
 8009e1e:	f7fd fd0f 	bl	8007840 <__sinit>
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0f3      	beq.n	8009e12 <_fflush_r+0xa>
 8009e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e2c:	07d0      	lsls	r0, r2, #31
 8009e2e:	d404      	bmi.n	8009e3a <_fflush_r+0x32>
 8009e30:	0599      	lsls	r1, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_fflush_r+0x32>
 8009e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e36:	f7fd fe40 	bl	8007aba <__retarget_lock_acquire_recursive>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	f7ff ff5d 	bl	8009cfc <__sflush_r>
 8009e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e44:	07da      	lsls	r2, r3, #31
 8009e46:	4605      	mov	r5, r0
 8009e48:	d4e4      	bmi.n	8009e14 <_fflush_r+0xc>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	059b      	lsls	r3, r3, #22
 8009e4e:	d4e1      	bmi.n	8009e14 <_fflush_r+0xc>
 8009e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e52:	f7fd fe33 	bl	8007abc <__retarget_lock_release_recursive>
 8009e56:	e7dd      	b.n	8009e14 <_fflush_r+0xc>

08009e58 <memmove>:
 8009e58:	4288      	cmp	r0, r1
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	eb01 0402 	add.w	r4, r1, r2
 8009e60:	d902      	bls.n	8009e68 <memmove+0x10>
 8009e62:	4284      	cmp	r4, r0
 8009e64:	4623      	mov	r3, r4
 8009e66:	d807      	bhi.n	8009e78 <memmove+0x20>
 8009e68:	1e43      	subs	r3, r0, #1
 8009e6a:	42a1      	cmp	r1, r4
 8009e6c:	d008      	beq.n	8009e80 <memmove+0x28>
 8009e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e76:	e7f8      	b.n	8009e6a <memmove+0x12>
 8009e78:	4402      	add	r2, r0
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	428a      	cmp	r2, r1
 8009e7e:	d100      	bne.n	8009e82 <memmove+0x2a>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e8a:	e7f7      	b.n	8009e7c <memmove+0x24>

08009e8c <_sbrk_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d06      	ldr	r5, [pc, #24]	; (8009ea8 <_sbrk_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f7 fd9e 	bl	80019d8 <_sbrk>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_sbrk_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_sbrk_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20000564 	.word	0x20000564

08009eac <__assert_func>:
 8009eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eae:	4614      	mov	r4, r2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <__assert_func+0x2c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	68d8      	ldr	r0, [r3, #12]
 8009eba:	b14c      	cbz	r4, 8009ed0 <__assert_func+0x24>
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <__assert_func+0x30>)
 8009ebe:	9100      	str	r1, [sp, #0]
 8009ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ec4:	4906      	ldr	r1, [pc, #24]	; (8009ee0 <__assert_func+0x34>)
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	f000 f854 	bl	8009f74 <fiprintf>
 8009ecc:	f000 f864 	bl	8009f98 <abort>
 8009ed0:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <__assert_func+0x38>)
 8009ed2:	461c      	mov	r4, r3
 8009ed4:	e7f3      	b.n	8009ebe <__assert_func+0x12>
 8009ed6:	bf00      	nop
 8009ed8:	200001d0 	.word	0x200001d0
 8009edc:	0800a945 	.word	0x0800a945
 8009ee0:	0800a952 	.word	0x0800a952
 8009ee4:	0800a980 	.word	0x0800a980

08009ee8 <_calloc_r>:
 8009ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eea:	fba1 2402 	umull	r2, r4, r1, r2
 8009eee:	b94c      	cbnz	r4, 8009f04 <_calloc_r+0x1c>
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	9201      	str	r2, [sp, #4]
 8009ef4:	f7ff f852 	bl	8008f9c <_malloc_r>
 8009ef8:	9a01      	ldr	r2, [sp, #4]
 8009efa:	4605      	mov	r5, r0
 8009efc:	b930      	cbnz	r0, 8009f0c <_calloc_r+0x24>
 8009efe:	4628      	mov	r0, r5
 8009f00:	b003      	add	sp, #12
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	220c      	movs	r2, #12
 8009f06:	6002      	str	r2, [r0, #0]
 8009f08:	2500      	movs	r5, #0
 8009f0a:	e7f8      	b.n	8009efe <_calloc_r+0x16>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	f7fd fd44 	bl	800799a <memset>
 8009f12:	e7f4      	b.n	8009efe <_calloc_r+0x16>

08009f14 <_realloc_r>:
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	4680      	mov	r8, r0
 8009f1a:	4614      	mov	r4, r2
 8009f1c:	460e      	mov	r6, r1
 8009f1e:	b921      	cbnz	r1, 8009f2a <_realloc_r+0x16>
 8009f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f24:	4611      	mov	r1, r2
 8009f26:	f7ff b839 	b.w	8008f9c <_malloc_r>
 8009f2a:	b92a      	cbnz	r2, 8009f38 <_realloc_r+0x24>
 8009f2c:	f7fe fc6a 	bl	8008804 <_free_r>
 8009f30:	4625      	mov	r5, r4
 8009f32:	4628      	mov	r0, r5
 8009f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f38:	f000 f835 	bl	8009fa6 <_malloc_usable_size_r>
 8009f3c:	4284      	cmp	r4, r0
 8009f3e:	4607      	mov	r7, r0
 8009f40:	d802      	bhi.n	8009f48 <_realloc_r+0x34>
 8009f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f46:	d812      	bhi.n	8009f6e <_realloc_r+0x5a>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	f7ff f826 	bl	8008f9c <_malloc_r>
 8009f50:	4605      	mov	r5, r0
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d0ed      	beq.n	8009f32 <_realloc_r+0x1e>
 8009f56:	42bc      	cmp	r4, r7
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	bf28      	it	cs
 8009f5e:	463a      	movcs	r2, r7
 8009f60:	f7fd fdb5 	bl	8007ace <memcpy>
 8009f64:	4631      	mov	r1, r6
 8009f66:	4640      	mov	r0, r8
 8009f68:	f7fe fc4c 	bl	8008804 <_free_r>
 8009f6c:	e7e1      	b.n	8009f32 <_realloc_r+0x1e>
 8009f6e:	4635      	mov	r5, r6
 8009f70:	e7df      	b.n	8009f32 <_realloc_r+0x1e>
	...

08009f74 <fiprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b503      	push	{r0, r1, lr}
 8009f78:	4601      	mov	r1, r0
 8009f7a:	ab03      	add	r3, sp, #12
 8009f7c:	4805      	ldr	r0, [pc, #20]	; (8009f94 <fiprintf+0x20>)
 8009f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f82:	6800      	ldr	r0, [r0, #0]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	f000 f83f 	bl	800a008 <_vfiprintf_r>
 8009f8a:	b002      	add	sp, #8
 8009f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f90:	b003      	add	sp, #12
 8009f92:	4770      	bx	lr
 8009f94:	200001d0 	.word	0x200001d0

08009f98 <abort>:
 8009f98:	b508      	push	{r3, lr}
 8009f9a:	2006      	movs	r0, #6
 8009f9c:	f000 fa0c 	bl	800a3b8 <raise>
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	f7f7 fca1 	bl	80018e8 <_exit>

08009fa6 <_malloc_usable_size_r>:
 8009fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009faa:	1f18      	subs	r0, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bfbc      	itt	lt
 8009fb0:	580b      	ldrlt	r3, [r1, r0]
 8009fb2:	18c0      	addlt	r0, r0, r3
 8009fb4:	4770      	bx	lr

08009fb6 <__sfputc_r>:
 8009fb6:	6893      	ldr	r3, [r2, #8]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	b410      	push	{r4}
 8009fbe:	6093      	str	r3, [r2, #8]
 8009fc0:	da08      	bge.n	8009fd4 <__sfputc_r+0x1e>
 8009fc2:	6994      	ldr	r4, [r2, #24]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	db01      	blt.n	8009fcc <__sfputc_r+0x16>
 8009fc8:	290a      	cmp	r1, #10
 8009fca:	d103      	bne.n	8009fd4 <__sfputc_r+0x1e>
 8009fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd0:	f000 b934 	b.w	800a23c <__swbuf_r>
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	1c58      	adds	r0, r3, #1
 8009fd8:	6010      	str	r0, [r2, #0]
 8009fda:	7019      	strb	r1, [r3, #0]
 8009fdc:	4608      	mov	r0, r1
 8009fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <__sfputs_r>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	460f      	mov	r7, r1
 8009fea:	4614      	mov	r4, r2
 8009fec:	18d5      	adds	r5, r2, r3
 8009fee:	42ac      	cmp	r4, r5
 8009ff0:	d101      	bne.n	8009ff6 <__sfputs_r+0x12>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e007      	b.n	800a006 <__sfputs_r+0x22>
 8009ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffa:	463a      	mov	r2, r7
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff ffda 	bl	8009fb6 <__sfputc_r>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d1f3      	bne.n	8009fee <__sfputs_r+0xa>
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a008 <_vfiprintf_r>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	460d      	mov	r5, r1
 800a00e:	b09d      	sub	sp, #116	; 0x74
 800a010:	4614      	mov	r4, r2
 800a012:	4698      	mov	r8, r3
 800a014:	4606      	mov	r6, r0
 800a016:	b118      	cbz	r0, 800a020 <_vfiprintf_r+0x18>
 800a018:	6a03      	ldr	r3, [r0, #32]
 800a01a:	b90b      	cbnz	r3, 800a020 <_vfiprintf_r+0x18>
 800a01c:	f7fd fc10 	bl	8007840 <__sinit>
 800a020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a022:	07d9      	lsls	r1, r3, #31
 800a024:	d405      	bmi.n	800a032 <_vfiprintf_r+0x2a>
 800a026:	89ab      	ldrh	r3, [r5, #12]
 800a028:	059a      	lsls	r2, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_vfiprintf_r+0x2a>
 800a02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a02e:	f7fd fd44 	bl	8007aba <__retarget_lock_acquire_recursive>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	071b      	lsls	r3, r3, #28
 800a036:	d501      	bpl.n	800a03c <_vfiprintf_r+0x34>
 800a038:	692b      	ldr	r3, [r5, #16]
 800a03a:	b99b      	cbnz	r3, 800a064 <_vfiprintf_r+0x5c>
 800a03c:	4629      	mov	r1, r5
 800a03e:	4630      	mov	r0, r6
 800a040:	f000 f93a 	bl	800a2b8 <__swsetup_r>
 800a044:	b170      	cbz	r0, 800a064 <_vfiprintf_r+0x5c>
 800a046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a048:	07dc      	lsls	r4, r3, #31
 800a04a:	d504      	bpl.n	800a056 <_vfiprintf_r+0x4e>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	b01d      	add	sp, #116	; 0x74
 800a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	0598      	lsls	r0, r3, #22
 800a05a:	d4f7      	bmi.n	800a04c <_vfiprintf_r+0x44>
 800a05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05e:	f7fd fd2d 	bl	8007abc <__retarget_lock_release_recursive>
 800a062:	e7f3      	b.n	800a04c <_vfiprintf_r+0x44>
 800a064:	2300      	movs	r3, #0
 800a066:	9309      	str	r3, [sp, #36]	; 0x24
 800a068:	2320      	movs	r3, #32
 800a06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a072:	2330      	movs	r3, #48	; 0x30
 800a074:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a228 <_vfiprintf_r+0x220>
 800a078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a07c:	f04f 0901 	mov.w	r9, #1
 800a080:	4623      	mov	r3, r4
 800a082:	469a      	mov	sl, r3
 800a084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a088:	b10a      	cbz	r2, 800a08e <_vfiprintf_r+0x86>
 800a08a:	2a25      	cmp	r2, #37	; 0x25
 800a08c:	d1f9      	bne.n	800a082 <_vfiprintf_r+0x7a>
 800a08e:	ebba 0b04 	subs.w	fp, sl, r4
 800a092:	d00b      	beq.n	800a0ac <_vfiprintf_r+0xa4>
 800a094:	465b      	mov	r3, fp
 800a096:	4622      	mov	r2, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff ffa2 	bl	8009fe4 <__sfputs_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f000 80a9 	beq.w	800a1f8 <_vfiprintf_r+0x1f0>
 800a0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a8:	445a      	add	r2, fp
 800a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 80a1 	beq.w	800a1f8 <_vfiprintf_r+0x1f0>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c0:	f10a 0a01 	add.w	sl, sl, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ce:	4654      	mov	r4, sl
 800a0d0:	2205      	movs	r2, #5
 800a0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d6:	4854      	ldr	r0, [pc, #336]	; (800a228 <_vfiprintf_r+0x220>)
 800a0d8:	f7f6 f88a 	bl	80001f0 <memchr>
 800a0dc:	9a04      	ldr	r2, [sp, #16]
 800a0de:	b9d8      	cbnz	r0, 800a118 <_vfiprintf_r+0x110>
 800a0e0:	06d1      	lsls	r1, r2, #27
 800a0e2:	bf44      	itt	mi
 800a0e4:	2320      	movmi	r3, #32
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ea:	0713      	lsls	r3, r2, #28
 800a0ec:	bf44      	itt	mi
 800a0ee:	232b      	movmi	r3, #43	; 0x2b
 800a0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fa:	d015      	beq.n	800a128 <_vfiprintf_r+0x120>
 800a0fc:	9a07      	ldr	r2, [sp, #28]
 800a0fe:	4654      	mov	r4, sl
 800a100:	2000      	movs	r0, #0
 800a102:	f04f 0c0a 	mov.w	ip, #10
 800a106:	4621      	mov	r1, r4
 800a108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10c:	3b30      	subs	r3, #48	; 0x30
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d94d      	bls.n	800a1ae <_vfiprintf_r+0x1a6>
 800a112:	b1b0      	cbz	r0, 800a142 <_vfiprintf_r+0x13a>
 800a114:	9207      	str	r2, [sp, #28]
 800a116:	e014      	b.n	800a142 <_vfiprintf_r+0x13a>
 800a118:	eba0 0308 	sub.w	r3, r0, r8
 800a11c:	fa09 f303 	lsl.w	r3, r9, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	46a2      	mov	sl, r4
 800a126:	e7d2      	b.n	800a0ce <_vfiprintf_r+0xc6>
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	1d19      	adds	r1, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	9103      	str	r1, [sp, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfbb      	ittet	lt
 800a134:	425b      	neglt	r3, r3
 800a136:	f042 0202 	orrlt.w	r2, r2, #2
 800a13a:	9307      	strge	r3, [sp, #28]
 800a13c:	9307      	strlt	r3, [sp, #28]
 800a13e:	bfb8      	it	lt
 800a140:	9204      	strlt	r2, [sp, #16]
 800a142:	7823      	ldrb	r3, [r4, #0]
 800a144:	2b2e      	cmp	r3, #46	; 0x2e
 800a146:	d10c      	bne.n	800a162 <_vfiprintf_r+0x15a>
 800a148:	7863      	ldrb	r3, [r4, #1]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d134      	bne.n	800a1b8 <_vfiprintf_r+0x1b0>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfb8      	it	lt
 800a15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a15e:	3402      	adds	r4, #2
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a238 <_vfiprintf_r+0x230>
 800a166:	7821      	ldrb	r1, [r4, #0]
 800a168:	2203      	movs	r2, #3
 800a16a:	4650      	mov	r0, sl
 800a16c:	f7f6 f840 	bl	80001f0 <memchr>
 800a170:	b138      	cbz	r0, 800a182 <_vfiprintf_r+0x17a>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	eba0 000a 	sub.w	r0, r0, sl
 800a178:	2240      	movs	r2, #64	; 0x40
 800a17a:	4082      	lsls	r2, r0
 800a17c:	4313      	orrs	r3, r2
 800a17e:	3401      	adds	r4, #1
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a186:	4829      	ldr	r0, [pc, #164]	; (800a22c <_vfiprintf_r+0x224>)
 800a188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18c:	2206      	movs	r2, #6
 800a18e:	f7f6 f82f 	bl	80001f0 <memchr>
 800a192:	2800      	cmp	r0, #0
 800a194:	d03f      	beq.n	800a216 <_vfiprintf_r+0x20e>
 800a196:	4b26      	ldr	r3, [pc, #152]	; (800a230 <_vfiprintf_r+0x228>)
 800a198:	bb1b      	cbnz	r3, 800a1e2 <_vfiprintf_r+0x1da>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	3307      	adds	r3, #7
 800a19e:	f023 0307 	bic.w	r3, r3, #7
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a8:	443b      	add	r3, r7
 800a1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ac:	e768      	b.n	800a080 <_vfiprintf_r+0x78>
 800a1ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	e7a6      	b.n	800a106 <_vfiprintf_r+0xfe>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f04f 0c0a 	mov.w	ip, #10
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ca:	3a30      	subs	r2, #48	; 0x30
 800a1cc:	2a09      	cmp	r2, #9
 800a1ce:	d903      	bls.n	800a1d8 <_vfiprintf_r+0x1d0>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0c6      	beq.n	800a162 <_vfiprintf_r+0x15a>
 800a1d4:	9105      	str	r1, [sp, #20]
 800a1d6:	e7c4      	b.n	800a162 <_vfiprintf_r+0x15a>
 800a1d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1dc:	4604      	mov	r4, r0
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7f0      	b.n	800a1c4 <_vfiprintf_r+0x1bc>
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	4b12      	ldr	r3, [pc, #72]	; (800a234 <_vfiprintf_r+0x22c>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7fc fed5 	bl	8006f9c <_printf_float>
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	1c78      	adds	r0, r7, #1
 800a1f6:	d1d6      	bne.n	800a1a6 <_vfiprintf_r+0x19e>
 800a1f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1fa:	07d9      	lsls	r1, r3, #31
 800a1fc:	d405      	bmi.n	800a20a <_vfiprintf_r+0x202>
 800a1fe:	89ab      	ldrh	r3, [r5, #12]
 800a200:	059a      	lsls	r2, r3, #22
 800a202:	d402      	bmi.n	800a20a <_vfiprintf_r+0x202>
 800a204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a206:	f7fd fc59 	bl	8007abc <__retarget_lock_release_recursive>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	065b      	lsls	r3, r3, #25
 800a20e:	f53f af1d 	bmi.w	800a04c <_vfiprintf_r+0x44>
 800a212:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a214:	e71c      	b.n	800a050 <_vfiprintf_r+0x48>
 800a216:	ab03      	add	r3, sp, #12
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	462a      	mov	r2, r5
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <_vfiprintf_r+0x22c>)
 800a21e:	a904      	add	r1, sp, #16
 800a220:	4630      	mov	r0, r6
 800a222:	f7fd f95f 	bl	80074e4 <_printf_i>
 800a226:	e7e4      	b.n	800a1f2 <_vfiprintf_r+0x1ea>
 800a228:	0800a934 	.word	0x0800a934
 800a22c:	0800a93e 	.word	0x0800a93e
 800a230:	08006f9d 	.word	0x08006f9d
 800a234:	08009fe5 	.word	0x08009fe5
 800a238:	0800a93a 	.word	0x0800a93a

0800a23c <__swbuf_r>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	460e      	mov	r6, r1
 800a240:	4614      	mov	r4, r2
 800a242:	4605      	mov	r5, r0
 800a244:	b118      	cbz	r0, 800a24e <__swbuf_r+0x12>
 800a246:	6a03      	ldr	r3, [r0, #32]
 800a248:	b90b      	cbnz	r3, 800a24e <__swbuf_r+0x12>
 800a24a:	f7fd faf9 	bl	8007840 <__sinit>
 800a24e:	69a3      	ldr	r3, [r4, #24]
 800a250:	60a3      	str	r3, [r4, #8]
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	071a      	lsls	r2, r3, #28
 800a256:	d525      	bpl.n	800a2a4 <__swbuf_r+0x68>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	b31b      	cbz	r3, 800a2a4 <__swbuf_r+0x68>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	6922      	ldr	r2, [r4, #16]
 800a260:	1a98      	subs	r0, r3, r2
 800a262:	6963      	ldr	r3, [r4, #20]
 800a264:	b2f6      	uxtb	r6, r6
 800a266:	4283      	cmp	r3, r0
 800a268:	4637      	mov	r7, r6
 800a26a:	dc04      	bgt.n	800a276 <__swbuf_r+0x3a>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4628      	mov	r0, r5
 800a270:	f7ff fdca 	bl	8009e08 <_fflush_r>
 800a274:	b9e0      	cbnz	r0, 800a2b0 <__swbuf_r+0x74>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	3b01      	subs	r3, #1
 800a27a:	60a3      	str	r3, [r4, #8]
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	6022      	str	r2, [r4, #0]
 800a282:	701e      	strb	r6, [r3, #0]
 800a284:	6962      	ldr	r2, [r4, #20]
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	429a      	cmp	r2, r3
 800a28a:	d004      	beq.n	800a296 <__swbuf_r+0x5a>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	07db      	lsls	r3, r3, #31
 800a290:	d506      	bpl.n	800a2a0 <__swbuf_r+0x64>
 800a292:	2e0a      	cmp	r6, #10
 800a294:	d104      	bne.n	800a2a0 <__swbuf_r+0x64>
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f7ff fdb5 	bl	8009e08 <_fflush_r>
 800a29e:	b938      	cbnz	r0, 800a2b0 <__swbuf_r+0x74>
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f806 	bl	800a2b8 <__swsetup_r>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0d5      	beq.n	800a25c <__swbuf_r+0x20>
 800a2b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2b4:	e7f4      	b.n	800a2a0 <__swbuf_r+0x64>
	...

0800a2b8 <__swsetup_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <__swsetup_r+0xac>)
 800a2bc:	4605      	mov	r5, r0
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	b118      	cbz	r0, 800a2cc <__swsetup_r+0x14>
 800a2c4:	6a03      	ldr	r3, [r0, #32]
 800a2c6:	b90b      	cbnz	r3, 800a2cc <__swsetup_r+0x14>
 800a2c8:	f7fd faba 	bl	8007840 <__sinit>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d2:	0718      	lsls	r0, r3, #28
 800a2d4:	d422      	bmi.n	800a31c <__swsetup_r+0x64>
 800a2d6:	06d9      	lsls	r1, r3, #27
 800a2d8:	d407      	bmi.n	800a2ea <__swsetup_r+0x32>
 800a2da:	2309      	movs	r3, #9
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	e034      	b.n	800a354 <__swsetup_r+0x9c>
 800a2ea:	0758      	lsls	r0, r3, #29
 800a2ec:	d512      	bpl.n	800a314 <__swsetup_r+0x5c>
 800a2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f0:	b141      	cbz	r1, 800a304 <__swsetup_r+0x4c>
 800a2f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2f6:	4299      	cmp	r1, r3
 800a2f8:	d002      	beq.n	800a300 <__swsetup_r+0x48>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7fe fa82 	bl	8008804 <_free_r>
 800a300:	2300      	movs	r3, #0
 800a302:	6363      	str	r3, [r4, #52]	; 0x34
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	2300      	movs	r3, #0
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f043 0308 	orr.w	r3, r3, #8
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	b94b      	cbnz	r3, 800a334 <__swsetup_r+0x7c>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a32a:	d003      	beq.n	800a334 <__swsetup_r+0x7c>
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f884 	bl	800a43c <__smakebuf_r>
 800a334:	89a0      	ldrh	r0, [r4, #12]
 800a336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a33a:	f010 0301 	ands.w	r3, r0, #1
 800a33e:	d00a      	beq.n	800a356 <__swsetup_r+0x9e>
 800a340:	2300      	movs	r3, #0
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	6963      	ldr	r3, [r4, #20]
 800a346:	425b      	negs	r3, r3
 800a348:	61a3      	str	r3, [r4, #24]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	b943      	cbnz	r3, 800a360 <__swsetup_r+0xa8>
 800a34e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a352:	d1c4      	bne.n	800a2de <__swsetup_r+0x26>
 800a354:	bd38      	pop	{r3, r4, r5, pc}
 800a356:	0781      	lsls	r1, r0, #30
 800a358:	bf58      	it	pl
 800a35a:	6963      	ldrpl	r3, [r4, #20]
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	e7f4      	b.n	800a34a <__swsetup_r+0x92>
 800a360:	2000      	movs	r0, #0
 800a362:	e7f7      	b.n	800a354 <__swsetup_r+0x9c>
 800a364:	200001d0 	.word	0x200001d0

0800a368 <_raise_r>:
 800a368:	291f      	cmp	r1, #31
 800a36a:	b538      	push	{r3, r4, r5, lr}
 800a36c:	4604      	mov	r4, r0
 800a36e:	460d      	mov	r5, r1
 800a370:	d904      	bls.n	800a37c <_raise_r+0x14>
 800a372:	2316      	movs	r3, #22
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	f04f 30ff 	mov.w	r0, #4294967295
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a37e:	b112      	cbz	r2, 800a386 <_raise_r+0x1e>
 800a380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a384:	b94b      	cbnz	r3, 800a39a <_raise_r+0x32>
 800a386:	4620      	mov	r0, r4
 800a388:	f000 f830 	bl	800a3ec <_getpid_r>
 800a38c:	462a      	mov	r2, r5
 800a38e:	4601      	mov	r1, r0
 800a390:	4620      	mov	r0, r4
 800a392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a396:	f000 b817 	b.w	800a3c8 <_kill_r>
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d00a      	beq.n	800a3b4 <_raise_r+0x4c>
 800a39e:	1c59      	adds	r1, r3, #1
 800a3a0:	d103      	bne.n	800a3aa <_raise_r+0x42>
 800a3a2:	2316      	movs	r3, #22
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	e7e7      	b.n	800a37a <_raise_r+0x12>
 800a3aa:	2400      	movs	r4, #0
 800a3ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	4798      	blx	r3
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e7e0      	b.n	800a37a <_raise_r+0x12>

0800a3b8 <raise>:
 800a3b8:	4b02      	ldr	r3, [pc, #8]	; (800a3c4 <raise+0xc>)
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	f7ff bfd3 	b.w	800a368 <_raise_r>
 800a3c2:	bf00      	nop
 800a3c4:	200001d0 	.word	0x200001d0

0800a3c8 <_kill_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d07      	ldr	r5, [pc, #28]	; (800a3e8 <_kill_r+0x20>)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	f7f7 fa77 	bl	80018c8 <_kill>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d102      	bne.n	800a3e4 <_kill_r+0x1c>
 800a3de:	682b      	ldr	r3, [r5, #0]
 800a3e0:	b103      	cbz	r3, 800a3e4 <_kill_r+0x1c>
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	bd38      	pop	{r3, r4, r5, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000564 	.word	0x20000564

0800a3ec <_getpid_r>:
 800a3ec:	f7f7 ba64 	b.w	80018b8 <_getpid>

0800a3f0 <__swhatbuf_r>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	b096      	sub	sp, #88	; 0x58
 800a3fc:	4615      	mov	r5, r2
 800a3fe:	461e      	mov	r6, r3
 800a400:	da0d      	bge.n	800a41e <__swhatbuf_r+0x2e>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a408:	f04f 0100 	mov.w	r1, #0
 800a40c:	bf0c      	ite	eq
 800a40e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a412:	2340      	movne	r3, #64	; 0x40
 800a414:	2000      	movs	r0, #0
 800a416:	6031      	str	r1, [r6, #0]
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	b016      	add	sp, #88	; 0x58
 800a41c:	bd70      	pop	{r4, r5, r6, pc}
 800a41e:	466a      	mov	r2, sp
 800a420:	f000 f848 	bl	800a4b4 <_fstat_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	dbec      	blt.n	800a402 <__swhatbuf_r+0x12>
 800a428:	9901      	ldr	r1, [sp, #4]
 800a42a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a42e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a432:	4259      	negs	r1, r3
 800a434:	4159      	adcs	r1, r3
 800a436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43a:	e7eb      	b.n	800a414 <__swhatbuf_r+0x24>

0800a43c <__smakebuf_r>:
 800a43c:	898b      	ldrh	r3, [r1, #12]
 800a43e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a440:	079d      	lsls	r5, r3, #30
 800a442:	4606      	mov	r6, r0
 800a444:	460c      	mov	r4, r1
 800a446:	d507      	bpl.n	800a458 <__smakebuf_r+0x1c>
 800a448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	2301      	movs	r3, #1
 800a452:	6163      	str	r3, [r4, #20]
 800a454:	b002      	add	sp, #8
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	ab01      	add	r3, sp, #4
 800a45a:	466a      	mov	r2, sp
 800a45c:	f7ff ffc8 	bl	800a3f0 <__swhatbuf_r>
 800a460:	9900      	ldr	r1, [sp, #0]
 800a462:	4605      	mov	r5, r0
 800a464:	4630      	mov	r0, r6
 800a466:	f7fe fd99 	bl	8008f9c <_malloc_r>
 800a46a:	b948      	cbnz	r0, 800a480 <__smakebuf_r+0x44>
 800a46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a470:	059a      	lsls	r2, r3, #22
 800a472:	d4ef      	bmi.n	800a454 <__smakebuf_r+0x18>
 800a474:	f023 0303 	bic.w	r3, r3, #3
 800a478:	f043 0302 	orr.w	r3, r3, #2
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	e7e3      	b.n	800a448 <__smakebuf_r+0xc>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	6020      	str	r0, [r4, #0]
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	6163      	str	r3, [r4, #20]
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	6120      	str	r0, [r4, #16]
 800a492:	b15b      	cbz	r3, 800a4ac <__smakebuf_r+0x70>
 800a494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 f81d 	bl	800a4d8 <_isatty_r>
 800a49e:	b128      	cbz	r0, 800a4ac <__smakebuf_r+0x70>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	431d      	orrs	r5, r3
 800a4b0:	81a5      	strh	r5, [r4, #12]
 800a4b2:	e7cf      	b.n	800a454 <__smakebuf_r+0x18>

0800a4b4 <_fstat_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d07      	ldr	r5, [pc, #28]	; (800a4d4 <_fstat_r+0x20>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f7f7 fa60 	bl	8001986 <_fstat>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <_fstat_r+0x1c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b103      	cbz	r3, 800a4d0 <_fstat_r+0x1c>
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000564 	.word	0x20000564

0800a4d8 <_isatty_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_isatty_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f7 fa5f 	bl	80019a6 <_isatty>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_isatty_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_isatty_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20000564 	.word	0x20000564

0800a4f8 <_init>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr

0800a504 <_fini>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr
